@model IEM.Areas.FLEXIBUY.Models.GRNInward
@using IEM.Common;
@{
    ViewBag.Title = "grndetails";
    WebGrid grid = new WebGrid(source: Model.objInwardList, canSort: true, canPage: false, rowsPerPage: 2, ajaxUpdateContainerId: "grndetails", ajaxUpdateCallback: "dummyfun()",selectionFieldName:"selectedrow");
    int rowNum = 0;
    CmnFunctions obj = new CmnFunctions();
    var viewfor = (string)Session["viewfor"];
    if (viewfor == "edit")
    {
        ViewBag.viewmode = "";
    }
    else if (viewfor == "view")
    {
        ViewBag.viewmode = "disabled";
    }
    var fg = ViewBag.result;
}
<input type="hidden" id="hid_chkresult" value="@Model.chkResult" />
<input type="hidden" id="hid_podetailsgid" />
<input type="hidden" id="hid_recd_date" />
<input type="hidden" id="hid_recd_qty" />
<input type="hidden" id="hid_viewmode" value="@viewfor" />
@*<div id="grndetails">
    <br />*@
<div id="grndetail" class="container-fluid overflowx overflowy">
    @if (viewfor == "edit")
    {
        @grid.GetHtml(
         tableStyle: "table table-bordered table-hover",
        htmlAttributes: new { id = "grndetailgrid" },
        columns: grid.Columns
            (
         grid.Column("slno", obj.Sorter("slno", "SlNo", grid)),
          grid.Column("slno", format: a => rowNum = rowNum + 1),
         grid.Column("podetailsGid", obj.Sorter("podetailsGid", "podetGid", grid)),
         grid.Column("grnReleaseGid", obj.Sorter("grnReleaseGid", "grnReleaseGid", grid)),
         grid.Column("productGroup", obj.Sorter("productGroup", "Product Group", grid), style: "MidColumn30"),
         grid.Column("productCode", obj.Sorter("productCode", "Product Code", grid), style: "MidColumn30"),
         grid.Column("productName", obj.Sorter("productName", "Product Name", grid), style: "MidColumn50"),
                  grid.Column("uomcode", obj.Sorter("uomcode", "Units", grid), style: "MidColumn30"),
            //grid.Column("prodservicename", obj.Sorter("prodservicename", "Product Name", grid), style: "MidColumn50"),
            //grid.Column("prodservicedesc", obj.Sorter("prodservicedesc", "Product  Description", grid), style: "MidColumn50",
         grid.Column("quantity", obj.Sorter("quantity", "Quantity", grid), style: "MidColumn30"),
         grid.Column("quantReleased", obj.Sorter("quantReleased", "Released Quantity", grid), style: "MidColumn30"),
              grid.Column("quantBalanced", obj.Sorter("quantBalanced", "Balance Quantity", grid), style: "MidColumn30"),
         grid.Column("poreleasedDate", obj.Sorter("poreleasedDate", "Released Date", grid), style: "MidColumn30"),
                 
         grid.Column("quantReceived", obj.Sorter("quantReceived", "Received Quantity", grid),style: "MidColumn30"),
        // format: @<text><span class="display" id="lblunit">@item.quantReceived</span>
       // <input type="text" id="inquantr_@item.grnReleaseGid" name="inquantr" onchange="receivedQty(value,this)"
              // onkeypress="return isNumber1(event);"
              // href="@item.grnReleaseGid" value="@item.quantReceived" style="width:100px"
             //  class="edit textboxStyle" /> </text>,style:"MidColumn30"),
            grid.Column("receivedDate", obj.Sorter("receivedDate", "Received Date", grid),style: "MidColumn30"),
              //format: @<text><span class="display" id="lbldate">@item.receivedDate</span>
           // <input type="text" id="indate_@item.grnReleaseGid" name="indate"
                  // onkeypress="return isDate(event, this);" onmouseover="getDate(id)"
                  // href="@item.grnReleaseGid" value="@item.receivedDate" style="width:100px"
                  // class="edit textboxStyle" /> </text>,style:"MidColumn30"),
                 grid.Column(header: "Action", canSort: false, style: "action",
           format: @<text>
                    @*<span class="glyphicon glyphicon-floppy-open  display-mode add-btn"><label id="sdf34" hidden="hidden"> @rowNum</label></span>*@
                    @*<a><span class='glyphicon glyphicon-floppy-save edit savegrn-btn Color '><label id="sdf34" hidden="hidden"> @item.grnReleaseGid</label></span></a>*@
                    <a><span class='glyphicon glyphicon-edit display editgrn-btn Color'><label id="sdf67" hidden="hidden"> @rowNum</label> </span></a>
                    <a><span class='glyphicon glyphicon-remove edit cancelgrn-btn Color'> <label id="sdf000-" hidden="hidden"> @rowNum</label></span></a>
            </text>
        ),
          grid.Column(header: "Select", canSort: false, style: "action",
                     format: @<text>
            @*@if (item.receivedDate = "")
            {*@
                <input type="checkbox" href="@item.grnReleaseGid" value="@item.grnReleaseGid"
                       class="btn btn-link chkb" name="ids"
                       onclick="GrndetailSelection()"
                       id="chkselect__@rowNum" title="Select" />
            @*}
            else
            {
                <input type="checkbox" href="@item.grnReleaseGid" value="@item.grnReleaseGid"
                       class="btn btn-link chkb" name="ids" checked="checked"
                       onclick="GrndetailSelection()"
                       id="chkselect__@rowNum" title="Select" />
            }*@
                    </text>)
                                  ))

    }
    else if (viewfor == "view")
    {
        @grid.GetHtml(
        tableStyle: "table table-bordered table-hover",
        htmlAttributes: new { id = "grndetailgrid" },
        columns: grid.Columns
            (
         grid.Column("slno", obj.Sorter("slno", "SlNo", grid)),
          grid.Column("slno", format: a => rowNum = rowNum + 1),
         grid.Column("podetailsGid", obj.Sorter("podetailsGid", "podetGid", grid)),
         grid.Column("grnReleaseGid", obj.Sorter("grnReleaseGid", "grnReleaseGid", grid)),
         grid.Column("productGroup", obj.Sorter("productGroup", "Product Group", grid), style: "MidColumn30"),
         grid.Column("productCode", obj.Sorter("productCode", "Product Code", grid), style: "MidColumn30"),
         grid.Column("productName", obj.Sorter("productName", "Product Name", grid), style: "MidColumn50"),
                  grid.Column("uomcode", obj.Sorter("uomcode", "Units", grid), style: "MidColumn30"),
            //grid.Column("prodservicename", obj.Sorter("prodservicename", "Product Name", grid), style: "MidColumn50"),
            //grid.Column("prodservicedesc", obj.Sorter("prodservicedesc", "Product  Description", grid), style: "MidColumn50",
         grid.Column("quantity", obj.Sorter("quantity", "Quantity", grid), style: "MidColumn30"),
         grid.Column("quantReleased", obj.Sorter("quantReleased", "Released Quantity", grid), style: "MidColumn30"),
                       grid.Column("quantBalanced", obj.Sorter("quantBalanced", "Balance Quantity", grid), style: "MidColumn30"),
         grid.Column("quantReceived", obj.Sorter("quantReceived", "Received Quantity", grid)),
         grid.Column("poreleasedDate", obj.Sorter("poreleasedDate", "Released Date", grid), style: "MidColumn30"),
         grid.Column("receivedDate", obj.Sorter("receivedDate", "Received Date", grid))))
    }
    else
    {
        @grid.GetHtml(
         tableStyle: "table table-bordered table-hover",
        htmlAttributes: new { id = "grndetailgrid" },
        columns: grid.Columns
            (
         grid.Column("slno", obj.Sorter("slno", "SlNo", grid)),
         grid.Column("slno", format: a => rowNum = rowNum + 1),
         grid.Column("podetailsGid", obj.Sorter("podetailsGid", "podetGid", grid)),
         grid.Column("grnReleaseGid", obj.Sorter("grnReleaseGid", "grnReleaseGid", grid)),
         grid.Column("productGroup", obj.Sorter("productGroup", "Product Group", grid), style: "MidColumn30"),
         grid.Column("productCode", obj.Sorter("productCode", "Product Code", grid), style: "MidColumn30"),
         grid.Column("productName", obj.Sorter("productName", "Product Name", grid), style: "MidColumn50"),
         grid.Column("uomcode", obj.Sorter("uomcode", "Units", grid), style: "MidColumn30"),
            //grid.Column("prodservicename", obj.Sorter("prodservicename", "Product Name", grid), style: "MidColumn50"),
            //grid.Column("prodservicedesc", obj.Sorter("prodservicedesc", "Product  Description", grid), style: "MidColumn50",
         grid.Column("quantity", obj.Sorter("quantity", "Quantity", grid), style: "MidColumn30"),
         grid.Column("quantReleased", obj.Sorter("quantReleased", "Released Quantity", grid), style: "MidColumn30"),
              grid.Column("quantBalanced", obj.Sorter("quantBalanced", "Balance Quantity", grid), style: "MidColumn30"),
         grid.Column("poreleasedDate", obj.Sorter("poreleasedDate", "Released Date", grid), style: "MidColumn30"),                          
         grid.Column("quantReceived", obj.Sorter("quantReceived", "Received Quantity", grid),
         format: @<text><span class="display" id="lblunit">@item.quantReceived</span>
        <input type="text" id="inquantr_@item.grnReleaseGid" name="inquantr" onchange="receivedQty(value,this)"
               onkeypress="return isNumber1(event);"
               href="@item.grnReleaseGid" value="@item.quantReceived" style="width:100px"
               class="edit textboxStyle" /> </text>,style:"MidColumn30"),
            grid.Column("receivedDate", obj.Sorter("receivedDate", "Received Date", grid),
              format: @<text><span class="display" id="lbldate">@item.receivedDate</span>
            <input type="text" id="indate_@item.grnReleaseGid" name="indate"
                   onkeypress="return isDate(event, this);" onmouseover="getDate(id)"
                   href="@item.grnReleaseGid" value="@item.receivedDate" style="width:100px"
                   class="edit textboxStyle" /> </text>,style:"MidColumn30"),
                 grid.Column(header: "Action", canSort: false, style: "action",
            format: @<text>
                    @*<span class="glyphicon glyphicon-floppy-open  display-mode add-btn"><label id="sdf34" hidden="hidden"> @rowNum</label></span>*@
                    <a><span class='glyphicon glyphicon-floppy-save edit savegrn-btn Color '><label id="sdf34" hidden="hidden"> @item.grnReleaseGid</label></span></a>
                    <a><span class='glyphicon glyphicon-edit display editgrn-btn Color'><label id="sdf67" hidden="hidden"> @rowNum</label> </span></a>
                    <a><span class='glyphicon glyphicon-remove edit cancelgrn-btn Color'> <label id="sdf000-" hidden="hidden"> @rowNum</label></span></a>
            </text>),
            grid.Column(header: "Select", canSort: false, style: "action",
                     format: @<text>
            @*@if (item.receivedDate = "")
            {*@
                <input type="checkbox" href="@item.grnReleaseGid" value="@item.grnReleaseGid"
                       class="btn btn-link chkb" name="ids"
                       onclick="GrndetailSelection()"
                       id="chkselect__@rowNum" title="Select" />
            @*}
            else
            {
                <input type="checkbox" href="@item.grnReleaseGid" value="@item.grnReleaseGid"
                       class="btn btn-link chkb" name="ids" checked="checked"
                       onclick="GrndetailSelection()"
                       id="chkselect__@rowNum" title="Select" />
            }*@
                    </text>)
                    ))
    }
</div>
@if (@ViewBag.records != null || @ViewBag.records == "")
{ <div class="borderStyle btnCenter">
        @ViewBag.records
    </div>
}

    @*</div>*@

    <script>

        var tr = $("#grndetailgrid").find('tr');
        // $("#podetailgrid td:nth-child(10),#podetailgrid th:nth-child(10)").hide();
        $("#grndetailgrid tr .Color").click(function () {
            $('#grndetailgrid').find('tr').css('background', 'none');
            $(this).closest('tr').css('background', '#ccc');
        });
        $("#grndetailgrid td:nth-child(2),#grndetailgrid th:nth-child(2)").hide();
        $("#grndetailgrid td:nth-child(3),#grndetailgrid th:nth-child(3)").hide();
        $("#grndetailgrid td:nth-child(4),#grndetailgrid th:nth-child(4)").hide();
        $(document).ready(function () {


            $('.edit').hide();
            $("#txtrecv_date").attr("disabled", true);
            $("#btnUpdate").attr("disabled", true);
            $("#chk_released").attr("disabled", true);
            //$("#chk_released").change(function () {
            //    if ($("#chk_released").prop('checked') == false) {
            //        $("#txtrecv_date").val("");
            //        $("#txtrecv_date").attr("disabled", true);
            //        $("#btnUpdate").attr("disabled", false);
            //    }
            //    else {
            //        $("#txtrecv_date").attr("disabled", false);
            //        $("#btnUpdate").attr("disabled", false);
            //    }
            //});

            //var tr = $(this).parents('tr:first');
            //var unitprice = tr.find('td:eq(9)').text();
            var flag = 0;
            $('.editgrn-btn').on('click', function () {
                if (flag == 0) {
                    flag = 1;
                    var tr = $(this).parents('tr:first');
                    tr.find('.edit, .display').toggle();
                }
            });
            $('.cancelgrn-btn').on('click', function () {
                flag = 0;
                var tr = $(this).parents('tr:first');
                tr.find('.edit, .display').toggle();
            });


            $('.savegrn-btn').on('click', function () {
                var flag = 0;
                var tr = $(this).parents('tr:first');
                var row = $(this).text();
                var quantReceived1 = tr.find("#inquantr_" + row.trim() + "").val();
                var quantReceived = parseFloat(quantReceived1).toFixed(2);
               //-- var quantReceived = parseFloat(quantReceived1);
                //var len = quantReceived1.length;
                //if (len >= 2) {
                //    var quantReceived = quantReceived1;
                //}
                //else {
                    

                //}
                // if (isNaN(quantReceived)) quantReceived = 0.0;
                var receivedDate = tr.find("#indate_" + row.trim() + "").val();
                var grnReleaseGid = tr.find("td:eq(3)").text();
                var recdQty = tr.find("td:eq(10)").text();
                var releceQty = tr.find("td:eq(9)").text();
                var proservicecode = tr.find("td:eq(5)").text();
                if (quantReceived == null || quantReceived == "" || quantReceived == "0") {
                    jAlert("Received Quantity should not be Empty", "Error");
                    return false;
                }
                else if (receivedDate == null || receivedDate == "" || receivedDate == parseFloat(0)) {
                    jAlert("Please Select Date", "Error");
                    return false;
                }

                else {
                    $('.edit').hide();
                    var objInward =
                    {
                        "quantReceived": quantReceived,
                        "receivedDate": receivedDate,
                        "grnReleaseGid": grnReleaseGid,
                        "quantBalanced": recdQty,
                        "quantReleased": releceQty
                    };
                    $.ajax({
                        url: '@Url.Action("GetCheck", "GrnSelectionPo")?' + new Date().getTime(),
                        type: 'POST',
                        data: { "prodservicecode": proservicecode, "Qty": quantReceived },
                        success: function (data) {
                            if (data == "success") {
                                $.ajax({
                                    url: '@Url.Action("GrnInwardTempDetails", "GrnSelectionPo")?' + new Date().getTime(),
                                    type: 'POST',
                                    data: objInward,
                                    success: function (data) {
                                        if (data == 0) {
                                            jAlert("Error Occured", "Error");
                                            return false;
                                        }
                                        else {
                                            $("#grndetail").load('@Url.Action("GrnInwardTempDetails", "GrnSelectionPo")?' + new Date().getTime());
                                        }
                                    },
                                    error: function () {
                                        jAlert("something seems wrong", "Error");
                                    }
                                });
                            }
                            else {
                                $("#grndetail").load('@Url.Action("GrnnewInwardTempDetails", "GrnSelectionPo")?' + new Date().getTime());
                                jAlert("Entered Received Qty not valid !.", "Error");
                                return false;
                            }
                        },
                        error: function () {
                            jAlert("something seems wrong", "Error");
                        }

                    })
                }
            });
        });
        //$('#grndetailgrid').find('input[name="indate"]').each(function () {
        //    var id = $(this).attr('href');
        //    var id1 = '#indate_' + id + '';
        //    alert(id1);
        //    ReceivedDate(id1);
        //});
        function getDate(id) {
            var id1 = '#' + id;
            $(id1).datepicker({
                changeMonth: true,
                changeYear: true,
                yearRange: '1950:2100',
                currentText: "Now",
                maxDate: 0,
                dateFormat: "dd-mm-yy"
            });
          //  ReceivedDate(id1);
        }
        function ReceivedDate(id1) {
          
            $(id1).datepicker(pickerOpts);
        }
        //var pickerOpts = {
        //    changeMonth: true,
        //    changeYear: true,
        //    yearRange: '1950:2100',
        //    currentText: "Now",
        //    dateFormat: "dd-mm-yy"
        //};
        var pickerOpts = {
            changeMonth: true,
            changeYear: true,
            yearRange: '1950:2100',
            currentText: "Now",
            maxDate: 0,
            dateFormat: "dd-mm-yy"
        };
        $("#txtrecv_date").keypress(function (event) {
            return isDate(event);
        });
        $("#txtrecv_date").datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: '1950:2100',
            currentText: "Now",
            maxDate: 0,
            dateFormat: "dd-mm-yy"
        });
        //$("#txtrecv_date").datepicker({

        //    changeMonth: true,
        //    changeYear: true,
        //    yearRange: '1950:2100',
        //    currentText: "Now",
        //    dateFormat: "dd-mm-yy"
        //});
        function UpdateQtyDate() {
            var receivedDate = $("#txtrecv_date").val();
            var podetailsgid = $("#hid_podetailsgid").val();
            if ($("#chk_released").prop('checked') == true) {
                var chkResult = $("#chk_released").val();
            }
            var objInward =
                {
                    "receivedDate": receivedDate,
                    "chkResult": chkResult,
                    "podetailsGid": podetailsgid
                };
            $.ajax({
                url: '@Url.Action("GrnInwardDetails", "GrnSelectionPo")?' + new Date().getTime(),
                type: 'POST',
                data: objInward,
                success: function (data) {
                    if (data == 0) {
                        jAlert("Error Occured", "Error");
                        return false;
                    }
                    else {
                        $("#grndetail").load('@Url.Action("GrnInwardDetails","GrnSelectionPo")?' + new Date().getTime());
                    }
                    //$("#poEditgrid1").empty().append(data);
                },
                error: function () {
                    jAlert("something seems wrong", "Error");
                }
            });
        }
        function receivedQty(value, element) {
            var id1 = $(element).attr('href');
            var tr = $(element).parents('tr:first');
            var row = $(element).text();
            var recdQty = tr.find("td:eq(10)").text();
            if (parseInt(value) > parseInt(recdQty)) {
                jAlert("Received Quantity Cannot be greater than Balance Quantity", "Error");
                $('#inquantr_' + id1 + '').val(recdQty);
                return false;
            }
        }
        var res = 0;
        var qty = 0;
        var date = 0;

        function GrndetailSelection() {
            $("#grndetailgrid tr").each(function (i, row) {
                var $actualRow = $(row);
                if ($actualRow.find('input[type=checkbox]').prop('checked') == true) {
                    $actualRow.css('background-color', '#ccc');
                }
                else {
                    $actualRow.css('background-color', 'white');
                }

                var i = 0;
                var ChkResult = "";
                var receivedQty = "";
                var receivedDate = "";

                $("#grndetailgrid td").find("input:checkbox").each(function () {

                    var id = $(this).attr('value')
                    var id2 = $(this).attr('id')
                    if ($('#' + id2 + '').is(":checked") == true) {
                        var objInward =
                           {
                               "grnReleaseGid": id
                           };
                        $.post('../GrnSelectionPo/GrnIncheckDetails', objInward,
                          function (data) {

                              if (data == 0) {
                                  jAlert("Error Occured", "Error");
                                  return false;
                              }
                              else {
                                  if (data == "AlReady_Exists") {

                                      $("#txtrecv_date").attr("disabled", false);
                                      $("#btnUpdate").attr("disabled", false);
                                      $("#chk_released").attr("disabled", true);
                                  }
                                  else if (data == "Not_There") {

                                      $("#txtrecv_date").attr("disabled", false);
                                      $("#btnUpdate").attr("disabled", false);
                                      $("#chk_released").attr("disabled", false);
                                  }
                              }
                          }, 'json');

                         //receivedQty = $(this).closest('tr').find('td:eq(11)').text();
                         //receivedDate = $(this).closest('tr').find('td:eq(12)').text();
                        //if (parseInt(receivedQty) > parseInt(0) && ($.trim(parseInt(receivedDate)) != "" && parseInt(receivedDate) != null)) {
                            $('#' + id2 + '').attr('checked', true);
                            ChkResult += $(this).closest('tr').find('td:eq(3)').text() + ",";
                            receivedQty = $(this).closest('tr').find('td:eq(11)').text() + ",";
                            receivedDate = $(this).closest('tr').find('td:eq(12)').text() + ",";
                        //}

                        //else {
                        //    $('#' + id2 + '').attr('checked', false);
                        //    if ($('#' + id2 + '').find('input[type=checkbox]').prop('checked') == false) {
                        //        $('#' + id2 + '').css('background-color', 'white')
                        //    }
                            //$('#' + id2 + '').css('background-color', 'white');
                        
                    }
                });

                ChkResult = ChkResult.substring(0, ChkResult.length - 1);
                receivedQty = receivedQty.substring(0, receivedQty.length - 1);
                receivedDate = receivedDate.substring(0, receivedDate.length - 1);
                res = ChkResult;
                qty = receivedQty;
                date = receivedDate;
            });
            var podetailgid = new Array(res);
            var qty1 = new Array(qty);
            var date1 = new Array(date);
            $("#hid_podetailsgid").val(podetailgid);
            $("#hid_recd_qty").val(qty1);
            $("#hid_recd_date").val(date1);
        }
    </script>