@model IEM.Areas.ASMS.Models.SupplierDeActvation
@using IEM.Common
@using IEM.Areas.ASMS.Models
@using System.Text
@using System.Data

@{
  
    CmnFunctions objCmnFunctions = new CmnFunctions();
    SupRenwalModel objd = new SupRenwalModel();
    List<SupplierDeActvation> lstAttachment = new List<SupplierDeActvation>();
    if (TempData["SearchItems"] != null)
    {
        lstAttachment = (List<SupplierDeActvation>)TempData["SearchItems"];
    }
   
    if (lstAttachment == null ||   lstAttachment.Count == 0)
    {
        ViewBag.IsSearched = "no";
        DataTable dtGetvalue = new DataTable();
        var x=Session["supplierattmtfileDe"];
        if (Session["supplierattmtfileDe"] !=null)
        {
            dtGetvalue = (DataTable)Session["supplierattmtfileDe"];
            //    string path =System.Web.HttpContext.Application["path"] as string;
            if (dtGetvalue.Rows.Count == 0)
            {
                Session["supplierattmtfileDe"] = null;
            }
            else
            {
                lstAttachment = objd.GetEmployeeeAttachmentDeActivation(dtGetvalue).ToList();
            }
        }
       
    }
    if (lstAttachment.Count == 0)
    {
        ViewBag.NoRecordsAttachment = "NoRecords";
        ViewBag.NoRecordsFoundAttachment = "No Records Found";
    }
    string Dstatus = Convert.ToString((string)Session["Dreqstatus"]);
}

<div id="wgAttachmentsupplier">
    @{
        var gridAttachment = new WebGrid(lstAttachment, canSort: true, canPage: false, rowsPerPage: 3, ajaxUpdateContainerId: "wgAttachmentsupplier", ajaxUpdateCallback: "DummyFunction()");
    }    
            @gridAttachment.GetHtml(
                     htmlAttributes: new { id = "wgAttachmentsupplier" },
                     tableStyle: "tableSmall table-bordered table-hover table-responsive",
                     mode: WebGridPagerModes.All,
                     columns:
                        gridAttachment.Columns(
                        // gridAttachment.Column("#", canSort: false, format: item => rowValAttachment = rowValAttachment + 1),
                        // gridAttachment.Column("Attachid", objCmnFunctions.Sorter("Attachid", "Slno", gridAttachment), canSort: false),
                        // gridAttachment.Column("DAttachid", "Slno", format: @<text>  <span> <label id="lblgid">@item.DAttachid</label> </span> <input type="text" id="gid" value="@item.DAttachid" style="display:none;" /></text>, style: "col2Width"),
                        gridAttachment.Column(format: @<input type="hidden" id="gid" value="@item.DAttachid" style="display:none;" />),
                        gridAttachment.Column("SlNo", format: item => item.WebGrid.Rows.IndexOf(item) + 1),
                        // gridAttachment.Column("AttachFileName", objCmnFunctions.Sorter("AttachFileName", "Attachment Name", gridAttachment), canSort: false),
                        gridAttachment.Column("DAttachFileName", "Attachment Name", format: @<text>  <span> <label id="lblName">@item.DAttachFileName</label> </span> <input type="text" name="attachedfile2" id="Name" value="@item.DAttachFileName" style="display:none;" /></text>, style: "col2Width"),
                        //   gridAttachment.Column("AttachFileType", objCmnFunctions.Sorter("AttachFileType", "Attachment Type", gridAttachment), canSort: false),
                        //  gridAttachment.Column("AttachmentDescription", objCmnFunctions.Sorter("AttachmentDescription", "Description", gridAttachment), canSort: false),
                        gridAttachment.Column("DTodate", objCmnFunctions.Sorter("DTodate", "Attached Date", gridAttachment), canSort: false),
                        //  gridAttachment.Column("Insertby", objCmnFunctions.Sorter("Insertby", "Attached By", gridAttachment), canSort: false),
                        gridAttachment.Column(header: "Action", canSort: false, style: "action",
                format: @<text>
                                    @*@Html.Raw("<a data-modal='' href='/EOW/EmployeeClaimnew/Download/" + item.AttachmentFilenameId + "' id='" + item.AttachmentFilenameId + "' title='Detail'> <span class='glyphicon glyphicon-search'> </span> </a>")
                                        @if (item.attachment_by == objCmnFunctions.GetLoginUserGid())
                                        {
                                            @Html.Raw("<a data-modal='' href='/EOW/EmployeeClaimnew/Download/" + item.Attachid + "' id='" + item.Attachid + "'  title='Delete'   > <span class='glyphicon glyphicon-trash'> </span> </a>")
                                    }*@
                    <a onclick="DownloadApprovalAttachments2(this)">  <span class='glyphicon glyphicon-eye-open cursorpointer'></span></a>
                    @*@Html.Raw("<input type='button' class='glyphicon glyphicon-trash cursorpointer' id='btnremove'  Onclick='remove1(" + item.Attachid + ")'  />")*@
                    @if (Dstatus.ToUpper().ToString() != "APPROVED" && Dstatus.ToUpper().ToString() != "INPROCESS")
                    {
                         <span class='glyphicon glyphicon-trash cursorpointer' ></span>
                    }
                    @*<input type='button' id='btnremove' class="glyphicon glyphicon-trash cursorpointer" onclick='remove1(" + item.Attachid + ")' />*@
                </text>)))
            @if (lstAttachment.Count == 0)
            {
                <div class="gridMessage">
                    @ViewBag.NoRecordsFoundAttachment
                </div>
            }
        </div>
<script>
   // $(document).ready(function () {


        function removeDe1(id)
        {
            alert(id);
            var data = id;
      //  $("#btnremove").click(function () {
         //   alert('ok');
            var att = id;
           // alert(att);
            var UserModel =
                {
                    "FilesToBeUploaded": att

                };
            jConfirm("Are you sure you want to delete this?", "Confirm", function (r) {
                if (r == true) {
                    alert('hai');
                    $.ajax({
                        type: "POST",
                        url: '../SupplierDeActivationQueue/removeDe1?' + new Date().getTime(),
                        contentType: 'application/json; charset=utf-8',
                        // processData: false,
                        data: JSON.stringify(UserModel),
                        success: function (data) {
                            //   alert(result);
                            // alert(result.length);
                            $("#wgAttachmentsupplierDe").load('../SupplierDeActivationQueue/SupplierAttachmentsDe?' + new Date().getTime());

                        },
                        error: function (xhr, status, p3, p4) {
                            var err = "Error " + " " + status + " " + p3 + " " + p4;
                            if (xhr.responseText && xhr.responseText[0] == "{")
                                err = JSON.parse(xhr.responseText).Message;
                            console.log(err);
                        }
                    });
                  

                }
              });
            }
         
    //  });

        function view(id)
        {
           // alert(id);
            var tr = $(this).parents('tr:first');
            var Name = tr.find("#Name").val();
            var value = '@Request.RequestContext.HttpContext.Session["supplierattmtfileDe"]';
          //  var path = '<%=Session["path"]%>';
          //  alert(path);
            // alert(value);Session["path"]
            window.open("//192.168.0.135/Images/" + Name, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=500, left=500, width=400, height=400");
           // window.open(path + Name, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=500, left=500, width=400, height=400");
        }
    function DownloadApprovalAttachments2(element) {
        var row = $(element).closest('tr');
        var fi = row.find($("input[name$=attachedfile2]")).val();
        location = "../Onboarding/DownloadDocument?id=" + fi;
    }
    $(document).ready(function () {
        //$('.glyphicon-eye-open').on('click', function () {
        //   // alert('hellow');
        //    var tr = $(this).parents('tr:first');
        //    //var Name = tr.find("#Name").val();
        //    var SurName = tr.find("#Name").val();
        //    //var UserID = tr.find("#UserID").html();
        //  //  alert(SurName);
        //    // alert(SurName);
        //    if (SurName != '') {
        //        //var path = '<%=Session["path"]%>';
        //        //alert(path);
        //        window.open("//192.168.84.94/temp/" + SurName, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=500, left=500, width=400, height=400");
        //        //window.open(path + Name, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=500, left=500, width=400, height=400");
        //    }
        //});

        $('.glyphicon-trash').on('click', function () {
           // alert('hai');
            var tr = $(this).parents('tr:first');
            //var Name = tr.find("#Name").val();
            var SurName = tr.find("#gid").val();
            //var UserID = tr.find("#UserID").html();
            var att = SurName;
          //  alert(att);
            var UserModel =
                {
                    "FilesToBeUploaded": att

                };
            jConfirm("Are you sure you want to delete this?", "Confirm", function (r) {
                if (r == true) {
                    $.ajax({
                        type: "POST",
                        url: '../SupplierDeActivationQueue/removeDe1?'+ new Date().getTime(),
                        contentType: 'application/json; charset=utf-8',
                        // processData: false,
                        data: JSON.stringify(UserModel),
                        success: function (data) {
                            //   alert(result);
                            // alert(result.length);
                            $("#wgAttachmentsupplier").load('../SupplierDeActivationQueue/SupplierAttachmentsDe?' + new Date().getTime());

                        },
                        error: function (xhr, status, p3, p4) {
                            var err = "Error " + " " + status + " " + p3 + " " + p4;
                            if (xhr.responseText && xhr.responseText[0] == "{")
                                err = JSON.parse(xhr.responseText).Message;
                            console.log(err);
                        }
                    });
                }
            });
        });

    });
</script>