@model IEM.Areas.FLEXIBUY.Models.CbfSumEntity
@{
    var grid = new WebGrid(source: Model.cbfCheckerDetails, canSort: false, ajaxUpdateContainerId: "cbfdetails", ajaxUpdateCallback: "Dummycbf()");
    grid.Pager(WebGridPagerModes.All);
    int rowNum = 0;
    int add2 = 0;

}
@*<h4>
        Cbf Details
    </h4>*@

@*<span style="color: rgb(52, 108, 196);">CBF Details</span>*@

<div style="padding:10px;" class="borderStyleBlue panel panel-info" >

    @functions{
        public static string sorter(string columnname, string columnheader, WebGrid grid)
        {
            return string.Format("{0} {1}", columnheader, grid.SortColumn == columnname ?
                grid.SortDirection == SortDirection.Ascending ? "▲" : "▼" : string.Empty);
        }
    }
    <div style="overflow-y:auto;">
        <div style="width:100%; overflow:auto;">
            @grid.GetHtml(
                tableStyle: "tableSmall table-bordered table-hover table-responsive overflowx",
                htmlAttributes: new { id = "grid2" },
                columns: grid.Columns(
                         grid.Column("Sl", format: a => rowNum = rowNum + 1, style: "sltd"),
                         grid.Column("productCodeChecker", sorter("productCodeChecker", "Product Code", grid), style: "productCode"),
                         grid.Column("productNameChecker", sorter("productNameChecker", "Product Name", grid), style: "productName"),
                         grid.Column("descriptionChecker", sorter("descriptionChecker", "Product Description", grid), style: "description"),
                         grid.Column("uomChecker", sorter("uomChecker", "UOM", grid), style: "UOM"),
                         grid.Column("qtyChecker", sorter("qtyChecker", "QTY", grid), style: "QTY centerAlign"),
                         grid.Column("unit_AmtChecker", sorter("unit_AmtChecker", "Unit Amount", grid), style: "unitAmt rightAlign"),
                         grid.Column("totalChecker", sorter("totalChecker", "Total", grid), style: "Total rightAlign"),
                         grid.Column("remarksChecker", sorter("remarksChecker", "Remarks", grid), style: "description"),
                         grid.Column("chartOfAccountChecker", sorter("chartOfAccountChecker", "Chart Of Account", grid), style: "chartofaccount"),
                         grid.Column("fcccChecker", sorter("fcccChecker", "FCCC", grid), style: "FCCC"),
                         grid.Column("budgetLineChecker", sorter("budgetLineChecker", "Budget line", grid), style: "budgetLine"),
                         grid.Column(header: "BOQ", canSort: false, style: "boq",
                format: @<text>
                <input type="button" value="View BOQ" class="btn btn-link" style="padding:3px;" onclick="boqview12(id)" id="@item.cbfDetailGidChecker" title="BOQ" />
                </text>)
                ))
            @if (ViewBag.records != null)
            {  <div align="center" class="borderStyle">
                <h6 class="row" style="font-weight:normal ;">
                    @ViewBag.records
                </h6>
            </div>
            }
        </div>

        <div style="float:left;font-weight:normal;">
            <span id="para">  Grand Total=@Model.cbfCheckerHeader.cbfAmtChecker </span>
        </div>
        <div style="float:right;">
            <span>Page: @(grid.PageIndex + 1) of @grid.PageCount</span>  <span> - Total No Of Records:@Model.cbfCheckerDetails.Count</span>
        </div>
    </div>
      
    </div>

<script>
    function boqview12(id) {
    
        //alert("check");
        @*objDialogforboq.load('@Url.Action("boqattached", "CbfCheckerraiser")?id=' + id + '&' + new Date().getTime());*@
        @*objDialogforboq.load('@Url.Action("BoqAttachgridinline1", "CbfCheckerraiser")?id=' + id + '&' + new Date().getTime());*@
        objDialogforboq.load('@Url.Action("CBFAttachmentIndex", "CbfRaiser")?cbfdetid=' + id + '&viewtype=view&' + new Date().getTime());
        objDialogforboq.dialog({ title: 'View BOQ Attachment' });
        objDialogforboq.dialog("open");
    }
</script>
