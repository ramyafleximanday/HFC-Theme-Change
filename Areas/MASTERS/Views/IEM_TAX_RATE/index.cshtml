@model  IEnumerable<IEM.Areas.MASTERS.Models.iem_mst_tax_rate>
@using IEM.Common
@{
    CmnFunctions prop = new CmnFunctions();
    Layout = "~/Views/Shared/_Layout.cshtml";
    var grid = new WebGrid(canPage: false, canSort: false);
    grid.Bind(Model);
    int rowVal = 0;
}


@*<link href="@Url.Content("~/Content/themes/base/jquery-ui.css")" rel="stylesheet" type="text/css" />*@
<link href="@Url.Content("~/Content/Rmax_Site.css")" rel="stylesheet" type="text/css" />

@*<script src="@Url.Content("~/Scripts/jquery-ui-1.8.24.min.js")" type="text/javascript"></script>*@
<div class="pageHeadingLayout">
    <span class="pageHeading">Tax Rate </span>
</div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="well" style="padding:10px;">
            <table class="myTableStyleTabNew" style="width:100%;">
                <tr>
                    <td style="width:25%; padding:0px 10px 0px 3px;">
                        <div class="input-append">
                            <span>  Tax  </span>
                            <br />
                            <input type="text"
                                   name="filter_name"
                                   id="txtFilterName"
                                   value="@ViewBag.filter_name"
                                   class="fstextbox"
                                   style="display: block; "
                                   maxlength="70" />
                        </div>
                    </td>
                    <td style="width:25%; padding:0px 10px 0px 3px;">
                        <div class="input-append">
                            <span>  Sub-Tax   </span>
                            <br />
                            <input type="text"
                                   name="filter_name1"
                                   id="txtFilterName1"
                                   value="@ViewBag.filter_name1"
                                   class="fstextbox"
                                   style="display: block; "
                                   maxlength="70" />
                        </div>
                    </td>
                    <td style="width:50%; padding:0px 10px 0px 3px;">
                        <button class="btn btn-primary" value="Search" name="command" type="submit" style="margin-top:20px;color:white;">
                            <span style="color:white;" class="glyphicon glyphicon-search"></span> Search
                        </button>


                        <button class="btn btn-primary" value="Clear" onclick="refresh()" name="command" type="button"
                                style="margin-top:20px;">
                            <span style="color:white;" class="glyphicon glyphicon-remove-circle"></span> Clear
                        </button>

                        <button type="button" value="New TaxRate" onclick="NewType()" class="btn btn-primary" style="margin-top:20px;">
                            <span style="color:white; font-size:12px;" class="glyphicon glyphicon-plus"></span>New TaxRate
                        </button>
                        <button type="button" formaction="" value="Export Excel" onclick="DownloadExcel()" class="btn btn-warning" style="margin-top:20px;">
                            <span style="color:white;font-size:12px; " class="glyphicon glyphicon-plus"></span> Export Excel
                        </button>
                    </td>
                </tr>
            </table>


            <div class="table-responsive" style="margin-top:10px;">
                @grid.GetHtml(
    htmlAttributes: new { id = "grid" },
                tableStyle: "tableSmall table-bordered table-hover",
                columns: grid.Columns
                        (
                
grid.Columns(grid.Column("SNo", style: "slno", format: item => rowVal = rowVal + 1),
          grid.Column(header: "Tax", columnName: "taxrate_tax_gid"),
grid.Column(header: "Sub-Tax", columnName: "taxrate_taxsubtype_flag", style: "action"),
grid.Column(header: "Sub-Tax Name", columnName: "taxrate_taxsubtype_gid"),
//grid.Column(header: "Tax Rate", columnName: "taxrate_rate", style: "colamountlarge"),
grid.Column(header: "Tax Rate", format: @<text> @Html.Raw(String.Format("{0:#,##}", prop.GetINRAmount(@item.taxrate_rate))) </text>, style: "colamountlarge"),
grid.Column(header: "Tax Change Flag", columnName: "taxrate_change_flag", style: "action"),
grid.Column(header: "Period From", columnName: "taxrate_period_from", style: "actionlarge"),
grid.Column(header: "Period To", columnName: "taxrate_period_to", style: "actionlarge"),
grid.Column(header: "Active Status", columnName: "taxrate_active_flag", style: "action"),
                            grid.Column(header: "Action", style: "action",
                            format: @<text>
                                @Html.Raw("<a style='text-decoration:none;' title='View' onclick='ViewType(" + item.taxrate_gid + ")'> <span class='glyphicon glyphicon-eye-open'> </span> </a>")
                                @Html.Raw("<a style='text-decoration:none;' title='Edit' onclick='EditType(" + item.taxrate_gid + ")'> <span class='glyphicon glyphicon-edit' ></span> </a>")
                                @Html.Raw("<a style='text-decoration:none;' title='Delete' onclick='DeleteType(" + item.taxrate_gid + ")'> <span class='glyphicon glyphicon-trash' > </span> </a> ")
                            </text>))))
            </div>
                
        </div>
    }
    <div id="ForPartialView"></div>
    <script type="text/javascript">
        var objDialog;
        $(document).ready(function () {

            $("#txtFilterName").keypress(function (event) {
                return isSplAlphaNumeric(event, this);
            });

            $("#txtFilterName1").keypress(function (event) {
                return isSplAlphaNumeric(event, this);
            });

            $('#grid tr th:nth-child(10)').addClass("nosort");
            $('#grid').dataTable({
                //"scrollX": true,
                "aoColumnDefs": [{
                    "aTargets": ["nosort"],
                    "bSortable": false
                }]
            }).css("width", "99%");

            //$("#grid tr #Color").click(function () {
            //    $('#grid').find('tr').css('background', 'none');
            //    $(this).closest('tr').css('background', '#CEECF5');
            //});
            objDialog = $("[id$='ForPartialView']");
            objDialog.dialog({
                autoOpen: false,
                modal: true,
                width: 350,
                height: 550
            });
        });
        function NewType() {
            objDialog.load('../IEM_TAX_RATE/Create');
            objDialog.dialog({ title: 'Add Tax Rate' });
            objDialog.dialog("open");
            return false;
        }
        function EditType(id) {
            objDialog.load('../IEM_TAX_RATE/Edit?id=' + id + '&viewfor=edit&' + new Date().getTime());
            objDialog.dialog({ title: 'Edit Tax Rate' });
            objDialog.dialog("open");
            return false;
        }
        function ViewType(id) {
            objDialog.load('../IEM_TAX_RATE/Edit?id=' + id + '&viewfor=view&' + new Date().getTime());
            objDialog.dialog({ title: 'View Tax Rate' });
            objDialog.dialog("open");
            return false;
        }
        function DownloadExcel() {
            var UrlDet = "@Url.Action("DownloadExcel", "IEM_TAX")"
            ko.utils.postJson(UrlDet + '?ViewType=3&FileName=TaxRate&' + new Date().getTime());
        }
        function DeleteType(id) {
            objDialog.load('../IEM_TAX_RATE/Edit?id=' + id + '&viewfor=Delete&' + new Date().getTime());
            objDialog.dialog({ title: 'Delete Tax Rate' });
            objDialog.dialog("open");
            return false;
        }
        function refresh() {
            location = '../IEM_TAX_RATE/Index';
        }
        function testDecimals(currentval) {
            var count;
            currentval.match(/\./g) === null ? count = 0 : count = currentval.match(/\./g);
            return count;
        }

        function replaceCommas(yourNumber) {
            var components = yourNumber.toString().split(".");
            if (components.length === 1)
                components[0] = yourNumber;
            components[0] = components[0].replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            if (components.length === 2)
                components[1] = components[1].replace(/\D/g, "");
            return components.join(".");
        }
    </script>
