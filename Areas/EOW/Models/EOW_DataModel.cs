using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.IO;
using System.Web;
using IEM.Common;
using IEM.Areas.EOW.Controllers;
using System.Collections;
using IEM.Areas.MASTERS.Controllers;
using IEM.Helper;
// using System.Transactions;

namespace IEM.Areas.EOW.Models
{
    public class EOW_DataModel : EOW_IRepository
    {
        ErrorLog objErrorLog = new ErrorLog();
        SqlConnection con = new SqlConnection();
        SqlCommand cmd = new SqlCommand();
        SqlDataAdapter da = new SqlDataAdapter();
        SqlDataAdapter da1 = new SqlDataAdapter();
        CmnFunctions objCmnFunctions = new CmnFunctions();
        CommonIUD objCommonIUD = new CommonIUD();
        ForMailController mailsender = new ForMailController();
        dbLib db = new dbLib();
        proLib plib = new proLib();
        int TotalAmount;
        string ecf_no1 = "", PlaceFrom = "", PlaceTo = "";
        public string HoldFileUploadUrl()
        {
            string x = "";
            try
            {
                x = System.Configuration.ConfigurationManager.AppSettings["HoldFileUpload"].ToString();
            }
            catch { x = ""; }
            return (x == null || x.Trim() == "") ? "" : x;
        }
        private void GetConnection()
        {
            if (con.State == ConnectionState.Closed)
            {
                con.ConnectionString = ConfigurationManager.ConnectionStrings["connectionstring"].ToString();
                con.Open();
            }
        }
        public IEnumerable<EOW_Raisermode> GetRaiserMode()
        {
            List<EOW_Raisermode> objparenttax = new List<EOW_Raisermode>();
            try
            {
                objparenttax.Add(new EOW_Raisermode { raisermodeId = "0", raisermodeName = "-- Select --", });
                objparenttax.Add(new EOW_Raisermode { raisermodeId = "S", raisermodeName = "Self", });
                objparenttax.Add(new EOW_Raisermode { raisermodeId = "P", raisermodeName = "Proxy", });
                objparenttax.Add(new EOW_Raisermode { raisermodeId = "C", raisermodeName = "Central Team", });
                objparenttax.Add(new EOW_Raisermode { raisermodeId = "R", raisermodeName = "Central Team", });
                objparenttax.Add(new EOW_Raisermode { raisermodeId = "M", raisermodeName = "Manual", });
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_NatureofExpenses> NatureofExpensesdata()
        {
            List<EOW_NatureofExpenses> objNatureofExpenses = new List<EOW_NatureofExpenses>();
            try
            {
                EOW_NatureofExpenses objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Nature";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_NatureofExpenses();
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["expnature_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_NatureofExpenses> NatureofExpensesdataothersupplier()
        {
            List<EOW_NatureofExpenses> objNatureofExpenses = new List<EOW_NatureofExpenses>();
            try
            {
                EOW_NatureofExpenses objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Othersupplier";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_NatureofExpenses();
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["expnature_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_NatureofExpenses> NatureofExpensesdataother()
        {
            List<EOW_NatureofExpenses> objNatureofExpenses = new List<EOW_NatureofExpenses>();
            try
            {
                EOW_NatureofExpenses objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Other";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_NatureofExpenses();
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["expnature_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_ExpenseCategory> ExpenseCategorydata(int id)
        {
            List<EOW_ExpenseCategory> objExpenseCategory = new List<EOW_ExpenseCategory>();
            try
            {
                EOW_ExpenseCategory objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Category";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_ExpenseCategory();
                    objModel.ExpenseCategoryId = Convert.ToInt32(dt.Rows[i]["expcat_gid"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objExpenseCategory.Add(objModel);
                }
                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpenseCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string ExpenseCategorydataflag(int id)
        {
            try
            {
                string objExpenseCategory = "";
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "istravel";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objExpenseCategory = Convert.ToString(dt.Rows[i]["expnature_istravel"].ToString());
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string travelbranchflag(int id)
        {
            try
            {
                string objExpenseCategory = "B";
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "travelbranchflag";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objExpenseCategory = Convert.ToString(dt.Rows[i]["branch_flag"].ToString());
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Supplierinvoice> SelectGLCode()
        {
            try
            {
                DataTable dt = new DataTable();
                List<EOW_Supplierinvoice> emp = new List<EOW_Supplierinvoice>();
                EOW_Supplierinvoice objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_mst_gl", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "select";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_Supplierinvoice();
                    objModel.expcat_code = row["gl_no"].ToString();
                    objModel.expcat_name = row["gl_name"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }
        }
        public IEnumerable<EOW_Supplierinvoice> SelectGLSearch(string EmployeeName, string EmployeeCode)
        {
            try
            {
                DataTable dt = new DataTable();
                List<EOW_Supplierinvoice> emp = new List<EOW_Supplierinvoice>();
                EOW_Supplierinvoice objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_mst_gl", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@expname_name", SqlDbType.VarChar).Value = EmployeeName;
                cmd.Parameters.Add("@expcode_code", SqlDbType.VarChar).Value = EmployeeCode;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "GLsearch";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_Supplierinvoice();
                    objModel.expcat_code = row["gl_no"].ToString();
                    objModel.expcat_name = row["gl_name"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                con.Close();
            }
        }
        public string Travelclassdataflag(int id)
        {
            try
            {
                string objExpenseCategory = "N";
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "istravelclass";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objExpenseCategory = Convert.ToString(dt.Rows[i]["transport_flag"].ToString());
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_SubCategory> SubCategorydata(int id)
        {
            List<EOW_SubCategory> objSubCategory = new List<EOW_SubCategory>();
            try
            {
                EOW_SubCategory objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SubCategory";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_SubCategory();
                    objModel.SubCategoryId = Convert.ToInt32(dt.Rows[i]["expsubcat_gid"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.GLCode = Convert.ToString(dt.Rows[i]["expcat_gl_no"].ToString());
                    objSubCategory.Add(objModel);
                }
                return objSubCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objSubCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_EmployeeeExpense> SelectEmployeeeBasic(string empcode)
        {
            List<EOW_EmployeeeExpense> objNatureofExpenses = new List<EOW_EmployeeeExpense>();
            try
            {
                EOW_EmployeeeExpense objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empcode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SelectEmployeee";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.Exp_FC = Convert.ToString(dt.Rows[0]["employee_fc_code"].ToString());
                    objModel.Exp_CC = Convert.ToString(dt.Rows[0]["employee_cc_code"].ToString());
                    objModel.Exp_ProductCode = Convert.ToString(dt.Rows[0]["employee_product_code"].ToString());
                    objModel.Exp_OUCode = Convert.ToString(dt.Rows[0]["employee_ou_code"].ToString());
                    objModel.Exp_FCCC = Convert.ToString(dt.Rows[0]["fccc_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                else
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.Exp_FC = "";
                    objModel.Exp_CC = "";
                    objModel.Exp_ProductCode = "";
                    objModel.Exp_OUCode = "";
                    objModel.Exp_FCCC = "";
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }


        public IEnumerable<EOW_EmployeeeExpense> SelectEmployeeeheader(string empcode)
        {
            List<EOW_EmployeeeExpense> objNatureofExpenses = new List<EOW_EmployeeeExpense>();
            try
            {
                EOW_EmployeeeExpense objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empcode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Employeeheader";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.Grade = Convert.ToString(dt.Rows[0]["employee_grade_code"].ToString());
                    objModel.Raiser_Code = Convert.ToString(dt.Rows[0]["employee_code"].ToString());
                    objModel.Raiser_Name = Convert.ToString(dt.Rows[0]["employee_name"].ToString());
                    objModel.Exp_FCCC = Convert.ToString(dt.Rows[0]["fccc_name"].ToString());

                    objModel.Exp_FC = Convert.ToString(dt.Rows[0]["employee_fc_code"].ToString());
                    objModel.Exp_CC = Convert.ToString(dt.Rows[0]["employee_cc_code"].ToString());
                    objModel.Exp_ProductCode = Convert.ToString(dt.Rows[0]["employee_product_code"].ToString());
                    objModel.Exp_OUCode = Convert.ToString(dt.Rows[0]["employee_ou_code"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                else
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.Exp_FC = "";
                    objModel.Exp_CC = "";
                    objModel.Exp_ProductCode = "";
                    objModel.Exp_OUCode = "";
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_RefNo> EmployeeePaymentRefNodatagri(string empgid, string type)
        {
            List<EOW_RefNo> objExpenseCategory = new List<EOW_RefNo>();
            try
            {
                EOW_RefNo objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                if (type == "E")
                {
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "RefNodata";
                }
                else if (type == "P")
                {
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "RefNodatapetty";
                }
                else
                {
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "RefNodatasupplier";
                }

                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_RefNo();
                        objModel.RefNoId = Convert.ToString(dt.Rows[i]["ecf_gid"].ToString());
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                        objModel.RefAmount = Convert.ToString(dt.Rows[i]["ecfarf_amount"].ToString());
                        objModel.RefException = Convert.ToString(dt.Rows[i]["ecfarf_exception"].ToString());
                        objModel.RefLiquidationdate = Convert.ToString(dt.Rows[i]["ecfarf_liq_date"].ToString());
                        objModel.RefDescription = Convert.ToString(dt.Rows[i]["ecfarf_desc"].ToString());
                        objExpenseCategory.Add(objModel);
                    }
                }
                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpenseCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string EmployeeePaymentppxcheck(string supgid, string invoiceamt, string ecf_gid, string invoice_gid)
        {
            string msg = "";
            try
            {
                GetConnection();
                DataSet dt = new DataSet();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecf_gid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoice_gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKPPXAV";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Tables[0].Rows.Count > 0)
                {
                    string alreadyaddedppx = "";
                    string ppxamt = Convert.ToString(dt.Tables[0].Rows[0]["ecfarf_exception"].ToString());
                    if (dt.Tables[0].Rows.Count > 0)
                    {
                        alreadyaddedppx = Convert.ToString(dt.Tables[1].Rows[0]["ecfcreditline_amount"].ToString());
                    }
                    if (ppxamt != "")
                    {
                        decimal ppxamtval = Convert.ToDecimal(ppxamt.ToString());
                        decimal invoiceamtppx = Convert.ToDecimal(invoiceamt.ToString());
                        if (alreadyaddedppx != "")
                        {
                            decimal addedppxval = Convert.ToDecimal(alreadyaddedppx.ToString());
                            if (invoiceamtppx < addedppxval)
                            {
                                msg = "Yes";
                            }
                            else
                            {
                                msg = "No";
                            }
                        }
                        else
                        {
                            if (ppxamtval > 0)
                            {
                                msg = "Yes";
                            }
                        }
                    }
                    else
                    {
                        msg = "No";
                    }
                }
                else
                {
                    msg = "No";
                }
                return msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return msg;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string EmployeeePaymentppxcheckct(string supgid, string invoiceamt, DataTable dtpayment, string invoice_gid)
        {
            string msg = "";
            try
            {
                GetConnection();
                DataSet dt = new DataSet();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKPPXAV";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Tables[0].Rows.Count > 0)
                {
                    string alreadyaddedppx = "";
                    string ppxamt = Convert.ToString(dt.Tables[0].Rows[0]["ecfarf_exception"].ToString());
                    if (dtpayment.Rows.Count > 0)
                    {
                        DataRow[] result = dtpayment.Select("invoice_gid = '" + invoice_gid + "' and ecfcreditline_pay_mode = 'PPX'");
                        int cnt = result.Length;
                        if (cnt > 0)
                        {
                            for (int ij = 0; ij < result.Length; ij++)
                            {
                                if (alreadyaddedppx == "")
                                {
                                    alreadyaddedppx = result[ij]["ecfcreditline_amount"].ToString();
                                }
                                else
                                {
                                    decimal tolamtfor = Convert.ToDecimal(result[ij]["ecfcreditline_amount"].ToString());
                                    decimal tolamt = Convert.ToDecimal(alreadyaddedppx);
                                    decimal overalltol = tolamtfor + tolamt;
                                    alreadyaddedppx = overalltol.ToString();
                                }

                            }
                        }
                    }
                    if (ppxamt != "")
                    {
                        decimal ppxamtval = Convert.ToDecimal(ppxamt.ToString());
                        decimal invoiceamtppx = Convert.ToDecimal(invoiceamt.ToString());
                        if (alreadyaddedppx != "")
                        {
                            decimal addedppxval = Convert.ToDecimal(alreadyaddedppx.ToString());
                            if (invoiceamtppx < addedppxval)
                            {
                                msg = "Yes";
                            }
                            else
                            {
                                msg = "No";
                            }
                        }
                        else
                        {
                            if (ppxamtval > 0)
                            {
                                msg = "Yes";
                            }
                        }
                    }
                    else
                    {
                        msg = "No";
                    }
                }
                else
                {
                    msg = "No";
                }
                return msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return msg;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string EmployeeePaymentRECcheck(string supgid, string invoiceamt, string ecf_gid, string invoice_gid)
        {
            string msg = "";
            try
            {
                GetConnection();
                DataSet dt = new DataSet();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecf_gid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoice_gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKREC";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Tables.Count > 0)  // ramya added on 16 Nov 22
                {
                    if (dt.Tables[0].Rows.Count > 0) // ramya added on 16 Nov 22
                    {
                        string alreadyaddedrec = "";
                        string recamt = Convert.ToString(dt.Tables[0].Rows[0]["Recovery_exception"].ToString());
                        if (dt.Tables[0].Rows.Count > 0)
                        {
                            alreadyaddedrec = Convert.ToString(dt.Tables[1].Rows[0]["ecfcreditline_amount"].ToString());
                        }
                        if (recamt != "")
                        {
                            decimal recamtval = Convert.ToDecimal(recamt.ToString());
                            decimal invoiceamtrec = Convert.ToDecimal(invoiceamt.ToString());
                            if (alreadyaddedrec != "")
                            {
                                decimal addedrecval = Convert.ToDecimal(alreadyaddedrec.ToString());
                                if (invoiceamtrec < addedrecval)
                                {
                                    msg = "Yes";
                                }
                                else
                                {
                                    msg = "No";
                                }
                            }
                            else
                            {
                                if (recamtval > 0)
                                {
                                    msg = "Yes";
                                }
                            }
                        }
                        else
                        {
                            msg = "No";
                        }
                    }
                }
                else
                {
                    msg = "No";
                }
                return msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return msg;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }  // GSTPhase3_1


        public string EmployeeePaymentCRNcheck(string supgid, string invoiceamt, string ecf_gid, string invoice_gid)
        {
            string msg = "";
            try
            {
                GetConnection();
                DataSet dt = new DataSet();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecf_gid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoice_gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKCRN";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Tables.Count > 0)  // ramya added on 16 Nov 22
                {
                    if (dt.Tables[0].Rows.Count > 0) // ramya added on 16 Nov 22
                    {
                        string alreadyaddedcrn = "";
                        string crncamt = Convert.ToString(dt.Tables[0].Rows[0]["creditnote_exception"].ToString());
                        if (dt.Tables[0].Rows.Count > 0)
                        {
                            alreadyaddedcrn = Convert.ToString(dt.Tables[1].Rows[0]["ecfcreditline_amount"].ToString());
                        }
                        if (crncamt != "")
                        {
                            decimal crnamtval = Convert.ToDecimal(crncamt.ToString());
                            decimal invoiceamtcrn = Convert.ToDecimal(invoiceamt.ToString());
                            if (alreadyaddedcrn != "")
                            {
                                decimal addedcrnval = Convert.ToDecimal(alreadyaddedcrn.ToString());
                                if (invoiceamtcrn < addedcrnval)
                                {
                                    msg = "Yes";
                                }
                                else
                                {
                                    msg = "No";
                                }
                            }
                            else
                            {
                                if (crnamtval > 0)
                                {
                                    msg = "Yes";
                                }
                            }
                        }
                        else
                        {
                            msg = "No";
                        }
                    }
                }
                else
                {
                    msg = "No";
                }
                return msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return msg;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }  // GSTPhase3_1

        public IEnumerable<EOW_RefNo> EmployeeePaymentRefNodatacrn(string supgid, string type)
        {
            List<EOW_RefNo> objecfcrn = new List<EOW_RefNo>();
            try
            {
                EOW_RefNo objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "RefNodatasuppliercrn";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_RefNo();
                        objModel.RefNoId = Convert.ToString(dt.Rows[i]["ecf_gid"].ToString());
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                        objModel.RefAmount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                        objModel.RefException = Convert.ToString(dt.Rows[i]["Raiser"].ToString());
                        objModel.RefLiquidationdate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                        objModel.RefDescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                        objecfcrn.Add(objModel);
                    }
                }
                return objecfcrn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objecfcrn;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> EmployeeePaymentcrn(string supgid, string type)
        {
            List<EOW_RefNo> objExpensemain = new List<EOW_RefNo>();
            try
            {
                EOW_RefNo objExpensemainfrst;
                invoicedmodela objModelfrst;
                ecfdmodels objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "RefNodatasuppliercrn";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objExpensemainfrst = new EOW_RefNo();
                        objModel = new ecfdmodels();
                        objModel.RefNoIde = Convert.ToString(dt.Rows[i]["ecf_gid"].ToString());
                        objModel.RefNoNamee = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                        objModel.RefAmounte = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                        objModel.RefExceptione = Convert.ToString(dt.Rows[i]["Raiser"].ToString());
                        objModel.RefLiquidationdatee = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                        objModel.RefDescriptione = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());

                        GetConnection();
                        DataTable dtsub = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = dt.Rows[i]["ecf_gid"].ToString();
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "RefNodatasuppliercrninvoice";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtsub);
                        List<invoicedmodela> objExpensedetail = new List<invoicedmodela>();
                        for (int ij = 0; ij < dtsub.Rows.Count; ij++)
                        {
                            objModelfrst = new invoicedmodela();
                            objModelfrst.RefNoIde = Convert.ToString(dt.Rows[i]["ecf_gid"].ToString());
                            objModelfrst.invoicegid = Convert.ToString(dtsub.Rows[ij]["invoice_gid"].ToString());
                            objModelfrst.invoicedate = Convert.ToString(dtsub.Rows[ij]["invoice_date"].ToString());
                            objModelfrst.invoiceno = Convert.ToString(dtsub.Rows[ij]["invoice_no"].ToString());
                            objModelfrst.invoiceamt = Convert.ToString(dtsub.Rows[ij]["invoice_amount"].ToString());
                            objModelfrst.invoicedesc = Convert.ToString(dtsub.Rows[ij]["invoice_desc"].ToString());
                            objModelfrst.invoicemonth = Convert.ToString(dtsub.Rows[ij]["invoice_service_month"].ToString());
                            objExpensedetail.Add(objModelfrst);
                        }
                        objExpensemainfrst.ecfdetails = objModel;
                        objExpensemainfrst.invoiceDetails = objExpensedetail;
                        objExpensemain.Add(objExpensemainfrst);
                    }
                }
                return objExpensemain;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpensemain;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string CheckExpense(EOW_TravelClaim EmployeeeExpense)
        {
            string Emp_Msg = "";
            string Emp_Msgretn = "";
            string status = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                string HSNsplit = EmployeeeExpense.Hsncode.ToString();
                string[] HSNssp = HSNsplit.Split('-');
                status = GetStatusexcel(HSNssp[0].ToString(), "", "", "HSNCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid HSN Code";
                    return Emp_Msgretn;
                }
                if (status != "notexists")
                {
                    Emp_Msgretn = "Success";
                }
                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_RefNo> EmployeeePaymentRefNodatasus(string supgid, string type)
        {
            List<EOW_RefNo> objecfcrn = new List<EOW_RefNo>();
            try
            {
                EOW_RefNo objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "RefNodatasuppliercrn";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_RefNo();
                        objModel.RefNoId = Convert.ToString(dt.Rows[i]["ecf_gid"].ToString());
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                        objModel.RefAmount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                        objModel.RefException = Convert.ToString(dt.Rows[i]["Raiser"].ToString());
                        objModel.RefLiquidationdate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                        objModel.RefDescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                        objecfcrn.Add(objModel);
                    }
                }
                return objecfcrn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objecfcrn;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> EmployeeePaymenteft(string supgid, string type)
        {
            List<EOW_RefNo> objecfcrn = new List<EOW_RefNo>();
            try
            {
                EOW_RefNo objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = "S";
                cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = supgid;

                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetECFACCDETAILS";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_RefNo();
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["payment_beneficiaryname"].ToString());
                        objModel.RefDescription = Convert.ToString(dt.Rows[i]["payment_accountno"].ToString());
                        objModel.RefLiquidationdate = Convert.ToString(dt.Rows[i]["payment_ifsccode"].ToString());
                        objModel.RefAmount = Convert.ToString(dt.Rows[i]["payment_bankbranch"].ToString());
                        objModel.RefException = "0";
                        objecfcrn.Add(objModel);
                    }
                }
                return objecfcrn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objecfcrn;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> EmployeeePaymentchq(string supgid, string type)
        {
            List<EOW_RefNo> objecfcrn = new List<EOW_RefNo>();
            try
            {
                EOW_RefNo objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = "S";
                cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = supgid;

                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetChqDETAILS";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_RefNo();
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["payment_beneficiaryname"].ToString());
                        objModel.RefDescription = Convert.ToString(dt.Rows[i]["payment_accountno"].ToString());
                        objModel.RefLiquidationdate = Convert.ToString(dt.Rows[i]["payment_ifsccode"].ToString());
                        objModel.RefAmount = Convert.ToString(dt.Rows[i]["payment_bankbranch"].ToString());
                        objModel.RefException = "0";
                        objecfcrn.Add(objModel);
                    }
                }
                return objecfcrn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objecfcrn;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> EmployeeePaymentRefNodataeft(string supgid, string type)
        {
            List<EOW_RefNo> objecfcrn = new List<EOW_RefNo>();
            try
            {
                EOW_RefNo objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = "S";
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GETSUSPAYMODE";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_RefNo();
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["gl_no"].ToString());
                        objModel.RefDescription = Convert.ToString(dt.Rows[i]["gl_name"].ToString());
                        objModel.RefException = "0";
                        objecfcrn.Add(objModel);
                    }
                }
                return objecfcrn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objecfcrn;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string InsertEmployeeeExpense(EOW_EmployeeeExpense EmployeeeExpense, string ecfgid, string invoicegid)
        {
            string tplacefrm = "";
            string tplaceto = "";
            string tmode = "";
            string tclass = "";
            string trate = "";
            string tdiatance = "";
            string NatureofExpenses = Convert.ToString(ConfigurationManager.AppSettings["Ecflocalnature"].ToString());
            string Emp_Msg = "";
            string Emp_Msgretn = "";
            string status = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.Exp_FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.Exp_CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.Exp_ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.Exp_OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getglno";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }

                if (EmployeeeExpense.NatureofExpenseslocal == NatureofExpenses)
                {
                    string[,] codes = new string[,]
	               {
        {"ecfdebitline_ecf_gid",ecfgid },
	    {"ecfdebitline_invoice_gid", invoicegid},
        {"ecfdebitline_expnature_gid",EmployeeeExpense.NatureofExpensesName },
	    {"ecfdebitline_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
        {"ecfdebitline_expsubcat_gid",EmployeeeExpense.SubCategoryName },
	    {"ecfdebitline_gl_no", Emp_Msg},
        {"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom ).ToString()},
	    {"ecfdebitline_period_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString()},
        {"ecfdebitline_fc_code",EmployeeeExpense.Exp_FC },
	    {"ecfdebitline_cc_code", EmployeeeExpense.Exp_CC},
        {"ecfdebitline_product_code", Productsp[0].ToString()},
        {"ecfdebitline_ou_code",oussp[0].ToString() },
	    {"ecfdebitline_amount", EmployeeeExpense.Exp_Amount}       
                  };
                    string tname = "iem_trn_tecfdebitline";

                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                }
                else
                {
                    string[,] codes = new string[,]
	               {
        {"ecfdebitline_ecf_gid",ecfgid },
	    {"ecfdebitline_invoice_gid", invoicegid},
        {"ecfdebitline_expnature_gid",EmployeeeExpense.NatureofExpensesName },
	    {"ecfdebitline_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
        {"ecfdebitline_expsubcat_gid",EmployeeeExpense.SubCategoryName },
	    {"ecfdebitline_gl_no", Emp_Msg},
        {"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom ).ToString()},
	    {"ecfdebitline_period_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString()},
        {"ecfdebitline_fc_code",EmployeeeExpense.Exp_FC },
	    {"ecfdebitline_cc_code", EmployeeeExpense.Exp_CC},
        {"ecfdebitline_product_code", Productsp[0].ToString()},
        {"ecfdebitline_ou_code",oussp[0].ToString() },
	    {"ecfdebitline_amount", EmployeeeExpense.Exp_Amount}       
                  };
                    string tname = "iem_trn_tecfdebitline";

                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                }

                Emp_Msgretn = "Success";
                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertEmployeeeExpensenew(EOW_EmployeeeExpense EmployeeeExpense, string ecfgid, string invoicegid, string empgid)
        {
            string Emp_MsgtPlaceFrom = "";
            string Emp_MsgtPlaceTo = "";
            string output = "";
            string Emp_Msg = "0";
            string Emp_Msgbrnch = "0";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            string Emp_Msgrate = "0";
            string Emp_Msgdis = "0";
            string Emp_Msgtmode = "";
            string Emp_Msgtclass = "";
            string Emp_MsgtTraveltypes = "";
            string NatureofExpenses = Convert.ToString(ConfigurationManager.AppSettings["Ecflocalnature"].ToString());
            try
            {
                status = GetStatusexcel(EmployeeeExpense.Exp_FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.Exp_CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.Exp_ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.Exp_OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                string FCcode;
                GetConnection();
                DataTable dtOUcode = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@BranchCode", SqlDbType.VarChar).Value = oussp[0].ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getbussinesssegment";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtOUcode);
                if (dtOUcode.Rows.Count > 0)
                {
                    FCcode = dtOUcode.Rows[0]["branch_businesssegement"].ToString();
                }
                else
                {
                    FCcode = EmployeeeExpense.Exp_FC;
                }
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.Rate != null)
                {
                    Emp_Msgrate = EmployeeeExpense.Rate;
                }
                else
                {
                    Emp_Msgrate = "0";
                }
                if (EmployeeeExpense.Distance != null)
                {
                    Emp_Msgdis = EmployeeeExpense.Distance;
                }
                else
                {
                    Emp_Msgdis = "0";
                }
                if (EmployeeeExpense.TravelModeName != "0" && EmployeeeExpense.TravelModeName != null)
                {
                    Emp_Msgtmode = EmployeeeExpense.TravelModeName;
                }
                else
                {
                    Emp_Msgtmode = "";
                }
                if (EmployeeeExpense.TravelClassName != "0" && EmployeeeExpense.TravelClassName != null)
                {
                    Emp_Msgtclass = EmployeeeExpense.TravelClassName;
                }
                else
                {
                    Emp_Msgtclass = "";
                }

                if (EmployeeeExpense.PlaceFrom != "--Select--" && EmployeeeExpense.PlaceFrom != null)
                {
                    Emp_MsgtPlaceFrom = EmployeeeExpense.PlaceFrom;
                }
                else
                {
                    Emp_MsgtPlaceFrom = "";
                }
                if (EmployeeeExpense.PlaceTo != "--Select--" && EmployeeeExpense.PlaceTo != null)
                {
                    Emp_MsgtPlaceTo = EmployeeeExpense.PlaceTo;
                }
                else
                {
                    Emp_MsgtPlaceTo = "";
                }

                if (EmployeeeExpense.NatureofExpenseslocal == NatureofExpenses)
                {
                    Emp_MsgtTraveltypes = "T";
                    status = GetStatusexcelduplicate(
                                                EmployeeeExpense.NatureofExpensesName,
                                                EmployeeeExpense.ExpenseCategoryName,
                                                EmployeeeExpense.SubCategoryName,
                                                empgid,
                                                EmployeeeExpense.Exp_ClaimPeriodFrom,
                                                EmployeeeExpense.Exp_ClaimPeriodTo,
                                                EmployeeeExpense.Exp_Amount,
                                                "", "", "", "", "localconduplicatet"
                                                );
                    if (status == "Exists")
                    {
                        output = "Duplicatedate";
                    }
                    else
                    {
                        string statusnew = GetStatusexcelduplicate(
                                                 empgid,
                                                 Emp_Msgtmode,
                                                 EmployeeeExpense.SubCategoryName,
                                                 empgid,
                                                 EmployeeeExpense.Exp_ClaimPeriodFrom,
                                                 EmployeeeExpense.Exp_ClaimPeriodFrom,
                                                 EmployeeeExpense.PlaceFrom,
                                                 EmployeeeExpense.PlaceTo,
                                                  EmployeeeExpense.Exp_Amount,
                                                  "", "", "localemplclam"
                                                 );
                        if (statusnew == "Exists")
                        {
                            output = "Duplicatedate1";
                        }
                        else
                        {
                            string statusnewd = GetStatusexcelduplicate(
                                              "",
                                              "",
                                              "",
                                               empgid,
                                               EmployeeeExpense.Exp_ClaimPeriodFrom,
                                               EmployeeeExpense.Exp_ClaimPeriodFrom,
                                              "",
                                              "", "", "", "", "localdateonlygid"
                                              );
                            if (statusnewd == "Exists")
                            {
                                output = "Duplicatedate1";
                            }
                            else
                            {
                                string statusnewdl = GetStatusexcelduplicate(
                                                 "",
                                                 "",
                                                 "",
                                                  empgid,
                                                  EmployeeeExpense.Exp_ClaimPeriodFrom,
                                                  EmployeeeExpense.Exp_ClaimPeriodFrom,
                                                 "",
                                                 "", "", "", "", "localemplclamemp"
                                                 );
                                if (statusnewdl == "Exists")
                                {
                                    output = "Duplicatedate1";
                                }
                                else
                                {
                                    output = "valid";
                                }
                            }
                        }
                    }
                }
                else
                {
                    Emp_MsgtTraveltypes = "O";
                    output = "valid";
                }
                if (output == "valid")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpCatGL";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                    }
                    //code added by sabari on 20170129
                    else
                    {
                        Emp_Msgretn = "Invalid GL Code";
                        return Emp_Msgretn;
                    }
                    //  GetConnection();
                    //  DataTable dtbranch = new DataTable();
                    //  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    //  cmd.CommandType = CommandType.StoredProcedure;
                    //  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                    //  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpBranch";
                    //  da = new SqlDataAdapter(cmd);
                    //  da.Fill(dtbranch);
                    //  if (dtbranch.Rows.Count > 0)
                    //  {
                    //      Emp_Msgbrnch = Convert.ToString(dtbranch.Rows[0]["employee_branch_gid"].ToString());
                    //  }

                    //  string[,] codes = new string[,]
                    // {
                    //  {"ecftravel_ecf_gid",ecfgid },
                    //  {"ecftravel_invoice_gid", invoicegid},
                    //  {"ecftravel_expnature_gid",EmployeeeExpense.NatureofExpensesName },
                    //  {"ecftravel_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
                    //  {"ecftravel_expsubcat_gid",EmployeeeExpense.SubCategoryName },
                    //  {"ecftravel_employee_gid", empgid},
                    //  {"ecftravel_branch_gid", Emp_Msgbrnch},

                    //  {"ecftravel_type", Emp_MsgtTraveltypes},
                    //  {"ecftravel_transport_gid", Emp_Msgtmode},
                    //  {"ecftravel_transportclass_gid", Emp_Msgtclass},
                    //  {"ecftravel_city_from", Emp_MsgtPlaceFrom},
                    //  {"ecftravel_city_to",Emp_MsgtPlaceTo},
                    //  {"ecftravel_gl_no", Emp_Msg},
                    //  {"ecftravel_desc", Emp_Msgdesc},

                    //  {"ecftravel_date_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom ).ToString()},
                    //  {"ecftravel_date_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString()},
                    //  {"ecftravel_fc",FCcode},
                    //  {"ecftravel_cc", EmployeeeExpense.Exp_CC},
                    //  {"ecftravel_product_code", Productsp[0].ToString()},
                    //  {"ecftravel_ou_code",oussp[0].ToString() },
                    //  {"ecftravel_distance", Emp_Msgdis},
                    //  {"ecftravel_rate",Emp_Msgrate},
                    //  {"ecftravel_amount", EmployeeeExpense.Exp_Amount}       
                    //};
                    //  string tname = "iem_trn_tecftravel";

                    //  string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                    //  Emp_Msg = insertcommend.ToString();
                    //  Emp_Msgretn = "Success";
                    GetConnection();
                    dt = new DataTable();
                    cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILS", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = invoicegid;//Convert.ToInt32(EmployeeeExpense.InvGid);
                    cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                    cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                    cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = Emp_Msgtmode;
                    cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = Emp_Msgtclass;
                    cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                    cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                    cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                    cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom).ToString();
                    cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString();
                    cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.Exp_CC;
                    cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = Emp_Msgdis;
                    cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Emp_Msgrate;
                    cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Exp_Amount;
                    cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = FCcode;
                    cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.Hsnid;
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msgretn = (dt.Rows[0]["Message"].ToString());

                        //selva 04-01-2021
                        GetConnection();
                        DataTable dtSplit = new DataTable();
                        cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = Convert.ToInt32(invoicegid);
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtSplit);
                    }
                    else
                    {
                        Emp_Msgretn = "Failed";
                    }
                    return Emp_Msgretn;
                }
                else if (output == "Duplicatedate1")
                {
                    Emp_Msgretn = "You have already claimed conveyance for the ECF Claim Date ";
                    return Emp_Msgretn;
                }
                else
                {
                    Emp_Msgretn = "Duplicate Data Alreay in DataBase";
                    return Emp_Msgretn;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string UpdateEmployeeeExpense(EOW_EmployeeeExpense EmployeeeExpense, string ecfgid, string invoicegid, string expactiverowid)
        {
            string Emp_Msg = "";
            string Emp_Msgretn = "";
            string status = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.Exp_FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.Exp_CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.Exp_ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.Exp_OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getglno";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }
                string[,] codes = new string[,]
	               {       
        {"ecfdebitline_expnature_gid",EmployeeeExpense.NatureofExpensesName },
	    {"ecfdebitline_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
        {"ecfdebitline_expsubcat_gid",EmployeeeExpense.SubCategoryName },
	    {"ecfdebitline_gl_no", Emp_Msg},
        {"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom ).ToString()},
	    {"ecfdebitline_period_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString()},
        {"ecfdebitline_fc_code",EmployeeeExpense.Exp_FC },
	    {"ecfdebitline_cc_code", EmployeeeExpense.Exp_CC},
        {"ecfdebitline_product_code", Productsp[0].ToString()},
        {"ecfdebitline_ou_code",oussp[0].ToString() },
	    {"ecfdebitline_amount", EmployeeeExpense.Exp_Amount}       
                  };

                string[,] whcos = new string[,]
	               {
        {"ecfdebitline_ecf_gid",ecfgid },
	    {"ecfdebitline_invoice_gid", invoicegid},
        {"ecfdebitline_gid", expactiverowid}
                  };

                string tname = "iem_trn_tecfdebitline";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);
                Emp_Msgretn = "Success";
                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string UpdateEmployeeeExpensenew(EOW_EmployeeeExpense EmployeeeExpense, string ecfgid, string invoicegid, string expactiverowid, string empgid)
        {
            string Emp_MsgtPlaceFrom = "";
            string Emp_MsgtPlaceTo = "";
            string Emp_Msg = "";
            string output = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            string Emp_Msgrate = "0";
            string Emp_Msgdis = "0";
            string Emp_Msgtmode = "";
            string Emp_Msgtclass = "";
            string Emp_MsgtTraveltypes = "";
            string NatureofExpenses = Convert.ToString(ConfigurationManager.AppSettings["Ecflocalnature"].ToString());
            try
            {
                status = GetStatusexcel(EmployeeeExpense.Exp_FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.Exp_CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.Exp_ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.Exp_OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.Rate != null)
                {
                    Emp_Msgrate = EmployeeeExpense.Rate;
                }
                else
                {
                    Emp_Msgrate = "0";
                }
                if (EmployeeeExpense.Distance != null)
                {
                    Emp_Msgdis = EmployeeeExpense.Distance;
                }
                else
                {
                    Emp_Msgdis = "0";
                }
                if (EmployeeeExpense.TravelModeName != "0" && EmployeeeExpense.TravelModeName != null)
                {
                    Emp_Msgtmode = EmployeeeExpense.TravelModeName;
                }
                else
                {
                    Emp_Msgtmode = "";
                }
                if (EmployeeeExpense.TravelClassName != "0" && EmployeeeExpense.TravelClassName != null)
                {
                    Emp_Msgtclass = EmployeeeExpense.TravelClassName;
                }
                else
                {
                    Emp_Msgtclass = "";
                }
                if (EmployeeeExpense.PlaceFrom != "--Select--" && EmployeeeExpense.PlaceFrom != null)
                {
                    Emp_MsgtPlaceFrom = EmployeeeExpense.PlaceFrom;
                }
                else
                {
                    Emp_MsgtPlaceFrom = "";
                }
                if (EmployeeeExpense.PlaceTo != "--Select--" && EmployeeeExpense.PlaceTo != null)
                {
                    Emp_MsgtPlaceTo = EmployeeeExpense.PlaceTo;
                }
                else
                {
                    Emp_MsgtPlaceTo = "";
                }
                if (EmployeeeExpense.NatureofExpenseslocal == NatureofExpenses)
                {
                    Emp_MsgtTraveltypes = "T";
                    status = GetStatusexcelduplicate(
                                                              EmployeeeExpense.NatureofExpensesName,
                                                              EmployeeeExpense.ExpenseCategoryName,
                                                              EmployeeeExpense.SubCategoryName,
                                                              empgid,
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom).ToString(),
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString(),
                                                              EmployeeeExpense.Exp_Amount,
                                                              expactiverowid.ToString(), "", "", "", "localconduplicatete"
                                                              );
                    if (status == "Exists")
                    {
                        output = "Duplicatedate";
                    }
                    else
                    {
                        string statusnew = GetStatusexcelduplicate(
                                                 empgid,
                                                 Emp_Msgtmode,
                                                 EmployeeeExpense.SubCategoryName,
                                                 empgid,
                                                 EmployeeeExpense.Exp_ClaimPeriodFrom,
                                                 EmployeeeExpense.Exp_ClaimPeriodFrom,
                                                 EmployeeeExpense.PlaceFrom,
                                                 EmployeeeExpense.PlaceTo,
                                                  EmployeeeExpense.Exp_Amount,
                                                  "", "", "localemplclam"
                                                 );
                        if (statusnew == "Exists")
                        {
                            output = "Duplicatedate1";
                        }
                        else
                        {
                            output = "valid";
                        }
                    }
                }
                else
                {
                    Emp_MsgtTraveltypes = "O";
                    output = "valid";
                }
                if (output == "valid")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpCatGL";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                    }
                    else
                    {
                        Emp_Msgretn = "Invalid GL Code";
                        return Emp_Msgretn;
                    }
                    //            string[,] codes = new string[,]
                    //           {

                    //{"ecftravel_expnature_gid",EmployeeeExpense.NatureofExpensesName },
                    //{"ecftravel_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
                    //{"ecftravel_expsubcat_gid",EmployeeeExpense.SubCategoryName },
                    //{"ecftravel_type", Emp_MsgtTraveltypes},
                    //{"ecftravel_transport_gid", Emp_Msgtmode},
                    //{"ecftravel_transportclass_gid", Emp_Msgtclass},
                    //{"ecftravel_city_from", Emp_MsgtPlaceFrom},
                    //{"ecftravel_city_to", Emp_MsgtPlaceTo},
                    //{"ecftravel_gl_no", Emp_Msg},
                    //{"ecftravel_desc", Emp_Msgdesc},

                    //{"ecftravel_date_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom ).ToString()},
                    //{"ecftravel_date_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString()},
                    //{"ecftravel_fc",EmployeeeExpense.Exp_FC },
                    //{"ecftravel_cc", EmployeeeExpense.Exp_CC},
                    //{"ecftravel_product_code", Productsp[0].ToString()},
                    //{"ecftravel_ou_code",oussp[0].ToString() },
                    //{"ecftravel_distance", Emp_Msgdis},
                    //{"ecftravel_rate",Emp_Msgrate },
                    //{"ecftravel_amount", EmployeeeExpense.Exp_Amount}       
                    //          };
                    //            string[,] whcosup = new string[,]
                    //           {
                    //{"ecftravel_ecf_gid",ecfgid },
                    //{"ecftravel_invoice_gid", invoicegid},
                    // {"ecftravel_gid",expactiverowid }
                    //          };
                    //            string tname = "iem_trn_tecftravel";

                    //            string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                    //            Emp_Msg = insertcommend.ToString();
                    //            Emp_Msgretn = "Success";
                    GetConnection();
                    dt = new DataTable();
                    cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILS", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = invoicegid;//Convert.ToInt32(EmployeeeExpense.InvGid);
                    cmd.Parameters.Add("@Ecftravel_gid", SqlDbType.Int).Value = expactiverowid;
                    cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                    cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                    cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = Emp_Msgtmode;
                    cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = Emp_Msgtclass;
                    cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                    cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                    cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                    cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodFrom).ToString();
                    cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Exp_ClaimPeriodTo).ToString();
                    cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.Exp_CC;
                    cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = Emp_Msgdis;
                    cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Emp_Msgrate;
                    cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Exp_Amount;
                    cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = EmployeeeExpense.Exp_FC;
                    cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.Hsnid;
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msgretn = (dt.Rows[0]["Message"].ToString());

                        //selva 19-02-2021
                        GetConnection();
                        DataTable dtSplit = new DataTable();
                        cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = Convert.ToInt32(invoicegid);
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtSplit);
                    }
                    else
                    {
                        Emp_Msgretn = "Failed";

                    }
                    return Emp_Msgretn;
                }
                else if (output == "Duplicatedate1")
                {
                    Emp_Msgretn = "You have already claimed conveyance for the ECF Claim Date ";
                    return Emp_Msgretn;
                }
                else
                {
                    Emp_Msgretn = "Duplicate Data Alreay in DataBase";
                    return Emp_Msgretn;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return Emp_Msgretn;

        }
        public string InsertEmployeeeBasicupdate(EOW_EmployeeeExpense EmployeeeExpense, string EmployeeeGid, string proxy, string id)
        {
            string Emp_Msg = "";
            string eMP_Gid = ""; ;
            string eMP_modeGid = "";
            string trvelperson = "";
            string remarks = "";
            try
            {
                if (EmployeeeExpense.ecfremark != null)
                {
                    remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfremark);
                }
                eMP_Gid = EmployeeeGid.ToString();
                if (EmployeeeExpense.raisermodeId == "P")
                {
                    if (HttpContext.Current.Session["loginraisemode"] != null)
                    {
                        eMP_modeGid = Convert.ToString(HttpContext.Current.Session["Proxyemployee_gid"]);
                    }
                    else
                    {
                        eMP_modeGid = eMP_Gid.ToString();
                    }
                }
                else
                {
                    eMP_modeGid = eMP_Gid.ToString();
                }
                if (EmployeeeExpense.noofperson != null)
                {
                    trvelperson = EmployeeeExpense.noofperson;
                }
                string ecfdescription = "";
                if (EmployeeeExpense.ecfdescription != null && EmployeeeExpense.ecfdescription != "")
                {
                    ecfdescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfdescription);
                }
                string statusecf = "0";
                if (HttpContext.Current.Session["loginraisemode"] != null)
                {
                    statusecf = "-1";
                }

                if (eMP_modeGid != "" && eMP_Gid != "")
                {
                    string[,] codes = new string[,]
	               {
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpense.raisermodeId},
	    {"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.ClaimMonth).ToString()},
        {"ecf_currency_code","INR" },
	    {"ecf_currency_rate", "1"},
        {"ecf_amount", EmployeeeExpense.ECF_Amount},
        {"ecf_delmat_amount",EmployeeeExpense.ECF_Amount },
	    {"ecf_currency_amount",EmployeeeExpense.ECF_Amount},
        //{"ecf_status","0" },
        //{"ecf_all_status",statusecf },  
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",EmployeeeGid },
        {"ecf_travelpersoncount",trvelperson },
        {"ecf_description",ecfdescription },
	    {"ecf_insert_date", "sysdatetime()"},
        {"ecf_remark", remarks}
                  };
                    string[,] whcosup = new string[,]
	               {
        {"ecf_raiser",EmployeeeGid },
	    {"ecf_gid", id}
                  };
                    string tname = "iem_trn_tecf";

                    string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                    Emp_Msg = eMP_modeGid.ToString();

                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return Emp_Msg;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertEmployeeeBasic(EOW_EmployeeeExpense EmployeeeExpense, string EmployeeeGid, string clmtype)
        {
            int Empgid = 0;
            string Emp_Msg = "";
            string Emp_Sup = "";
            string Empclaimmonth = "";
            string Emp_Supflg = "";
            string Emp_currgid = "";
            string Emp_brnchgid = "";
            string eMP_Gid = "";
            string eMP_doctype = "";
            string eMP_modeGid = "";
            string trvelperson = "";
            string remarks = "";
            string noofpersoncount = ""; //02-01-2021
            string cygnetflag = ""; // 02-01-2021
            string Cygflg = "";
            try
            {
                if (EmployeeeExpense.ecfremark != null)
                {
                    remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfremark);
                }
                eMP_Gid = EmployeeeGid.ToString();
                if (EmployeeeExpense.raisermodeId == "P")
                {
                    eMP_modeGid = Convert.ToString(HttpContext.Current.Session["Proxyemployee_gid"]);
                }
                else
                {
                    eMP_modeGid = eMP_Gid.ToString();
                }
                if (eMP_modeGid != "" && eMP_Gid != "")
                {
                    GetConnection();
                    DataSet dtmodec = new DataSet();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = eMP_modeGid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Currency";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtmodec);
                    if (dtmodec.Tables[0].Rows.Count > 0)
                    {
                        Emp_currgid = Convert.ToString(dtmodec.Tables[0].Rows[0]["currency_gid"].ToString());
                    }
                    else
                    {
                        Emp_currgid = "0";
                    }
                    if (dtmodec.Tables[1].Rows.Count > 0)
                    {
                        Emp_brnchgid = Convert.ToString(dtmodec.Tables[1].Rows[0]["employee_branch_gid"].ToString());
                    }
                    else
                    {
                        Emp_brnchgid = "0";
                    }

                    if (clmtype == "T")
                    {
                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfTravel"].ToString());
                        Emp_Sup = "ecf_employee_gid";
                        Emp_Supflg = "E";
                        eMP_doctype = "1";
                        trvelperson = EmployeeeExpense.noofperson;
                        if (EmployeeeExpense.CygnetFlag != null && EmployeeeExpense.CygnetFlag != "")
                        {
                            Cygflg = EmployeeeExpense.CygnetFlag;
                        }
                        else
                        {
                            Cygflg = "N";
                        }
                        cygnetflag = Cygflg;
                        // cygnetflag = EmployeeeExpense.CygnetFlag;
                        Empclaimmonth = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimMonth).ToString();
                    }
                    else if (clmtype == "R")
                    {
                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfRegular"].ToString());
                        Emp_Sup = "ecf_employee_gid";
                        Emp_Supflg = "E";
                        eMP_doctype = "1";

                        if (EmployeeeExpense.noofperson != null && EmployeeeExpense.noofperson != "")
                        {
                            noofpersoncount = EmployeeeExpense.noofperson;
                        }
                        else
                        {
                            noofpersoncount = "0";
                        }
                        trvelperson = noofpersoncount;      //selva created 22-12-2020     
                        Empclaimmonth = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimMonth).ToString();
                    }
                    else if (clmtype == "P")
                    {
                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfPettyCash"].ToString());
                        Emp_Sup = "ecf_employee_gid";
                        Emp_Supflg = "E";
                        eMP_doctype = "1";

                        if (EmployeeeExpense.noofperson != null && EmployeeeExpense.noofperson != "")
                        {
                            noofpersoncount = EmployeeeExpense.noofperson;
                        }
                        else
                        {
                            noofpersoncount = "0";
                        }
                        trvelperson = noofpersoncount;  

                        Empclaimmonth = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimMonth).ToString();
                    }
                    else if (clmtype == "L")
                    {
                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfLocalCoveyance"].ToString());
                        Emp_Sup = "ecf_employee_gid";
                        Emp_Supflg = "E";
                        eMP_doctype = "1";
                        trvelperson = EmployeeeExpense.noofperson;
                        Empclaimmonth = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimMonth).ToString();
                    }
                    else if (clmtype == "D")
                    {
                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfSupplierInvoiceDSA"].ToString());
                        Emp_Sup = "ecf_supplier_gid";
                        Emp_Supflg = "S";
                        eMP_doctype = "3";
                        Empclaimmonth = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimMonth).ToString();
                    }
                    string statusecf = "0";
                    if (HttpContext.Current.Session["loginraisemode"] != null)
                    {
                        statusecf = "-1";
                    }
                    string ecfdescription = "";
                    if (EmployeeeExpense.ecfdescription != null)
                    {
                        ecfdescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfdescription);
                    }
                    string[,] codes = new string[,]
	               {
        {"ecf_supplier_employee",Emp_Supflg.ToString()},
	    {"ecf_employee_gid", eMP_modeGid},
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpense.raisermodeId},
        {"ecf_raiser",eMP_modeGid },
	    {"ecf_doctype_gid", eMP_doctype},
        {"ecf_branch_gid", Emp_brnchgid},
        {"ecf_docsubtype_gid",Empgid.ToString() },
	    {"ecf_claim_month",Empclaimmonth},
        {"ecf_currency_gid",Emp_currgid},
        {"ecf_currency_code","INR" },
	    {"ecf_currency_rate", "1"},
        {"ecf_amount", EmployeeeExpense.ECF_Amount},
        {"ecf_delmat_amount",EmployeeeExpense.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpense.ECF_Amount},
        {"ecf_status","0" },
        {"ecf_all_status",statusecf },        
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",eMP_Gid },
        {"ecf_travelpersoncount",trvelperson },
        {"ecf_description",ecfdescription },
	    {"ecf_insert_date", "sysdatetime()"},
        {"ecf_remark", remarks},
        {"ecf_Split_Payment","N"}, //split Payment
       // {"ecf_Iscygnet","Y"}  //selva 16-12-2020 
         {"ecf_Iscygnet",cygnetflag}  //selva 02-01-2020   
                  };
                    string tname = "iem_trn_tecf";

                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                    Emp_Msg = eMP_modeGid.ToString();
                }

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetEmployeeeProxy(string EmployeeeExpenseid)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpenseid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Proxy";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["proxy_by"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetEmployeeeGID(string Employeeecode)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Employeeecode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Employeename";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["employee_name"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectecfgidBasic(EOW_EmployeeeExpense EmployeeeExpenseid, string EmployeeeGid)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Maxecfgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_gid"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectinvoiceidBasic(EOW_EmployeeeExpense EmployeeeExpenseid, string EmployeeeGid, string EcfinGid, string clmtype)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EcfinGid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = EmployeeeGid;
                if (clmtype == "E")
                {
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Empinvoiceid";
                }
                if (clmtype == "S")
                {
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Supinvoiceid";
                }
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["invoice_gid"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertEmployeeeBasicinvoice(EOW_EmployeeeExpense EmployeeeExpense, string EmployeeeGid, string ECFGid, string clmtype)
        {
            string Emp_Msg = "";
            try
            {
                string[,] codes = new string[,]
	               {
        {"invoice_ecf_gid",ECFGid},
	    {"invoice_employee_gid", EmployeeeGid},
        {"invoice_type","E" },
	    {"invoice_date", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString()},
        {"invoice_service_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.ECF_Date).ToString()},
	    {"invoice_amount", EmployeeeExpense.ECF_Amount},
        {"invoice_wotax_amount",EmployeeeExpense.ECF_Amount},
	    {"invoice_dedup_no", "0"},
        {"invoice_no", "0"},
        {"invoice_provision_flag", "N"},
        {"invoice_dedup_status","0" }    
                  };
                string tname = "iem_trn_tinvoice";

                string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                Emp_Msg = insertcommend.ToString();
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return Emp_Msg;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_EmployeeeExpense> GetEmployeeeExpense(string ecfid, string invoiceid)
        {
            List<EOW_EmployeeeExpense> objExpense = new List<EOW_EmployeeeExpense>();
            try
            {

                EOW_EmployeeeExpense objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmployeeeExpense";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.Exp_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.Exp_ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecfdebitline_period_from"].ToString());
                    objModel.Exp_ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecfdebitline_period_to"].ToString());
                    objModel.Exp_ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.Exp_FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.Exp_CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.Exp_ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.Exp_OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Exp_Amount = Convert.ToString(dt.Rows[i]["ecfdebitline_amount"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_EmployeeeExpense> GetEmployeeeExpensenew(string ecfid, string invoiceid)
        {
            List<EOW_EmployeeeExpense> objExpense = new List<EOW_EmployeeeExpense>();
            try
            {

                EOW_EmployeeeExpense objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmployeeeExpensenew";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_EmployeeeExpense();
                        objModel.Exp_GID = Convert.ToInt32(dt.Rows[i]["ecftravel_gid"].ToString());
                        objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                        objModel.Exp_ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecftravel_period_from"].ToString());
                        objModel.Exp_ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecftravel_period_to"].ToString());
                        objModel.Exp_ClaimMonth = Convert.ToString(dt.Rows[i]["ecftravel_gl_no"].ToString());
                        objModel.Exp_FC = Convert.ToString(dt.Rows[i]["ecftravel_fc"].ToString());
                        objModel.Exp_CC = Convert.ToString(dt.Rows[i]["ecftravel_cc"].ToString());
                        objModel.Exp_ProductCode = Convert.ToString(dt.Rows[i]["ecftravel_product_code"].ToString());
                        objModel.Exp_OUCode = Convert.ToString(dt.Rows[i]["ecftravel_ou_code"].ToString());
                        objModel.Exp_Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                        objModel.ECF_Amount = dt.Rows[i]["ecf_amount"].ToString();
                        objExpense.Add(objModel);
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_EmployeeeExpense> SelectEmployeeeExpensebyid(string ecfid, string invoiceid, int id)
        {
            List<EOW_EmployeeeExpense> objExpense = new List<EOW_EmployeeeExpense>();
            try
            {
                EOW_EmployeeeExpense objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = ecfid;
                cmd.Parameters.Add("@id2", SqlDbType.Int).Value = invoiceid;
                cmd.Parameters.Add("@id3", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmployeeeExpensebyid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expnature_gid"].ToString());
                    objModel.ExpenseCategoryId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expcat_gid"].ToString());
                    objModel.SubCategoryId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expsubcat_gid"].ToString());
                    objModel.Exp_ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecfdebitline_period_from"].ToString());
                    objModel.Exp_ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecfdebitline_period_to"].ToString());
                    objModel.Exp_FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.Exp_CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.Exp_ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.Exp_OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Exp_Amount = Convert.ToString(dt.Rows[i]["ecfdebitline_amount"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_EmployeeeExpense> SelectEmployeeeExpensebyidnew(string ecfid, string invoiceid, int id)
        {
            List<EOW_EmployeeeExpense> objExpense = new List<EOW_EmployeeeExpense>();
            try
            {
                EOW_EmployeeeExpense objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = ecfid;
                cmd.Parameters.Add("@id2", SqlDbType.Int).Value = invoiceid;
                cmd.Parameters.Add("@id3", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmployeeeExpensebyidnew";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["ecftravel_expnature_gid"].ToString());
                    objModel.ExpenseCategoryId = Convert.ToInt32(dt.Rows[i]["ecftravel_expcat_gid"].ToString());
                    objModel.SubCategoryId = Convert.ToInt32(dt.Rows[i]["ecftravel_expsubcat_gid"].ToString());
                    objModel.Exp_ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecftravel_period_from"].ToString());
                    objModel.Exp_ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecftravel_period_to"].ToString());
                    objModel.Exp_FC = Convert.ToString(dt.Rows[i]["ecftravel_fc"].ToString());
                    objModel.Exp_CC = Convert.ToString(dt.Rows[i]["ecftravel_cc"].ToString());
                    objModel.Exp_ProductCode = Convert.ToString(dt.Rows[i]["ecftravel_product_code"].ToString());
                    objModel.Exp_OUCode = Convert.ToString(dt.Rows[i]["ecftravel_ou_code"].ToString());
                    objModel.Exp_Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());

                    objModel.travelDescription = Convert.ToString(dt.Rows[i]["ecftravel_desc"].ToString());
                    objModel.HsnDescription = Convert.ToString(dt.Rows[i]["hsn_description"].ToString());
                    objModel.Hsnid = Convert.ToInt32(dt.Rows[i]["ecftravel_Hsn_gid"].ToString());
                    objModel.PlaceFrom = Convert.ToString(dt.Rows[i]["ecftravel_city_from"].ToString());
                    objModel.PlaceTo = Convert.ToString(dt.Rows[i]["ecftravel_city_to"].ToString());
                    objModel.Distance = Convert.ToString(dt.Rows[i]["ecftravel_distance"].ToString());
                    objModel.Rate = Convert.ToString(dt.Rows[i]["ecftravel_rate"].ToString());
                    objModel.TravelModeId = Convert.ToInt32(dt.Rows[i]["ecftravel_transport_gid"].ToString());
                    objModel.TravelClassId = Convert.ToInt32(dt.Rows[i]["ecftravel_transportclass_gid"].ToString());
                    objModel.RCMFlag = dt.Rows[i]["RCMFlag"].ToString();
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string DeleteEmployeeeExpense(int EmployeeeExpenseGID, string ecfgid, string invoicegid)
        {
            string delant = "0";
            try
            {
                string[,] codes = new string[,]
	               {
        {"ecfdebitline_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"ecfdebitline_gid",EmployeeeExpenseGID.ToString() },
        {"ecfdebitline_ecf_gid",ecfgid },
        {"ecfdebitline_invoice_gid",invoicegid }
                  };
                string tname = "iem_trn_tecfdebitline";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);
                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string InsertEmployeeeBasicinvoiceupdate(EOW_EmployeeeExpense EmployeeeExpense, string EmployeeeGid, string ECFGid)
        {
            string insertcommend = "";
            DataTable dt = new DataTable();
            try
            {

                //        string[,] codes = new string[,]
                //           {
                //{"invoice_employee_gid", EmployeeeGid},
                //{"invoice_date", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString()},
                //{"invoice_service_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.ECF_Date).ToString()},
                //{"invoice_amount", EmployeeeExpense.ECF_Amount},
                //{"invoice_wotax_amount", EmployeeeExpense.ECF_Amount },
                //{"invoice_dedup_no", "0"},
                //{"invoice_no", "0"},
                //{"invoice_provision_flag", "N"},
                //{"invoice_dedup_status","0" }    
                //          };
                //        string[,] whcosup = new string[,]
                //           {
                //{"invoice_ecf_gid",ECFGid },
                // {"invoice_gid",invoiceGid }
                //          };

                //        string tname = "iem_trn_tinvoice";

                //        insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                //        return insertcommend;
                GetConnection();
                cmd = new SqlCommand("pr_eow_Set_UpdateInvoiceDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = ECFGid;
                cmd.Parameters.Add("@invoice_employee_gid", SqlDbType.Int).Value = EmployeeeGid;
                cmd.Parameters.Add("@invoice_date", SqlDbType.DateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString();
                cmd.Parameters.Add("@invoice_amount", SqlDbType.Decimal).Value = EmployeeeExpense.ECF_Amount;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Update";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    insertcommend = Convert.ToString(dt.Rows[0]["Invoice_Gid"].ToString());
                }
                return insertcommend;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return insertcommend;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectpolicy(string Gid)
        {
            try
            {
                string insertcommend = "";
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SubCategoryHelp";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    insertcommend = Convert.ToString(dt.Rows[0]["expsubcat_help"].ToString());
                }
                return insertcommend;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_PaymentMode> PaymentModedata()
        {
            List<EOW_PaymentMode> objNatureofPayment = new List<EOW_PaymentMode>();
            try
            {

                EOW_PaymentMode objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "PaymentModeEmp";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PaymentMode();
                    objModel.PaymentModeId = Convert.ToInt32(dt.Rows[i]["paymode_gid"].ToString());
                    objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["paymode_code"].ToString());
                    objNatureofPayment.Add(objModel);
                }
                return objNatureofPayment;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofPayment;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> EmployeeePaymentRefNodata(string empgid, string clmtype)
        {
            List<EOW_RefNo> objExpenseCategory = new List<EOW_RefNo>();
            try
            {

                EOW_RefNo objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = clmtype;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmployeeeARF";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_RefNo();
                    objModel.RefNoId = Convert.ToString(dt.Rows[i]["ecf_gid"].ToString());
                    objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                    objExpenseCategory.Add(objModel);
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpenseCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> EmployeeePaymentRefNodatasupplier(string empgid)
        {
            List<EOW_RefNo> objExpenseCategory = new List<EOW_RefNo>();
            try
            {

                EOW_RefNo objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SupplierARF";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_RefNo();
                    objModel.RefNoId = Convert.ToString(dt.Rows[i]["ecf_gid"].ToString());
                    objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                    objExpenseCategory.Add(objModel);
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpenseCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> RefNodatasuppliercrn(string empgid)
        {
            List<EOW_RefNo> objExpenseCategory = new List<EOW_RefNo>();
            try
            {

                EOW_RefNo objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Suppliercrnecf";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_RefNo();
                    objModel.RefNoId = Convert.ToString(dt.Rows[i]["invoice_gid"].ToString());
                    objModel.RefNoName = Convert.ToString(dt.Rows[i]["invoice_no"].ToString());
                    objExpenseCategory.Add(objModel);
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpenseCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_RefNo> RefNodatasupplierSUS(string empgid)
        {
            List<EOW_RefNo> objExpenseCategory = new List<EOW_RefNo>();
            try
            {

                EOW_RefNo objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SupplierSUSecf";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_RefNo();
                    objModel.RefNoId = Convert.ToString(dt.Rows[i]["gl_no"].ToString());
                    objModel.RefNoName = Convert.ToString(dt.Rows[i]["gl_no"].ToString());
                    objExpenseCategory.Add(objModel);
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpenseCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Payment> GetEmployeeePayment(string ecfgid, string invoicegid)
        {
            List<EOW_Payment> objExpense = new List<EOW_Payment>();
            try
            {
                EOW_Payment objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpPayment";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_Payment();
                        objModel.Paymentgid = Convert.ToInt32(dt.Rows[i]["ecfcreditline_gid"].ToString());
                        objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["ecfcreditline_pay_mode"].ToString());
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecfcreditline_ref_no"].ToString());
                        objModel.Beneficiary = Convert.ToString(dt.Rows[i]["ecfcreditline_beneficiary"].ToString());
                        objModel.Description = Convert.ToString(dt.Rows[i]["ecfcreditline_desc"].ToString());
                        objModel.Beneficiarycardno = Convert.ToString(dt.Rows[i]["ecfcreditline_defaultacc"].ToString());
                        objModel.PaymentAmount = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                        objModel.SplitPaymentAmt = dt.Rows[i]["Split_PaymentAmt"].ToString();
                        objExpense.Add(objModel);
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertEmployeeePaymentbasic(string EmployeeeGid, string ecfgid, string invoicegid, string amt)
        {
            string bankgid = "0";
            string bankgnno = "123";
            string IFSCCode = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpAccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                IFSCCode = dt.Rows[0]["employee_era_ifsc_code"].ToString();
                if (dt.Rows.Count > 0)
                {
                    GetConnection();
                    DataTable dtpaybank = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dt.Rows[0]["emp_paymode"].ToString());
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtpaybank);
                    if (dtpaybank.Rows.Count > 0)
                    {
                        if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                        {
                            bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                        }
                        if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                        {
                            bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                        }
                    }

                    string[,] codes = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
        {"ecfcreditline_pay_mode",Convert.ToString(dt.Rows[0]["emp_paymode"].ToString()) },
	    {"ecfcreditline_ref_no", Convert.ToString(dt.Rows[0]["employee_era_acc_no"].ToString())},
        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dt.Rows[0]["employee_name"].ToString())) },
	    {"ecfcreditline_bank_gid", bankgid},
        {"ecfcreditline_ifsc_code",Convert.ToString(dt.Rows[0]["employee_era_ifsc_code"].ToString())},
	    {"ecfcreditline_gl_no", bankgnno},
        {"ecfcreditline_desc", Convert.ToString(dt.Rows[0]["emp_paymodedesc"].ToString())},
        {"ecfcreditline_amount",amt }      
                  };

                    string tname = "iem_trn_tecfcreditline";

                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return IFSCCode;
        }
        public string InsertEmployeeePaymentbasicupdatepetty(string EmployeeeGid, string ecfgid, string amt)
        {
            string bankgid = "0";
            string bankgnno = "123";
            string IFSCCode = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpAccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                IFSCCode = dt.Rows[0]["employee_era_ifsc_code"].ToString();
                if (dt.Rows.Count > 0)
                {
                    GetConnection();
                    DataTable dtval = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                    //cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymenteraamt";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtval);
                    if (dtval.Rows.Count > 0)
                    {
                        GetConnection();
                        DataTable dtpaybank = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dt.Rows[0]["emp_paymode"].ToString());
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtpaybank);
                        if (dtpaybank.Rows.Count > 0)
                        {
                            if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                            {
                                bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                            }
                            if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                            {
                                bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                            }
                        }
                        if (dtval.Rows[0]["ecfcreditline_amount"].ToString() != "")
                        {
                            decimal savecritamt = 0;
                            decimal savecritnewamt = Convert.ToDecimal(amt.ToString());
                            savecritamt = savecritnewamt - savecritamt;
                            amt = savecritamt.ToString();
                        }
                    }
                    string[,] codes = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    //{"ecfcreditline_invoice_gid", invoicegid},
	    {"ecfcreditline_ref_no", Convert.ToString(dt.Rows[0]["employee_era_acc_no"].ToString())},
        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dt.Rows[0]["employee_name"].ToString())) },
	    {"ecfcreditline_bank_gid", bankgid},
        {"ecfcreditline_ifsc_code",Convert.ToString(dt.Rows[0]["employee_era_ifsc_code"].ToString())},
	    {"ecfcreditline_gl_no", bankgnno},
        {"ecfcreditline_desc",Convert.ToString(dt.Rows[0]["emp_paymodedesc"].ToString())},
        {"ecfcreditline_amount",amt }      
                  };

                    string tname = "iem_trn_tecfcreditline";

                    string[,] whcosup = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
         //{"ecfcreditline_invoice_gid",invoicegid },
	    {"ecfcreditline_pay_mode", Convert.ToString(dt.Rows[0]["emp_paymode"].ToString())}
                  };

                    string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return IFSCCode;
        }

        public string InsertEmployeeePaymentbasicupdate(string EmployeeeGid, string ecfgid, string amt)
        {
            string bankgid = "0";
            string bankgnno = "123";
            string IFSCCode = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpAccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                IFSCCode = dt.Rows[0]["employee_era_ifsc_code"].ToString();
                if (dt.Rows.Count > 0)
                {
                    GetConnection();
                    DataTable dtval = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                    //cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymenteraamt";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtval);
                    if (dtval.Rows.Count > 0)
                    {
                        GetConnection();
                        DataTable dtpaybank = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dt.Rows[0]["emp_paymode"].ToString());
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtpaybank);
                        if (dtpaybank.Rows.Count > 0)
                        {
                            if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                            {
                                bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                            }
                            if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                            {
                                bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                            }
                        }
                        if (dtval.Rows[0]["ecfcreditline_amount"].ToString() != "")
                        {
                            decimal savecritamt = 0;
                            savecritamt = Convert.ToDecimal(dtval.Rows[0]["ecfcreditline_amount"].ToString());
                            decimal savecritnewamt = Convert.ToDecimal(amt.ToString());
                            savecritamt = savecritnewamt - savecritamt;
                            amt = savecritamt.ToString();
                        }
                    }
                    string[,] codes = new string[,]
	               {
                    {"ecfcreditline_ecf_gid",ecfgid },
	                //{"ecfcreditline_invoice_gid", invoicegid},
	                {"ecfcreditline_ref_no", Convert.ToString(dt.Rows[0]["employee_era_acc_no"].ToString())},
                    {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dt.Rows[0]["employee_name"].ToString())) },
	                {"ecfcreditline_bank_gid", bankgid},
                    {"ecfcreditline_ifsc_code",Convert.ToString(dt.Rows[0]["employee_era_ifsc_code"].ToString())},
	                {"ecfcreditline_gl_no", bankgnno},
                    {"ecfcreditline_desc", Convert.ToString(dt.Rows[0]["emp_paymodedesc"].ToString())},
                    {"ecfcreditline_amount",amt }      
                  };

                    string tname = "iem_trn_tecfcreditline";

                    string[,] whcosup = new string[,]
	               {
                    {"ecfcreditline_ecf_gid",ecfgid },
                    //{"ecfcreditline_invoice_gid",invoicegid },
	                {"ecfcreditline_pay_mode", Convert.ToString(dt.Rows[0]["emp_paymode"].ToString())}
                  };

                    string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return IFSCCode;
        }
        public string InsertEmployeeePaymentpetty(EOW_Payment EmployeeeExpense, string ecfgid, string invoicegid, string rempayam)
        {
            string status = "";
            string bankgid = "0";
            string bankgnno = "123";
            string Emp_Msg = "";
            string arf_gid = "";
            string Emp_MsgDescription = "";
            string Emp_MsgRefNoName = "";
            try
            {
                if (EmployeeeExpense.Description == null)
                {
                    Emp_MsgDescription = "";
                }
                else
                {
                    Emp_MsgDescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Description);
                }
                if (EmployeeeExpense.RefNoName == null)
                {
                    Emp_MsgRefNoName = "";
                }
                else
                {
                    Emp_MsgRefNoName = EmployeeeExpense.RefNoName;
                }
                if (EmployeeeExpense.PaymentModeName == "PPX")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["ecfarf_dr_gl_no"].ToString());
                        if (Emp_Msg == "")
                        {
                            Emp_Msg = "Invalid GL Code";
                            return Emp_Msg;
                        }
                        arf_gid = Convert.ToString(dt.Rows[0]["ecfarf_gid"].ToString());
                    }
                    decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                    decimal exption = Convert.ToDecimal(EmployeeeExpense.Exception);

                    decimal final = 0;
                    final = exption - mainamt;
                    string[,] codesupA = new string[,]
                     {
                         {"ecfarf_exception",final.ToString() }
                    };
                    string[,] whcosA = new string[,]
                     {
                        {"ecfarf_gid", arf_gid},
                    };
                    string tnameupA = "iem_trn_tecfarf";

                    string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);

                    string[,] codesarft = new string[,]
	               {
                        {"arftran_invoice_gid",invoicegid},
                        {"arftran_ecf_gid",ecfgid },
	                    {"arftran_date", "sysdatetime()"},
                        {"arftran_gl_no",Emp_Msg },
	                    {"arftran_desc", Emp_MsgDescription},
                        {"arftran_amount",EmployeeeExpense.PaymentAmount },
                        {"arftran_mult", "-1"},
	                    {"arftran_ref_flag", "1"},
                        {"arftran_ref_gid",arf_gid}            
                  };
                    string tnamearft = "iem_trn_tarftran";

                    string insertcommendarft = objCommonIUD.InsertCommon(codesarft, tnamearft);

                }
                else if (EmployeeeExpense.PaymentModeName == "SUS" || EmployeeeExpense.PaymentModeName == "RRP")
                {
                    Emp_Msg = "";
                    string glnosplit = Emp_MsgRefNoName.ToString();
                    string[] glnosp = glnosplit.Split('-');
                    status = GetStatusexcel(glnosp[0].ToString(), "", "", "GLCode");
                    if (status == "notexists")
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                    else
                    {
                        Emp_MsgRefNoName = glnosp[0].ToString();
                        Emp_Msg = glnosp[0].ToString();
                    }
                }

                string empraiserid = HttpContext.Current.Session["SelfModeRaiseid"].ToString();
                GetConnection();
                DataTable dtpaybank = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empraiserid.ToString();
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = "ERA";
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtpaybank);
                if (dtpaybank.Rows.Count > 0)
                {
                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                    {
                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                    }
                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                    {
                        if (EmployeeeExpense.PaymentModeName != "PPX" && EmployeeeExpense.PaymentModeName != "SUS" && EmployeeeExpense.PaymentModeName != "RRP")
                        {
                            Emp_Msg = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                        }
                    }
                    else
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                }
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.VarChar).Value = ecfgid.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CheckPayment";
                da = new SqlDataAdapter(cmd);
                DataTable dtPayment = new DataTable();
                da.Fill(dtPayment);

                if (dtPayment.Rows[0][0].ToString() == "Exists")
                {
                    string Amount = (Convert.ToDecimal(dtPayment.Rows[0][1]) - Convert.ToDecimal(EmployeeeExpense.PaymentAmount)).ToString();
                    string[,] codes1 = new string[,]
	               {
                    {"ecfcreditline_amount",Amount }      
                  };

                    string tname1 = "iem_trn_tecfcreditline";

                    string[,] whcosup = new string[,]
	               {
                    {"ecfcreditline_gid",dtPayment.Rows[0][2].ToString() },
                  };

                    string UpdatePayment = objCommonIUD.UpdateCommon(codes1, whcosup, tname1);
                }
                if (dtPayment.Rows[0][0].ToString() == "AmountExceed")
                {
                    Emp_Msg = "AmountExceed";
                    return Emp_Msg;
                }

                string[,] codes = new string[,]
	               {
                    {"ecfcreditline_ecf_gid",ecfgid },
	                {"ecfcreditline_invoice_gid", invoicegid},
                    {"ecfcreditline_pay_mode",EmployeeeExpense.PaymentModeName },
	                {"ecfcreditline_ref_no", Emp_MsgRefNoName},
                    {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Beneficiary) },
	                {"ecfcreditline_gl_no", Emp_Msg},
                    {"ecfcreditline_bank_gid",bankgid},
                    {"ecfcreditline_desc",Emp_MsgDescription},
	                {"ecfcreditline_amount", EmployeeeExpense.PaymentAmount}             
                  };
                string tname = "iem_trn_tecfcreditline";

                string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                Emp_Msg = "Sucess";
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ex.Message.ToString();
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertEmployeeePayment(EOW_Payment EmployeeeExpense, string ecfgid, string invoicegid, string rempayam)
        {
            string bankgid = "0";
            string Emp_Msg = "";
            string assignpaymode = "";
            string status = "";
            string arf_gid = "";
            string Emp_MsgDescription = "";
            string Emp_MsgRefNoName = "";
            try
            {
                if (EmployeeeExpense.Description == null)
                {
                    Emp_MsgDescription = "";
                }
                else
                {
                    Emp_MsgDescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Description);
                }
                if (EmployeeeExpense.RefNoName == null)
                {
                    Emp_MsgRefNoName = "";
                }
                else
                {
                    Emp_MsgRefNoName = EmployeeeExpense.RefNoName;
                }
                if (EmployeeeExpense.PaymentModeName == "PPX")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["ecfarf_dr_gl_no"].ToString());
                        if (Emp_Msg == "")
                        {
                            Emp_Msg = "Invalid GL Code";
                            return Emp_Msg;
                        }
                        arf_gid = Convert.ToString(dt.Rows[0]["ecfarf_gid"].ToString());
                    }
                    decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                    decimal exption = Convert.ToDecimal(EmployeeeExpense.Exception);

                    decimal final = 0;
                    final = exption - mainamt;
                    string[,] codesupA = new string[,]
	               {
                       {"ecfarf_exception",final.ToString() }
                  };
                    string[,] whcosA = new string[,]
	               {
	                  {"ecfarf_gid", arf_gid},
                  };
                    string tnameupA = "iem_trn_tecfarf";

                    string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);

                    string[,] codesarft = new string[,]
	               {
                        {"arftran_invoice_gid",invoicegid},
                        {"arftran_ecf_gid",ecfgid },
	                    {"arftran_date", "sysdatetime()"},
                        {"arftran_gl_no",Emp_Msg },
	                    {"arftran_desc", Emp_MsgDescription},
                        {"arftran_amount",EmployeeeExpense.PaymentAmount },
                        {"arftran_mult", "-1"},
	                    {"arftran_ref_flag", "1"},
                        {"arftran_ref_gid",arf_gid}            
                  };
                    string tnamearft = "iem_trn_tarftran";

                    string insertcommendarft = objCommonIUD.InsertCommon(codesarft, tnamearft);

                }
                else if (EmployeeeExpense.PaymentModeName == "SUS" || EmployeeeExpense.PaymentModeName == "RRP")
                {
                    Emp_Msg = "";
                    string glnosplit = Emp_MsgRefNoName.ToString();
                    string[] glnosp = glnosplit.Split('-');
                    status = GetStatusexcel(glnosp[0].ToString(), "", "", "GLCode");
                    if (status == "notexists")
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                    else
                    {
                        Emp_MsgRefNoName = glnosp[0].ToString();
                        Emp_Msg = glnosp[0].ToString();
                    }
                }

                string empraiserid = HttpContext.Current.Session["SelfModeRaiseid"].ToString();
                GetConnection();
                DataTable dteraacc = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empraiserid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpAccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dteraacc);
                if (dteraacc.Rows.Count > 0)
                {
                    assignpaymode = Convert.ToString(dteraacc.Rows[0]["emp_paymode"].ToString());
                }
                else
                {
                    assignpaymode = "ERA";
                }

                GetConnection();
                DataTable dtpaybank = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empraiserid.ToString();
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = assignpaymode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtpaybank);
                if (dtpaybank.Rows.Count > 0)
                {
                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                    {
                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                    }
                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                    {
                        if (EmployeeeExpense.PaymentModeName != "PPX" && EmployeeeExpense.PaymentModeName != "SUS" && EmployeeeExpense.PaymentModeName != "RRP")
                        {
                            Emp_Msg = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                        }
                    }
                    else
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                }

                string[,] codes = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
        {"ecfcreditline_pay_mode",EmployeeeExpense.PaymentModeName },
	    {"ecfcreditline_ref_no", Emp_MsgRefNoName},
        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Beneficiary) },
	    {"ecfcreditline_gl_no", Emp_Msg},
        {"ecfcreditline_bank_gid",bankgid},
        {"ecfcreditline_desc",Emp_MsgDescription},
	    {"ecfcreditline_amount", EmployeeeExpense.PaymentAmount}             
                  };
                string tname = "iem_trn_tecfcreditline";

                string insertcommend = objCommonIUD.InsertCommon(codes, tname);

                decimal mainamt1 = Convert.ToDecimal(rempayam.ToString());
                decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());
                decimal tol = mainamt1 - mainamt2;
                if (tol < 0) // ramya added on 14 Dec 21
                {
                    Emp_Msg = "Entered Amount should not be greater than Invoice Amount!";
                    return Emp_Msg;
                }
                string[,] codesup = new string[,]
	               {
        {"ecfcreditline_amount",tol.ToString() }
                  };
                string[,] whcos = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
         {"ecfcreditline_pay_mode",assignpaymode }
                  };
                string tnameup = "iem_trn_tecfcreditline";

                string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);
                Emp_Msg = "Sucess";
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ex.Message.ToString();
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Payment> SelectEmployeeePaymentid(string ecfid, string invoiceid, int id)
        {
            List<EOW_Payment> objExpense = new List<EOW_Payment>();
            try
            {

                EOW_Payment objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_Payment();
                    objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["ecfcreditline_pay_mode"].ToString());
                    objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecfcreditline_ref_no"].ToString());
                    objModel.Beneficiary = Convert.ToString(dt.Rows[i]["ecfcreditline_beneficiary"].ToString());
                    objModel.PaymentAmount = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                    objModel.Description = Convert.ToString(dt.Rows[i]["ecfcreditline_desc"].ToString());
                    objModel.Ifsccode = Convert.ToString(dt.Rows[i]["ecfcreditline_ifsc_code"].ToString());
                    objModel.SplitPaymentAmt = Convert.ToString(dt.Rows[i]["Split_PaymentAmt"].ToString());
                    objModel.Exception = "0";
                    if (objModel.PaymentModeName == "PPX")
                    {
                        DataTable dte = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = objModel.RefNoName;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dte);

                        if (dte.Rows.Count > 0)
                        {
                            objModel.Exception = Convert.ToString(dte.Rows[0]["ecfarf_exception"].ToString());
                        }
                        else
                        {
                            objModel.Exception = "0";
                        }
                    }
                    else if (objModel.PaymentModeName == "REC")
                    {
                        DataTable dte = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = objModel.RefNoName;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetRecoveryException";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dte);

                        if (dte.Rows.Count > 0)
                        {
                            objModel.Exception = Convert.ToString(dte.Rows[0]["recovery_exception"].ToString());
                        }
                        else
                        {
                            objModel.Exception = "0";
                        }
                    }
                    objExpense.Add(objModel);
                }

                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string DeleteEmployeeePayment(int EmployeeePaymentGID, string ecfgid, string invoicegid, string rempayam)
        {
            string assignpaymode = "";
            string Emp_Msgexp = "0";
            string arf_gid = "0";
            string delant = "0";
            try
            {
                string[,] codes = new string[,]
	               {
        {"ecfcreditline_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"ecfcreditline_gid",EmployeeePaymentGID.ToString() },
        {"ecfcreditline_ecf_gid",ecfgid },
        {"ecfcreditline_invoice_gid",invoicegid }
                  };
                string tname = "iem_trn_tecfcreditline";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                decimal mainamt1 = Convert.ToDecimal(rempayam.ToString());

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = EmployeeePaymentGID;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidY";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    string atmt = Convert.ToString(dt.Rows[0]["ecfcreditline_amount"].ToString());
                    string paymode = Convert.ToString(dt.Rows[0]["ecfcreditline_pay_mode"].ToString());
                    decimal mainamt2 = Convert.ToDecimal(atmt.ToString());
                    decimal tol = mainamt1 + mainamt2;

                    if (paymode == "PPX")
                    {
                        string Refno = Convert.ToString(dt.Rows[0]["ecfcreditline_ref_no"].ToString());

                        GetConnection();
                        DataTable dtexp = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Refno;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtexp);
                        if (dtexp.Rows.Count > 0)
                        {
                            Emp_Msgexp = Convert.ToString(dtexp.Rows[0]["ecfarf_exception"].ToString());
                            arf_gid = Convert.ToString(dtexp.Rows[0]["ecfarf_gid"].ToString());

                            decimal exption = Convert.ToDecimal(Emp_Msgexp);
                            decimal arfexpamt = mainamt2 + exption;

                            string[,] codesupA = new string[,]
	                     {
                              {"ecfarf_exception",arfexpamt.ToString() }
                         };
                            string[,] whcosA = new string[,]
	                    {
	                          {"ecfarf_gid", arf_gid},
                         };
                            string tnameupA = "iem_trn_tecfarf";

                            string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);
                        }

                        string[,] codesupAtr = new string[,]
	               {                     
	                    {"arftran_isremoved", "Y"},                         
                  };
                        string[,] whcosAtr = new string[,]
	               {
                      {"arftran_ecf_gid",ecfgid },
                      {"arftran_invoice_gid",invoicegid},
	                  {"arftran_ref_gid",arf_gid} 
                  };
                        string tnameupAtr = "iem_trn_tarftran";

                        string insertcommendupwtr = objCommonIUD.UpdateCommon(codesupAtr, whcosAtr, tnameupAtr);
                    }
                    string empraiserid = HttpContext.Current.Session["SelfModeRaiseid"].ToString();
                    GetConnection();
                    DataTable dteraacc = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empraiserid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpAccdetails";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dteraacc);
                    if (dteraacc.Rows.Count > 0)
                    {
                        assignpaymode = Convert.ToString(dteraacc.Rows[0]["emp_paymode"].ToString());
                    }
                    else
                    {
                        assignpaymode = "ERA";
                    }

                    string[,] codesup = new string[,]
	               {
        {"ecfcreditline_amount",tol.ToString() }
                  };
                    string[,] whcosUP = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
         {"ecfcreditline_pay_mode",assignpaymode }
                  };
                    string tnameup = "iem_trn_tecfcreditline";

                    string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcosUP, tnameup);

                }
                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string UpdateEmployeeePaymentpetty(EOW_Payment EmployeeeExpense, string ecfgid, string invoicegid, string payactiverowid, string beforeamt, string eraamt)
        {
            string assignpaymode = "";
            string bankgid = "0";
            string arf_gid = "";
            string status = "";
            string Emp_Msg = "";
            string Emp_MsgDescription = "";
            string Emp_MsgRefNoName = "";
            try
            {
                if (EmployeeeExpense.Description == null)
                {
                    Emp_MsgDescription = "";
                }
                else
                {
                    Emp_MsgDescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Description);
                }
                if (EmployeeeExpense.RefNoName == null)
                {
                    Emp_MsgRefNoName = "";
                }
                else
                {
                    Emp_MsgRefNoName = EmployeeeExpense.RefNoName;
                }
                if (EmployeeeExpense.PaymentModeName == "PPX")
                {
                    //  GetConnection();
                    //  DataTable dt = new DataTable();
                    //  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    //  cmd.CommandType = CommandType.StoredProcedure;
                    //  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    //  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                    //  da = new SqlDataAdapter(cmd);
                    //  da.Fill(dt);
                    //  if (dt.Rows.Count > 0)
                    //  {
                    //      Emp_Msg = Convert.ToString(dt.Rows[0]["ecfarf_dr_gl_no"].ToString());
                    //      arf_gid = Convert.ToString(dt.Rows[0]["ecfarf_gid"].ToString());
                    //  }
                    //  decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                    //  decimal exption = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowException"]);
                    //  decimal beforeamta = Convert.ToDecimal(beforeamt);
                    //  decimal final = 0;
                    //  if (beforeamta >= mainamt)
                    //  {
                    //      final = beforeamta - mainamt;
                    //      final = final + exption;
                    //  }
                    //  if (beforeamta < mainamt)
                    //  {
                    //      final = mainamt - beforeamta;
                    //      final = exption - final;
                    //  }


                    //  string[,] codesupA = new string[,]
                    // {
                    //     {"ecfarf_exception",final.ToString() }
                    //};
                    //  string[,] whcosA = new string[,]
                    // {
                    //    {"ecfarf_gid", arf_gid},
                    //};
                    //  string tnameupA = "iem_trn_tecfarf";

                    //  string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);

                    //  string[,] codesupAtr = new string[,]
                    // {                     
                    //      {"arftran_date", "sysdatetime()"},
                    //      {"arftran_gl_no",Emp_Msg },
                    //      {"arftran_desc", Emp_MsgDescription},
                    //      {"arftran_amount",EmployeeeExpense.PaymentAmount },
                    //      {"arftran_mult", "-1"},
                    //      {"arftran_ref_flag", "1"},                          
                    //};
                    //  string[,] whcosAtr = new string[,]
                    // {
                    //    {"arftran_ecf_gid",ecfgid },
                    //    {"arftran_invoice_gid",invoicegid} ,
                    //    {"arftran_ref_gid",arf_gid},
                    //    {"arftran_isremoved", "N"},
                    //};
                    //  string tnameupAtr = "iem_trn_tarftran";

                    //  string insertcommendupwtr = objCommonIUD.UpdateCommon(codesupAtr, whcosAtr, tnameupAtr);

                }
                else if (EmployeeeExpense.PaymentModeName == "SUS" || EmployeeeExpense.PaymentModeName == "RRP")
                {
                    Emp_Msg = "";
                    string glnosplit = Emp_MsgRefNoName.ToString();
                    string[] glnosp = glnosplit.Split('-');
                    status = GetStatusexcel(glnosp[0].ToString(), "", "", "GLCode");
                    if (status == "notexists")
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                    else
                    {
                        Emp_MsgRefNoName = glnosp[0].ToString();
                        Emp_Msg = glnosp[0].ToString();
                    }
                }
                string empraiserid = HttpContext.Current.Session["SelfModeRaiseid"].ToString();
                GetConnection();
                DataTable dtpaybank = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empraiserid.ToString();
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = "ERA";
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtpaybank);
                if (dtpaybank.Rows.Count > 0)
                {
                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                    {
                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                    }
                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                    {
                        if (EmployeeeExpense.PaymentModeName != "PPX" && EmployeeeExpense.PaymentModeName != "SUS" && EmployeeeExpense.PaymentModeName != "RRP")
                        {
                            Emp_Msg = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                        }
                    }
                }
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.VarChar).Value = ecfgid.ToString();
                cmd.Parameters.Add("@id2", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentAmount;
                cmd.Parameters.Add("@id3", SqlDbType.VarChar).Value = payactiverowid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EditCheckPayment";
                da = new SqlDataAdapter(cmd);
                DataTable dtPayment = new DataTable();
                da.Fill(dtPayment);

                //if(Convert.ToInt16(dtPayment.Rows[0][0].ToString())>0)
                //{
                //    TotalAmount = (int.Parse(dtPayment.Rows[0][0].ToString()) + int.Parse(EmployeeeExpense.PaymentAmount));
                //}
                //else
                //{
                //    TotalAmount = (int.Parse(dtPayment.Rows[0][0].ToString()) - int.Parse(EmployeeeExpense.PaymentAmount));
                //}

                //  string[,] codes1 = new string[,]
                // {
                //  {"ecfcreditline_amount",TotalAmount.ToString() }      
                // };

                //  string tname1 = "iem_trn_tecfcreditline";

                //  string[,] whcosup1 = new string[,]
                // {
                //  {"ecfcreditline_gid",dtPayment.Rows[0][1].ToString() },

                //};

                //  string UpdatePayment = objCommonIUD.UpdateCommon(codes1, whcosup1, tname1);

                string[,] codes = new string[,]
	               {
        {"ecfcreditline_pay_mode",EmployeeeExpense.PaymentModeName },
	    {"ecfcreditline_ref_no", Emp_MsgRefNoName},
        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Beneficiary) },
	    {"ecfcreditline_gl_no", Emp_Msg},
        {"ecfcreditline_bank_gid",bankgid},
        {"ecfcreditline_desc",Emp_MsgDescription},
	    {"ecfcreditline_amount", EmployeeeExpense.PaymentAmount}             
                  };
                string[,] whcosup = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
         {"ecfcreditline_gid",payactiverowid }
                  };
                string tname = "iem_trn_tecfcreditline";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                Emp_Msg = "Sucess";
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ex.Message.ToString();
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string UpdateEmployeeePayment(EOW_Payment EmployeeeExpense, string ecfgid, string invoicegid, string payactiverowid, string beforeamt, string eraamt)
        {
            string assignpaymode = "";
            string bankgid = "0";
            string arf_gid = "";
            string Emp_Msg = "";
            string status = "";
            string Emp_MsgDescription = "";
            string Emp_MsgRefNoName = "";
            try
            {
                if (EmployeeeExpense.Description == null)
                {
                    Emp_MsgDescription = "";
                }
                else
                {
                    Emp_MsgDescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Description);
                }
                if (EmployeeeExpense.RefNoName == null)
                {
                    Emp_MsgRefNoName = "";
                }
                else
                {
                    Emp_MsgRefNoName = EmployeeeExpense.RefNoName;
                }

                if (EmployeeeExpense.PaymentModeName == "PPX")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["ecfarf_dr_gl_no"].ToString());
                        if (Emp_Msg == "")
                        {
                            Emp_Msg = "Invalid GL Code";
                            return Emp_Msg;
                        }
                        arf_gid = Convert.ToString(dt.Rows[0]["ecfarf_gid"].ToString());
                    }
  /*                decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                    decimal exption = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowException"]);
                    decimal beforeamta = Convert.ToDecimal(beforeamt);
                   decimal final = 0;
                    if (beforeamta >= mainamt)
                    {
                        final = beforeamta - mainamt;
                        final = final + exption;
                    }
                    if (beforeamta < mainamt)
                    {
                        final = mainamt - beforeamta;
                        final = exption - final;
                    }


                    string[,] codesupA = new string[,]
	               {
                       {"ecfarf_exception",final.ToString() }
                  };
                    string[,] whcosA = new string[,]
	               {
	                  {"ecfarf_gid", arf_gid},
                  };
                    string tnameupA = "iem_trn_tecfarf";

                    string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);
                    */
                    string[,] codesupAtr = new string[,]
	               {                     
	                    {"arftran_date", "sysdatetime()"},
                        {"arftran_gl_no",Emp_Msg },
	                    {"arftran_desc", Emp_MsgDescription},
                        {"arftran_amount",EmployeeeExpense.PaymentAmount },
                        {"arftran_mult", "-1"},
	                    {"arftran_ref_flag", "1"},                         
                  };
                    string[,] whcosAtr = new string[,]
	               {
                      {"arftran_ecf_gid",ecfgid },
                      {"arftran_invoice_gid",invoicegid} ,
	                  {"arftran_ref_gid",arf_gid},
                      {"arftran_isremoved", "N"},
                  };
                    string tnameupAtr = "iem_trn_tarftran";

                    string insertcommendupwtr = objCommonIUD.UpdateCommon(codesupAtr, whcosAtr, tnameupAtr);
                }
                else if (EmployeeeExpense.PaymentModeName == "SUS" || EmployeeeExpense.PaymentModeName == "RRP")
                {
                    Emp_Msg = "";
                    string glnosplit = Emp_MsgRefNoName.ToString();
                    string[] glnosp = glnosplit.Split('-');
                    status = GetStatusexcel(glnosp[0].ToString(), "", "", "GLCode");
                    if (status == "notexists")
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                    else
                    {
                        Emp_MsgRefNoName = glnosp[0].ToString();
                        Emp_Msg = glnosp[0].ToString();
                    }
                }

                string empraiserid = HttpContext.Current.Session["SelfModeRaiseid"].ToString();
                GetConnection();
                DataTable dteraacc = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empraiserid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpAccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dteraacc);
                if (dteraacc.Rows.Count > 0)
                {
                    assignpaymode = Convert.ToString(dteraacc.Rows[0]["emp_paymode"].ToString());
                }
                else
                {
                    assignpaymode = "ERA";
                }

                GetConnection();
                DataTable dtpaybank = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empraiserid.ToString();
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = assignpaymode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtpaybank);
                if (dtpaybank.Rows.Count > 0)
                {
                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                    {
                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                    }
                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                    {
                        if (EmployeeeExpense.PaymentModeName != "PPX" && EmployeeeExpense.PaymentModeName != "SUS" && EmployeeeExpense.PaymentModeName != "RRP")
                        {
                            Emp_Msg = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                        }
                    }
                    else
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                } 
               
                decimal tol = 0;
                decimal maineraamt = Convert.ToDecimal(eraamt.ToString());
                decimal mainbeforeamt = Convert.ToDecimal(beforeamt.ToString());
                decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());

                if (mainbeforeamt >= mainamt2)
                {
                    tol = mainbeforeamt - mainamt2;
                    tol = maineraamt + tol;
                }
                else
                {
                    tol = mainamt2 - mainbeforeamt;
                    tol = maineraamt - tol;
                }
                if (tol < 0) // ramya added on 14 Dec 21
                {
                    Emp_Msg = "Entered Amount should not be greater than Invoice Amount!";
                    return Emp_Msg;
                }
                //Ramya added on 13 Dec 21 
                GetConnection();
                cmd = new SqlCommand("Pr_eow_Set_RevertPPXAmt", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@PCreditlineId", SqlDbType.VarChar).Value = payactiverowid;
                cmd.Parameters.Add("@PCurrentRefNo", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                cmd.Parameters.Add("@PCurrentAmt", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentAmount;
                cmd.Parameters.Add("@PCurrentPaymode", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                cmd.ExecuteNonQuery();
                //Ramya added on 13 Dec 21
                string[,] codes = new string[,]
	               {
        {"ecfcreditline_pay_mode",EmployeeeExpense.PaymentModeName },
	    {"ecfcreditline_ref_no", Emp_MsgRefNoName},
        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Beneficiary) },
        {"ecfcreditline_gl_no", Emp_Msg},
        {"ecfcreditline_bank_gid",bankgid},
        {"ecfcreditline_desc",Emp_MsgDescription},
	    {"ecfcreditline_amount", EmployeeeExpense.PaymentAmount}             
                  };
                string[,] whcosup = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
         {"ecfcreditline_gid",payactiverowid }
                  };
                string tname = "iem_trn_tecfcreditline";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                /*
				decimal tol = 0;
                decimal maineraamt = Convert.ToDecimal(eraamt.ToString());
                decimal mainbeforeamt = Convert.ToDecimal(beforeamt.ToString());
                decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());

                if (mainbeforeamt >= mainamt2)
                {
                    tol = mainbeforeamt - mainamt2;
                    tol = maineraamt + tol;
                }
                else
                {
                    tol = mainamt2 - mainbeforeamt;
                    tol = maineraamt - tol;
                }*/

                string[,] codesup = new string[,]
	               {
        {"ecfcreditline_amount",tol.ToString() }
                  };
                string[,] whcos = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
         {"ecfcreditline_pay_mode",assignpaymode }
                  };
                string tnameup = "iem_trn_tecfcreditline";

                string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);
                Emp_Msg = "Sucess";
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ex.Message.ToString();
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_Attachment> AttachmentTypedata()
        {
            List<EOW_Attachment> objAttachmentType = new List<EOW_Attachment>();
            try
            {

                EOW_Attachment objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "AttachmentType";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_Attachment();
                    objModel.AttachmentTypeId = Convert.ToInt32(dt.Rows[i]["attachmenttype_gid"].ToString());
                    objModel.AttachmentTypeName = Convert.ToString(dt.Rows[i]["attachmenttype_name"].ToString());
                    objAttachmentType.Add(objModel);
                }
                return objAttachmentType;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAttachmentType;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_File> GetEmployeeeAttachment(string ecfgid, string EmployeeeGid)
        {
            List<EOW_File> objAttachment = new List<EOW_File>();
            try
            {

                EOW_File objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "AttachmentDetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_File();
                        objModel.AttachmentFilenameId = Convert.ToInt32(dt.Rows[i]["attachment_gid"].ToString());
                        objModel.AttachmentFilename = Convert.ToString(dt.Rows[i]["attachment_filename"].ToString());
                        objModel.AttachmentTypeName = Convert.ToString(dt.Rows[i]["attachmenttype_name"].ToString());
                        objModel.AttachmentDate = Convert.ToString(dt.Rows[i]["attachment_date"].ToString());
                        objModel.AttachmentDescription = Convert.ToString(dt.Rows[i]["attachment_desc"].ToString());
                        objModel.AttachmentBy = Convert.ToString(dt.Rows[i]["codename"].ToString());
                        objModel.attachment_by = Convert.ToInt32(dt.Rows[i]["attachment_by"].ToString());
                        objAttachment.Add(objModel);
                    }
                }
                return objAttachment;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAttachment;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_File> GetinvoiceAttachment(string ecfgid, string invoicegid)
        {
            List<EOW_File> objAttachment = new List<EOW_File>();
            try
            {

                EOW_File objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invAttachmentDetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_File();
                        objModel.AttachmentFilenameId = Convert.ToInt32(dt.Rows[i]["attachment_gid"].ToString());
                        objModel.AttachmentFilename = Convert.ToString(dt.Rows[i]["attachment_filename"].ToString());
                        objModel.AttachmentTypeName = Convert.ToString(dt.Rows[i]["attachmenttype_name"].ToString());
                        objModel.AttachmentDate = Convert.ToString(dt.Rows[i]["attachment_date"].ToString());
                        objModel.AttachmentDescription = Convert.ToString(dt.Rows[i]["attachment_desc"].ToString());
                        objModel.AttachmentBy = Convert.ToString(dt.Rows[i]["codename"].ToString());
                        objModel.attachment_by = Convert.ToInt32(dt.Rows[i]["attachment_by"].ToString());
                        objAttachment.Add(objModel);
                    }
                }
                return objAttachment;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAttachment;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertEmpAtt(HttpPostedFileBase savefile, EOW_File EmployeeeExpense, string ecfgid, string EmployeeeGid)
        {
            string Emp_Msg = "";
            string filename = "";
            string AttachmentDescriptiont = "";
            try
            {
                if (EmployeeeExpense.AttachmentDescription != null)
                {
                    AttachmentDescriptiont = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.AttachmentDescription);
                }
                //filename = "\\192.168.71.119\RemoteShare\temp\CRP Attachments\E-CLAIMS\Invoi.xls";
                filename = savefile.FileName.ToString();
                int index = filename.LastIndexOf("\\");
                if (index != -1)
                {
                    string[] seqNum = new string[] { filename.Substring(0, index), filename.Substring(index + 1) };
                    if (seqNum.Length == 2)
                    {
                        filename = seqNum[1].ToString();
                    }
                    else
                    {
                        filename = savefile.FileName.ToString();
                    }
                }
                else
                {
                    filename = savefile.FileName.ToString();
                }


                //GSTPhase3_1

                string filenamenew = Path.GetFileNameWithoutExtension(savefile.FileName);
                if (EmployeeeExpense.AttachmentTypeName == "1")
                {
                    filenamenew = filenamenew.ToLower().Replace("_invoice", "").ToString();
                }
                
                GetConnection();
                DataTable dt1 = new DataTable();
                int invoicegid = 0;
                cmd = new SqlCommand("pr_eow_checkinginvoiceattachment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@filename", SqlDbType.VarChar).Value = filenamenew;
                cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = ecfgid;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt1);
                if (dt1.Rows.Count > 0)
                {
                    invoicegid = Convert.ToInt32(dt1.Rows[0]["invoice_gid"].ToString());
                }

                string[,] codes = new string[,]
	               {
        {"attachment_ref_flag","1" },
	    {"attachment_ref_gid", ecfgid},
        {"attachment_filename",objCmnFunctions.Getreplacesinglequotes(filename.ToString()) },
        {"attachment_attachmenttype_gid",EmployeeeExpense.AttachmentTypeName },
	    {"attachment_desc", AttachmentDescriptiont},
	    {"attachment_date",  "sysdatetime()"},
        {"attachment_by", objCmnFunctions.GetLoginUserGid().ToString()},
        {"attachment_isremoved", "N"},
         {"attachment_invoice_gid", Convert.ToInt32(invoicegid).ToString()}
                  };
                string tname = "iem_trn_tattachment";

                string insertcommend = objCommonIUD.InsertCommon(codes, tname);

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "AttachmentDetailMaxgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["attachment_gid"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string InsertEmpAttinv(HttpPostedFileBase savefile, EOW_File EmployeeeExpense, string ecfgid, string invoicegid, string EmployeeeGid)
        {
            string Emp_Msg = "";
            string AttachmentDescriptiont = "";
            try
            {
                if (EmployeeeExpense.AttachmentDescription != null)
                {
                    AttachmentDescriptiont = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.AttachmentDescription);
                }

                string filename = savefile.FileName.ToString();
                int index = filename.LastIndexOf("\\");
                if (index != -1)
                {
                    string[] seqNum = new string[] { filename.Substring(0, index), filename.Substring(index + 1) };
                    if (seqNum.Length == 2)
                    {
                        filename = seqNum[1].ToString();
                    }
                    else
                    {
                        filename = savefile.FileName.ToString();
                    }
                }
                else
                {
                    filename = savefile.FileName.ToString();
                }

                string[,] codes = new string[,]
	               {
        {"attachment_ref_flag","1" },
	    {"attachment_ref_gid", ecfgid},
        {"attachment_invoice_gid", invoicegid},
        {"attachment_filename",objCmnFunctions.Getreplacesinglequotes(filename.ToString()) },
        {"attachment_attachmenttype_gid",EmployeeeExpense.AttachmentTypeName },
	    {"attachment_desc", AttachmentDescriptiont},
	    {"attachment_date",  "sysdatetime()"},
        {"attachment_by", objCmnFunctions.GetLoginUserGid().ToString()},
        {"attachment_isremoved", "N"}
                  };
                string tname = "iem_trn_tattachment";

                string insertcommend = objCommonIUD.InsertCommon(codes, tname);

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "AttachmentDetailMaxgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["attachment_gid"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string DeleteEmployeeeAttachment(int EmployeeeAttachmentGID, string ecfgid)
        {
            string delant = "0";
            try
            {
                string[,] codes = new string[,]
	               {
        {"attachment_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"attachment_gid",EmployeeeAttachmentGID.ToString() },
        {"attachment_ref_gid",ecfgid }
                  };
                string tname = "iem_trn_tattachment";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string DeletecentralAttachment(string ecfgid)
        {
            string delant = "0";
            try
            {
                string[,] codes = new string[,]
	               {
        {"attachment_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"attachment_ref_gid",ecfgid }
                  };
                string tname = "iem_trn_tattachment";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string downloadAttachment(int EmployeeeAttachmentGID, string ecfgid)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = EmployeeeAttachmentGID;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "AttachmentDetailMaxgname";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["attachment_filename"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetDecnote(string subsype, string type)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = subsype;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Declnote";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    if (type == "S")
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["declnote_onsubmission"].ToString());
                    }
                    else
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["declnote_approval"].ToString());
                    }

                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string[] ecfclaimappvoltoid()
        {
            string[] stremp = new string[2];
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getcoappvol";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    stremp[0] = dt.Rows[0]["Queue_to"].ToString();
                    stremp[1] = dt.Rows[0]["Queue_type"].ToString();
                }
                else
                {
                    stremp[0] = "0";
                    stremp[1] = "E";
                }
                return stremp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return stremp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        /*  public string Insertecf(EOW_EmployeeeExpense EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
          {
              string Emp_designation = "";
              string Emp_Msg = "";
              string queue_gid = "";
              string debit_gid = "";
              string Emp_Msgecfremark = "";
              string Emp_Msgsuper = "";
              string insertcommend = "";
              string ecfDescriptiont = "";

              try
              {
                  //ecf date update
                  GetConnection();
                  DataTable dt1 = new DataTable();
                  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                  cmd.CommandType = CommandType.StoredProcedure;
                  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetECFNo";
                  da = new SqlDataAdapter(cmd);
                  da.Fill(dt1);
                  if (dt1.Rows.Count > 0)
                  {

                      ecf_no1 = dt1.Rows[0][0].ToString();
                  }
                  if (string.IsNullOrEmpty(ecf_no1))
                  {
                      if (!string.IsNullOrEmpty(EmployeeeExpenseModel.ECF_Date))
                      {
                          string[,] codesUP1 = new string[,]
                          {
                              {"ecf_date", objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString()},
                              //{"ecf_insert_by", objCmnFunctions.GetLoginUserGid().ToString()}
                                     
                          };
                          string[,] whcosup1 = new string[,]
                          {
                                      
                              {"ecf_gid", ecfgid}
                          };
                          string tnameUP1 = "iem_trn_tecf";
                          string insertcommendUP1 = objCommonIUD.UpdateCommon(codesUP1, whcosup1, tnameUP1);
                      }

                  }
                  //
                  string Ecfdesignation = Convert.ToString(ConfigurationManager.AppSettings["Ecfdesignation"].ToString());
                  if (EmployeeeExpenseModel.ecfremark != null)
                  {
                      ecfDescriptiont = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark);
                  }
                  GetConnection();
                  DataTable dtempsup = new DataTable();
                  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                  cmd.CommandType = CommandType.StoredProcedure;
                  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = eempid;
                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpSupper";
                  da = new SqlDataAdapter(cmd);
                  da.Fill(dtempsup);
                  if (dtempsup.Rows.Count > 0)
                  {
                      Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["employee_supervisor"].ToString());
                      Emp_designation = Convert.ToString(dtempsup.Rows[0]["employee_iem_designation"].ToString());

                      GetConnection();
                      cmd = new SqlCommand("pr_ecfdelmat", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                      cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(Emp_Msgsuper.ToString());

                      cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                      cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                      cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                      cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                      cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                      cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;


                      cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                      cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                      cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                      cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                      cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                      cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;

                      cmd.ExecuteNonQuery();

                      var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                      var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                      var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                      var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                      var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                      var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);


                      if (Emp_designation == Ecfdesignation)
                      {
                          demmatresult = "1";
                          string[] stremp = ecfclaimappvoltoid();
                          result = stremp[0].ToString();
                          Flag = stremp[1].ToString();
                          if (result == "0")
                          {
                              Emp_Msg = "Invalid User.";
                              return Emp_Msg;
                          }
                      }

                      if (demmatresult == "" || result == "")
                      {
                          //Emp_Msg = ecferrors + "-" + sqlerrors; //////////---old
                          Emp_Msg = sqlerrors;
                          return Emp_Msg;
                      }
                      else if (demmatresult != "0" && demmatresult != "")
                      {
                          Emp_Msgsuper = result.ToString();
                      }
                      if (Emp_Msgsuper != "")
                      {
                          if (clam.ToString().Trim() == "T" || clam.ToString().Trim() == "E")
                          {
                              GetConnection();
                              DataTable dt = new DataTable();
                              cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                              cmd.CommandType = CommandType.StoredProcedure;
                              cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                              cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceGid;
                              cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpExpensetravel";
                              da = new SqlDataAdapter(cmd);
                              da.Fill(dt);
                              if (dt.Rows.Count > 0)
                              {
                                  string[,] codesup = new string[,]
                     {	    
                            {"ecfdebitline_isremoved","Y" }
                    };
                                  string[,] whcosup = new string[,]
                     {
                             {"ecfdebitline_ecf_gid",ecfgid },
                             {"ecfdebitline_invoice_gid", invoiceGid}
                    };
                                  string tnameup = "iem_trn_tecfdebitline";
                                  insertcommend = objCommonIUD.UpdateCommon(codesup, whcosup, tnameup);
                              }
                              for (int i = 0; i < dt.Rows.Count; i++)
                              {
                                  string[,] codes = new string[,]
                     {
          {"ecfdebitline_ecf_gid",ecfgid },
          {"ecfdebitline_invoice_gid", invoiceGid},
          {"ecfdebitline_expnature_gid",dt.Rows[i]["ecftravel_expnature_gid"].ToString() },
          {"ecfdebitline_expcat_gid", dt.Rows[i]["ecftravel_expcat_gid"].ToString()},
          {"ecfdebitline_expsubcat_gid",dt.Rows[i]["ecftravel_expsubcat_gid"].ToString() },
          {"ecfdebitline_gl_no", dt.Rows[i]["ecftravel_gl_no"].ToString()},
          {"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(dt.Rows[i]["ecftravel_date_from"].ToString() ).ToString()},
          {"ecfdebitline_period_to", objCmnFunctions.convertoDateTimeString(dt.Rows[i]["ecftravel_date_to"].ToString()).ToString()},
          {"ecfdebitline_fc_code",dt.Rows[i]["ecftravel_fc"].ToString() },
          {"ecfdebitline_cc_code", dt.Rows[i]["ecftravel_cc"].ToString()},
          {"ecfdebitline_product_code", dt.Rows[i]["ecftravel_product_code"].ToString()},
          {"ecfdebitline_ou_code",dt.Rows[i]["ecftravel_ou_code"].ToString() },
          {"ecfdebitline_amount", dt.Rows[i]["ecftravel_amount"].ToString()}       
                    };
                                  string tname = "iem_trn_tecfdebitline";
                                  insertcommend = objCommonIUD.InsertCommon(codes, tname);

                                  GetConnection();
                                  DataTable dtup = new DataTable();
                                  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                  cmd.CommandType = CommandType.StoredProcedure;
                                  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                                  cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceGid;
                                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpExpensetravelid";
                                  da = new SqlDataAdapter(cmd);
                                  da.Fill(dtup);
                                  if (dtup.Rows.Count > 0)
                                  {
                                      debit_gid = Convert.ToString(dtup.Rows[0]["ecfdebitline_gid"].ToString());
                                  }

                                  if (debit_gid != "")
                                  {

                                      string[,] codesup = new string[,]
                     {	    
          {"ecftravel_ecfdebitline_gid",debit_gid.ToString() }
                    };
                                      string[,] whcosup = new string[,]
                     {
          {"ecftravel_gid",dt.Rows[i]["ecftravel_gid"].ToString() }
                    };
                                      string tnameup = "iem_trn_tecftravel";
                                      insertcommend = objCommonIUD.UpdateCommon(codesup, whcosup, tnameup);
                                  }
                              }
                          }
                          else if (clam.ToString().Trim() == "L")
                          {
                              GetConnection();
                              string DelmatMaxAmount = "";
                              cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                              cmd.CommandType = CommandType.StoredProcedure;
                              cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                              cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxDelmatAmount";
                              DelmatMaxAmount = Convert.ToString(cmd.ExecuteScalar());

                              string[,] codesUPecf = new string[,]
                     {
          {"ecf_currency_amount", EmployeeeExpenseModel.Exp_Amount.ToString()},
          {"ecf_amount", EmployeeeExpenseModel.Exp_Amount.ToString()},
          {"ecf_travelpersoncount", EmployeeeExpenseModel.noofperson.ToString()},
          //{"ecf_delmat_amount", invoiceGid.ToString()},
          {"ecf_delmat_amount", DelmatMaxAmount.ToString()},
          {"ecf_claim_month", objCmnFunctions.convertoDateTimeString(HttpContext.Current.Session["EcfDatemainmonth"].ToString())},
          {"ecf_remark", ecfDescriptiont}
                    };
                              string[,] whcosupecf = new string[,]
                     {
          {"ecf_gid", ecfgid}
                    };
                              string tnameUPecf = "iem_trn_tecf";
                              string insertcommendUP = objCommonIUD.UpdateCommon(codesUPecf, whcosupecf, tnameUPecf);

                              GetConnection();
                              DataTable dt = new DataTable();
                              cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                              cmd.CommandType = CommandType.StoredProcedure;
                              cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                              cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpExpensetravel";
                              da = new SqlDataAdapter(cmd);
                              da.Fill(dt);
                              if (dt.Rows.Count > 0)
                              {
                                  string[,] codesup = new string[,]
                     {	    
                            {"ecfdebitline_isremoved","Y" }
                    };
                                  string[,] whcosup = new string[,]
                     {
                             {"ecfdebitline_ecf_gid",ecfgid },
                    };
                                  string tnameup = "iem_trn_tecfdebitline";
                                  insertcommend = objCommonIUD.UpdateCommon(codesup, whcosup, tnameup);
                              }
                              for (int i = 0; i < dt.Rows.Count; i++)
                              {
                                  string[,] codes = new string[,]
                     {
          {"ecfdebitline_ecf_gid",ecfgid },
          {"ecfdebitline_invoice_gid", dt.Rows[i]["ecftravel_invoice_gid"].ToString()},
          {"ecfdebitline_expnature_gid",dt.Rows[i]["ecftravel_expnature_gid"].ToString() },
          {"ecfdebitline_expcat_gid", dt.Rows[i]["ecftravel_expcat_gid"].ToString()},
          {"ecfdebitline_expsubcat_gid",dt.Rows[i]["ecftravel_expsubcat_gid"].ToString() },
          {"ecfdebitline_gl_no", dt.Rows[i]["ecftravel_gl_no"].ToString()},
          {"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(dt.Rows[i]["ecftravel_date_from"].ToString() ).ToString()},
          {"ecfdebitline_period_to", objCmnFunctions.convertoDateTimeString(dt.Rows[i]["ecftravel_date_to"].ToString()).ToString()},
          {"ecfdebitline_fc_code",dt.Rows[i]["ecftravel_fc"].ToString() },
          {"ecfdebitline_cc_code", dt.Rows[i]["ecftravel_cc"].ToString()},
          {"ecfdebitline_product_code", dt.Rows[i]["ecftravel_product_code"].ToString()},
          {"ecfdebitline_ou_code",dt.Rows[i]["ecftravel_ou_code"].ToString() },
          {"ecfdebitline_amount", dt.Rows[i]["ecftravel_amount"].ToString()}       
                    };
                                  string tname = "iem_trn_tecfdebitline";
                                  insertcommend = objCommonIUD.InsertCommon(codes, tname);

                                  GetConnection();
                                  DataTable dtup = new DataTable();
                                  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                  cmd.CommandType = CommandType.StoredProcedure;
                                  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                                  cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = dt.Rows[i]["ecftravel_invoice_gid"].ToString();
                                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpExpensetravelid";
                                  da = new SqlDataAdapter(cmd);
                                  da.Fill(dtup);
                                  if (dtup.Rows.Count > 0)
                                  {
                                      debit_gid = Convert.ToString(dtup.Rows[0]["ecfdebitline_gid"].ToString());
                                  }

                                  if (debit_gid != "")
                                  {

                                      string[,] codesup = new string[,]
                     {	    
          {"ecftravel_ecfdebitline_gid",debit_gid.ToString() }
                    };
                                      string[,] whcosup = new string[,]
                     {
          {"ecftravel_gid",dt.Rows[i]["ecftravel_gid"].ToString() }
                    };
                                      string tnameup = "iem_trn_tecftravel";
                                      insertcommend = objCommonIUD.UpdateCommon(codesup, whcosup, tnameup);
                                  }
                              }
                          }
                          else if (clam.ToString().Trim() == "D")
                          {
                              string[,] codesUPecf = new string[,]
                     {
          {"ecf_currency_amount", EmployeeeExpenseModel.Exp_Amount.ToString()},
          {"ecf_amount", EmployeeeExpenseModel.Exp_Amount.ToString()},
          {"ecf_delmat_amount", EmployeeeExpenseModel.Exp_Amount.ToString()},
          {"ecf_claim_month", objCmnFunctions.convertoDateTimeString(HttpContext.Current.Session["EcfDatemainmonth"].ToString())},
          {"ecf_remark", ecfDescriptiont}
                    };
                              string[,] whcosupecf = new string[,]
                     {
          {"ecf_gid", ecfgid}
                    };
                              string tnameUPecf = "iem_trn_tecf";
                              string insertcommendUP = objCommonIUD.UpdateCommon(codesUPecf, whcosupecf, tnameUPecf);
                          }

                          if (EmployeeeExpenseModel.ecfremark == null)
                          {
                              Emp_Msgecfremark = "";
                          }
                          else
                          {
                              Emp_Msgecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());

                          }
                          int ecf_statusaction = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
                          int ecf_status = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                          insertcommend = "Success";
                          if (insertcommend != "")
                          {
                              if (queid.ToString().Trim() != "")
                              {
                                  string[,] codesq = new string[,]
                                 {
                        {"queue_isremoved","Y"},
                        {"queue_action_date","sysdatetime()"},
                        {"queue_action_by",eempid.ToString() },
                        {"queue_action_status",ecf_statusaction.ToString() },
                        {"queue_action_remark",Emp_Msgecfremark.ToString() }
                                };
                                  string[,] whreq = new string[,]
                                 {
                      {"queue_gid",queid.ToString() }
                                };
                                  string tnameq = "iem_trn_tqueue";
                                  string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);
                                  insertcommend = "Success";
                                  if (insertcommend == "Success")
                                  {
                                      GetConnection();
                                      DataTable dt = new DataTable();
                                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                      cmd.CommandType = CommandType.StoredProcedure;
                                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetECFNo";
                                      da = new SqlDataAdapter(cmd);
                                      da.Fill(dt);
                                      if (dt.Rows.Count > 0)
                                      {
                                          Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_no"].ToString());
                                          Emp_Msg = "ECF Number is : " + Emp_Msg;
                                      }
                                  }
                              }
                              else
                              {
                                  GetConnection();
                                  cmd = new SqlCommand("pr_eow_trn_tecf", con);
                                  cmd.CommandType = CommandType.StoredProcedure;
                                  cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                  cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = Emp_Msgecfremark;
                                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "edit";
                                  int data = cmd.ExecuteNonQuery();
                                  insertcommend = "Success";
                                  if (insertcommend == "Success")
                                  {
                                      GetConnection();
                                      DataTable dt = new DataTable();
                                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                      cmd.CommandType = CommandType.StoredProcedure;
                                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetECFNo";
                                      da = new SqlDataAdapter(cmd);
                                      da.Fill(dt);
                                      if (dt.Rows.Count > 0)
                                      {
                                          Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_no"].ToString());
                                          Emp_Msg = "ECF Number is : " + Emp_Msg;
                                      }
                                  }
                              }


                              string[,] codes = new string[,]
                     {
          {"queue_date","sysdatetime()"},
          {"queue_ref_flag", "1"},
          {"queue_ref_gid",ecfgid },
          {"queue_ref_status", ecf_status.ToString()},
          {"queue_from",eempid },
          {"queue_to_type", Flag.ToString()},
          {"queue_to",Emp_Msgsuper.ToString()},
          {"queue_action_for", "A"},    
          {"queue_prev_gid", queid},
          {"Additional_flag", Additionalflagnew.ToString()}
                    };

                              string tname = "iem_trn_tqueue";

                              string insertcommendecf = objCommonIUD.InsertCommon(codes, tname);

                              if (insertcommendecf == "success")
                              {
                                  GetConnection();
                                  DataTable dtempsupnew = new DataTable();
                                  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                  cmd.CommandType = CommandType.StoredProcedure;
                                  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = eempid;
                                  cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                                  da = new SqlDataAdapter(cmd);
                                  da.Fill(dtempsupnew);
                                  if (dtempsupnew.Rows.Count > 0)
                                  {
                                      queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                                  }
                                  if (queue_gid != "")
                                  {
                                      string[,] codesUP = new string[,]
                     {
          {"ecf_queue_gid", queue_gid},
          {"ecf_queue_to_type","E" },
          {"ecf_queue_to", Emp_Msgsuper},
          {"ecf_status",ecf_status.ToString() },
          {"ecf_all_status",ecf_status.ToString() },
          {"ecf_urgent_flag","N"},
          {"ecf_action_by",user },
          {"ecf_action_date","sysdatetime()"}
                    };
                                      string[,] whcosup = new string[,]
                     {
          {"ecf_raiser",user },
          {"ecf_gid", ecfgid}
                    };
                                      string tnameUP = "iem_trn_tecf";

                                      string insertcommendUP = objCommonIUD.UpdateCommon(codesUP, whcosup, tnameUP);
                                  }

                                  string mail = queue_gid.ToString();
                                  GetConnection();
                                  DataTable dtdoctype = new DataTable();
                                  cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                  cmd.CommandType = CommandType.StoredProcedure;
                                  cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                  da = new SqlDataAdapter(cmd);
                                  da.Fill(dtdoctype);
                                  if (dtdoctype.Rows.Count > 0)
                                  {
                                      string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                      doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                      mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                                  }

                              }


                          }
                      }
                      else
                      {
                          //Emp_Msg = ecferrors + "-" + sqlerrors;
                          Emp_Msg = sqlerrors;
                          return Emp_Msg;
                      }
                  }
                  else
                  {
                      Emp_Msg = "There is No supervisor...";
                      return Emp_Msg;
                  }
                  return Emp_Msg;
              }
              catch (Exception ex)
              {
                  objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                  return "";
              }
              finally
              {
                  con.Close();
                  da.Dispose();
              }
          }*/

        /* public string Insertecf(EOW_EmployeeeExpense EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
         {
             try
             {
                 string Emp_Msgsuper = "";
                 string errormsg = "";
                 string noofperson = "";
                 string ecfdate = "";
                 string ecfclaimdate = "";
                 GetConnection();
                 DataTable dtempsup = new DataTable();
                 cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                 cmd.CommandType = CommandType.StoredProcedure;
                 cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = eempid;
                 cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpSupper";
                 da = new SqlDataAdapter(cmd);
                 da.Fill(dtempsup);
                 if (dtempsup.Rows.Count > 0)
                 {
                     Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["employee_supervisor"].ToString());
                 }
                 if (clam.ToString().Trim() == "T" || clam.ToString().Trim() == "E")
                 {
                     noofperson = "0";
                     ecfclaimdate = "";
                 }
                 else
                 {
                     noofperson = EmployeeeExpenseModel.noofperson == null ? "0" : EmployeeeExpenseModel.noofperson.ToString();
                     ecfclaimdate = objCmnFunctions.convertoDateTimeString(HttpContext.Current.Session["EcfDatemainmonth"].ToString());
                 }
                 if (Emp_Msgsuper != "")
                 {
                     GetConnection();
                     cmd = new SqlCommand("pr_eow_ecfSubmit", con);
                     cmd.CommandType = CommandType.StoredProcedure;
                     cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                     if (clam == "L")
                     {
                         cmd.Parameters.Add("@invoiceGid", SqlDbType.Int).Value = 0;
                     }
                     else
                     {
                         cmd.Parameters.Add("@invoiceGid", SqlDbType.Int).Value = Convert.ToInt32(invoiceGid);
                     }

                     cmd.Parameters.Add("@user", SqlDbType.Int).Value = Convert.ToInt32(user);
                     cmd.Parameters.Add("@eempid", SqlDbType.Int).Value = Convert.ToInt32(eempid);
                     cmd.Parameters.Add("@clam", SqlDbType.VarChar).Value = clam.ToString();
                     cmd.Parameters.Add("@queid", SqlDbType.VarChar).Value = queid.ToString();
                     if (!string.IsNullOrEmpty(EmployeeeExpenseModel.ECF_Date))
                     {
                         ecfdate = objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString();
                     }
                     cmd.Parameters.Add("@ecfdate", SqlDbType.VarChar).Value = ecfdate;
                     cmd.Parameters.Add("@Eecfdesignation", SqlDbType.VarChar).Value = Convert.ToString(ConfigurationManager.AppSettings["Ecfdesignation"].ToString()); ;
                     cmd.Parameters.Add("@ecf_currency_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Exp_Amount.ToString();
                     cmd.Parameters.Add("@ecf_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Exp_Amount.ToString();
                     cmd.Parameters.Add("@ecf_travelpersoncount", SqlDbType.VarChar).Value = noofperson;
                     cmd.Parameters.Add("@ecf_claim_month", SqlDbType.VarChar).Value = ecfclaimdate;
                     cmd.Parameters.Add("@ecf_delmat_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Exp_Amount.ToString();
                     cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark == null ? "" : EmployeeeExpenseModel.ecfremark);
                     cmd.Parameters.Add("@ecf_statusaction", SqlDbType.Int).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString()); ;
                     cmd.Parameters.Add("@EcfInprocess", SqlDbType.VarChar).Value = ConfigurationManager.AppSettings["EcfInprocess"].ToString();
                     cmd.Parameters.Add("@queue_gid", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@errormsg", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@ecfoutput", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                     cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                     cmd.ExecuteNonQuery();

                     var errormsgs = Convert.ToString(cmd.Parameters["@errormsg"].Value);
                     errormsg = errormsgs.ToString();
                     if (errormsg == "")
                     {
                         errormsgs = Convert.ToString(cmd.Parameters["@ecfoutput"].Value);
                         errormsg = "ECF Number is : " + errormsgs.ToString();

                         var queue_gid = Convert.ToString(cmd.Parameters["@queue_gid"].Value);
                         string mail = queue_gid.ToString();
                         GetConnection();
                         DataTable dtdoctype = new DataTable();
                         cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                         cmd.CommandType = CommandType.StoredProcedure;
                         cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                         cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                         da = new SqlDataAdapter(cmd);
                         da.Fill(dtdoctype);
                         if (dtdoctype.Rows.Count > 0)
                         {
                             string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                             doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                             mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                         }
                     }
                     else
                     {
                         if (errormsg == "InvAmount")
                         {
                             return errormsg;
                         }
                         else
                         {

                             errormsg = "There is No supervisor...";
                             return errormsg;
                         }
                     }
                 }
                 else
                 {
                     errormsg = "There is No supervisor...";
                     return errormsg;
                 }
                 return errormsg;
             }
             catch (Exception ex)
             {
                 objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                 return "";
             }
             finally
             {
                 con.Close();
                 da.Dispose();
             }
         }*/

        public string Insertecf(EOW_EmployeeeExpense EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
        {
            string errormsg = "";
            try
            {

                //vadivu add
                string EcfGid = ecfgid;
                //end
                string Emp_Msgsuper = "";

                string noofperson = "";
                string ecfdate = "";
                string ecfclaimdate = "";
                GetConnection();
                DataTable dtempsup = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = eempid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpSupper";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtempsup);
                if (dtempsup.Rows.Count > 0)
                {
                    Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["employee_supervisor"].ToString());
                }
                if (clam.ToString().Trim() == "T" || clam.ToString().Trim() == "E")
                {
                    noofperson = "0";
                    ecfclaimdate = "";
                }
                else
                {
                    noofperson = EmployeeeExpenseModel.noofperson == null ? "0" : EmployeeeExpenseModel.noofperson.ToString();
                    ecfclaimdate = objCmnFunctions.convertoDateTimeString(HttpContext.Current.Session["EcfDatemainmonth"].ToString());
                }
                if (Emp_Msgsuper != "")
                {
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_ecfSubmit", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                    if (clam == "L")
                    {
                        cmd.Parameters.Add("@invoiceGid", SqlDbType.Int).Value = 0;
                    }
                    else
                    {
                        cmd.Parameters.Add("@invoiceGid", SqlDbType.Int).Value = Convert.ToInt32(invoiceGid);
                    }

                    cmd.Parameters.Add("@user", SqlDbType.Int).Value = Convert.ToInt32(user);
                    cmd.Parameters.Add("@eempid", SqlDbType.Int).Value = Convert.ToInt32(eempid);
                    cmd.Parameters.Add("@clam", SqlDbType.VarChar).Value = clam.ToString();
                    cmd.Parameters.Add("@queid", SqlDbType.VarChar).Value = queid.ToString();
                    if (!string.IsNullOrEmpty(EmployeeeExpenseModel.ECF_Date))
                    {
                        ecfdate = objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString();
                    }
                    cmd.Parameters.Add("@ecfdate", SqlDbType.VarChar).Value = ecfdate;
                    cmd.Parameters.Add("@Eecfdesignation", SqlDbType.VarChar).Value = Convert.ToString(ConfigurationManager.AppSettings["Ecfdesignation"].ToString()); ;
                    cmd.Parameters.Add("@ecf_currency_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Exp_Amount.ToString();
                    cmd.Parameters.Add("@ecf_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Exp_Amount.ToString();
                    cmd.Parameters.Add("@ecf_travelpersoncount", SqlDbType.VarChar).Value = noofperson;
                    cmd.Parameters.Add("@ecf_claim_month", SqlDbType.VarChar).Value = ecfclaimdate;
                    cmd.Parameters.Add("@ecf_delmat_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Exp_Amount.ToString();
                    cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark == null ? "" : EmployeeeExpenseModel.ecfremark);
                    cmd.Parameters.Add("@ecf_statusaction", SqlDbType.Int).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString()); ;
                    cmd.Parameters.Add("@EcfInprocess", SqlDbType.VarChar).Value = ConfigurationManager.AppSettings["EcfInprocess"].ToString();
                    cmd.Parameters.Add("@queue_gid", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@errormsg", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@ecfoutput", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("@clear", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                    //cmd.CommandTimeout = 0;
                    cmd.ExecuteNonQuery();

                    var errormsgs = Convert.ToString(cmd.Parameters["@errormsg"].Value);
                    var clear = Convert.ToString(cmd.Parameters["@clear"].Value);
                    errormsg = errormsgs.ToString();
                    if (clear == "1")
                    {
                        errormsgs = Convert.ToString(cmd.Parameters["@ecfoutput"].Value);
                        errormsg = "ECF Number is : " + errormsgs.ToString();
                    }
                    else
                    {
                        errormsg = errormsgs.ToString();
                    }

                    var queue_gid = Convert.ToString(cmd.Parameters["@queue_gid"].Value);
                    string doctypeid = "0";
                    string mail = queue_gid.ToString();
                    GetConnection();
                    DataSet dats = new DataSet();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dats);
                    if (dats.Tables[0].Rows.Count > 0)
                    {
                        doctypeid = Convert.ToString(dats.Tables[0].Rows[0]["docsubtype_gid"].ToString());
                        doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                       // mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");

                        //vadivu add
                        int PrGid = 0; string pogid = "pogid"; string cbfgid = "cbfgid"; int WoGid = 0;
                        mailsender.sendusermailEOW("EOW", doctypeid, mail, "S", "0", EcfGid, PrGid, pogid, cbfgid, WoGid);
                  

                    }

                   /* if (dats.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i < dats.Tables[1].Rows.Count; i++)
                        {
                            string queueidformail = Convert.ToString(dats.Tables[1].Rows[0]["queue_gid"].ToString());
                            //old
                           // mailsender.sendusermail("EOW", doctypeid, queueidformail, "A", "0");
                            //vadivu add
                            int PrGid = 0; string pogid = "pogid"; string cbfgid = "cbfgid"; int WoGid = 0;
                            mailsender.sendusermailEOW("EOW", doctypeid, mail, "S", "0", EcfGid, PrGid, pogid, cbfgid, WoGid);
                  
                            //end
                        }
                    } */ // ramya commentted on 16 Nov 22 to avoid duplicate email.

                }
                return errormsg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_TravelCity> tTravelcitydata()
        {
            List<EOW_TravelCity> objNatureofExpenses = new List<EOW_TravelCity>();
            try
            {

                EOW_TravelCity objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetCity";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelCity();
                    objModel.TravelCityId = Convert.ToInt32(dt.Rows[i]["city_gid"].ToString());
                    objModel.TravelCityName = Convert.ToString(dt.Rows[i]["city_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_citys> tTravelcitydataauto(string cityname)
        {
            List<EOW_citys> objNatureofExpenses = new List<EOW_citys>();
            try
            {

                EOW_citys objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = cityname;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "AUTOCOMPLETECITY";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_citys();
                    objModel.citysId = Convert.ToString(dt.Rows[i]["city_code"].ToString());
                    objModel.citysName = Convert.ToString(dt.Rows[i]["cityname"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelMode> tTravelModedata()
        {
            List<EOW_TravelMode> objNatureofExpenses = new List<EOW_TravelMode>();
            try
            {

                EOW_TravelMode objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetTravelmode";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                objNatureofExpenses.Add(new EOW_TravelMode { TravelModeId = 0, TravelModeName = "--Select--", });
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelMode();
                    objModel.TravelModeId = Convert.ToInt32(dt.Rows[i]["transport_gid"].ToString());
                    objModel.TravelModeName = Convert.ToString(dt.Rows[i]["transport_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClass> tTravelClassdatadata(int id)
        {
            List<EOW_TravelClass> objExpenseCategory = new List<EOW_TravelClass>();
            try
            {

                EOW_TravelClass objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = id.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetTravelclass";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClass();
                    objModel.TravelClassId = Convert.ToInt32(dt.Rows[i]["transportclass_gid"].ToString());
                    objModel.TravelClassName = Convert.ToString(dt.Rows[i]["transportclass_name"].ToString());
                    objExpenseCategory.Add(objModel);
                }

                return objExpenseCategory;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpenseCategory;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> tSelectEmployeeeBasic(string empcode)
        {
            List<EOW_TravelClaim> objNatureofExpenses = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empcode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmployeeeBasic";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.FC = Convert.ToString(dt.Rows[0]["employee_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[0]["employee_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[0]["employee_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[0]["employee_ou_code"].ToString());
                    objModel.Exp_FCCC = Convert.ToString(dt.Rows[0]["fccc_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                else
                {
                    objModel = new EOW_TravelClaim();
                    objModel.FC = "";
                    objModel.CC = "";
                    objModel.ProductCode = "";
                    objModel.OUCode = "";
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetTravelModedata(string ecfid, string invoiceid, string traveltype)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetTravelDetail";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecftravel_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.PlaceFrom = Convert.ToString(dt.Rows[i]["ecftravel_city_from"].ToString());
                    objModel.ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecfdebitline_period_from"].ToString());
                    objModel.ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecfdebitline_period_to"].ToString());
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecftravel_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecftravel_fc"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecftravel_cc"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecftravel_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecftravel_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.PlaceTo = Convert.ToString(dt.Rows[i]["ecftravel_city_to"].ToString());

                    objModel.Distance = Convert.ToString(dt.Rows[i]["ecftravel_distance"].ToString());
                    objModel.Rate = Convert.ToString(dt.Rows[i]["ecftravel_rate"].ToString());
                    objModel.TravelModeName = Convert.ToString(dt.Rows[i]["transport_name"].ToString());
                    objModel.TravelClassName = Convert.ToString(dt.Rows[i]["transportclass_name"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["HsnId"].ToString());
                    objModel.TravelHsnCode = dt.Rows[i]["HsnCode"].ToString();
                    objModel.TravelHsnDesc = dt.Rows[i]["HsnDesc"].ToString();

                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public List<EOW_Employeelst> getemployeedetails()
        {
            List<EOW_Employeelst> obj = new List<EOW_Employeelst>();
            try
            {
                GetConnection();
                DataTable objtable = new DataTable();

                EOW_Employeelst objproject;
                cmd = new SqlCommand("pr_fb_iem_mst_employee", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@actionName", "selectwithbranch");
                da = new SqlDataAdapter(cmd);
                da.Fill(objtable);
                foreach (DataRow row in objtable.Rows)
                {
                    objproject = new EOW_Employeelst();
                    objproject.employeeGid = Convert.ToInt32(row["employee_gid"]);
                    objproject.empCode = row["employee_code"].ToString();
                    objproject.empName = row["employee_name"].ToString();
                    objproject.empbranch = row["branch_gid"].ToString();
                    objproject.empfc = row["employee_fc_code"].ToString();
                    objproject.empcc = row["employee_cc_code"].ToString();
                    objproject.empgrade = row["employee_grade_code"].ToString();
                    obj.Add(objproject);
                }
                return obj;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return obj;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_Employeelst> GetEmployeeelist(string ecfgid)
        {
            List<EOW_Employeelst> objNatureofExpenses = new List<EOW_Employeelst>();
            try
            {

                EOW_Employeelst objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmployeeelist";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_Employeelst();
                    objModel.employeeGid = Convert.ToInt32(row["ecfperson_gid"]);
                    objModel.empCode = row["employee_code"].ToString();
                    objModel.empName = row["employee_name"].ToString();
                    objModel.empbranch = row["branch_name"].ToString();
                    objModel.empfc = row["employee_fc_code"].ToString();
                    objModel.empcc = row["employee_cc_code"].ToString();
                    objModel.maingid = row["employee_gid"].ToString();
                    objModel.sign = "";
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertTravelModeCreate(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid)
        {
            string output = "";
            string Emp_Msg = "0";
            string Emp_Msgbrnch = "0";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            string Emp_Msgrate = "0";
            string Emp_Msgdis = "0";
            string Emp_Msgtmode = "";
            string Emp_Msgtclass = "";
            string Emp_MsgtTraveltypes = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                GetConnection();
                DataTable dtfc = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@BranchCode", SqlDbType.VarChar).Value = oussp[0].ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getbussinesssegment";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtfc);
                string FcCode;
                if (dtfc.Rows.Count > 0)
                {
                    FcCode = dtfc.Rows[0]["branch_businesssegement"].ToString();
                }
                else
                {
                    FcCode = EmployeeeExpense.FC;
                }

                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.Rate != null)
                {
                    Emp_Msgrate = EmployeeeExpense.Rate;
                }
                else
                {
                    Emp_Msgrate = "0";
                }
                if (EmployeeeExpense.Distance != null)
                {
                    Emp_Msgdis = EmployeeeExpense.Distance;
                }
                else
                {
                    Emp_Msgdis = "0";
                }
                if (EmployeeeExpense.TravelModeName != "0" && EmployeeeExpense.TravelModeName != null)
                {
                    Emp_Msgtmode = EmployeeeExpense.TravelModeName;
                }
                else
                {
                    Emp_Msgtmode = "";
                }
                if (EmployeeeExpense.TravelClassName != "0" && EmployeeeExpense.TravelClassName != null)
                {
                    Emp_Msgtclass = EmployeeeExpense.TravelClassName;
                }
                else
                {
                    Emp_Msgtclass = "";
                }
                if (EmployeeeExpense.Traveltypes == "T" || EmployeeeExpense.Traveltypes == "O")
                {
                    Emp_MsgtTraveltypes = "T";
                    status = GetStatusexcelduplicate(
                                                EmployeeeExpense.NatureofExpensesName,
                                                EmployeeeExpense.ExpenseCategoryName,
                                                EmployeeeExpense.SubCategoryName,
                                                empgid,
                                                EmployeeeExpense.ClaimPeriodFrom,
                                                EmployeeeExpense.ClaimPeriodTo,
                                                EmployeeeExpense.Amount,
                                                "", "", "", "", "localconduplicatet"
                                                );
                    if (status == "Exists")
                    {
                        output = "Duplicatedate";
                    }
                    else
                    {
                        output = "valid";
                    }
                }
                else
                {
                    Emp_MsgtTraveltypes = "O";
                    output = "valid";
                }
                if (output == "valid")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILS", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.InvGid);
                    cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                    cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                    cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = Emp_Msgtmode;
                    cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = Emp_Msgtclass;
                    cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                    cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                    cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                    cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString();
                    cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString();
                    cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = Emp_Msgdis;
                    cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Emp_Msgrate;
                    cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = FcCode;
                    cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.TravelHsnid;
                    //Ramya Added
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msgretn = (dt.Rows[0]["Message"].ToString());

                        //selva 09-12-2020
                        GetConnection();
                        DataTable dtSplit = new DataTable();
                        cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = Convert.ToInt32(EmployeeeExpense.InvGid); ;
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtSplit);
                    }
                    else
                    {
                        Emp_Msgretn = "Failed";
                    }
                    return Emp_Msgretn;
                }
                else
                {
                    Emp_Msgretn = "duplicate";
                    return Emp_Msgretn;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string InsertOtherTravelCreate(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid)
        {
            string Emp_Msg = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgbrnch = "";
            string Emp_Msgdesc = "";
            string Emp_MsgtTraveltypes = "0";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                if (status != "notexists")
                {
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_trn_mailckeck", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@modulecode", SqlDbType.VarChar).Value = EmployeeeExpense.FC.ToString();
                    cmd.Parameters.Add("@mailtypename", SqlDbType.VarChar).Value = EmployeeeExpense.CC.ToString();
                    cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "Empfccc";
                    status = (string)cmd.ExecuteScalar();
                    if (status == "notexists")
                    {
                        Emp_Msgretn = "Invalid Function Code and Cost Code";
                        return Emp_Msgretn;
                    }
                }
                status = GetStatusexcel(EmployeeeExpense.ProductCode.ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.OUCode.ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpCatGL";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }
                //GetConnection();
                //DataTable dtbranch = new DataTable();
                //cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                //cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                //cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpBranch";
                //da = new SqlDataAdapter(cmd);
                //da.Fill(dtbranch);
                //if (dtbranch.Rows.Count > 0)
                //{
                //    Emp_Msgbrnch = Convert.ToString(dtbranch.Rows[0]["employee_branch_gid"].ToString());
                //}
                //if (EmployeeeExpense.travelDescription != null)
                //{
                //    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                //}
                //else
                //{
                //    Emp_Msgdesc = "";
                //}
                //string[,] codes = new string[,]
                //   {
                //    {"ecftravel_ecf_gid",ecfgid },
                //    {"ecftravel_invoice_gid", invoicegid},
                //    {"ecftravel_expnature_gid",EmployeeeExpense.NatureofExpensesName },
                //    {"ecftravel_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
                //    {"ecftravel_expsubcat_gid",EmployeeeExpense.SubCategoryName },
                //    {"ecftravel_employee_gid", empgid},
                //    {"ecftravel_branch_gid", Emp_Msgbrnch},

                //    {"ecftravel_type", "E"},     
                //    {"ecftravel_city_from", EmployeeeExpense.PlaceFrom},
                //    {"ecftravel_gl_no", Emp_Msg},
                //    {"ecftravel_desc", Emp_Msgdesc},

                //    {"ecftravel_date_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom ).ToString()},
                //    {"ecftravel_date_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString()},
                //    {"ecftravel_fc",EmployeeeExpense.FC },
                //    {"ecftravel_cc", EmployeeeExpense.CC},
                //    {"ecftravel_product_code", EmployeeeExpense.ProductCode},
                //    {"ecftravel_ou_code",EmployeeeExpense.OUCode },
                //    {"ecftravel_amount", EmployeeeExpense.Amount}       
                //  };
                //string tname = "iem_trn_tecftravel";

                //string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                //Emp_Msg = insertcommend.ToString();
                //Emp_Msgretn = "Success";
                //return Emp_Msgretn;

                GetConnection();
                dt = new DataTable();
                cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILS", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = invoicegid;//Convert.ToInt32(EmployeeeExpense.InvGid);
                cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = "";
                cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = "";
                cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString();
                cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString();
                cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = EmployeeeExpense.ProductCode;
                cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = EmployeeeExpense.OUCode;
                cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = 0;
                cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = 0;
                cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = EmployeeeExpense.FC;
                cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.HsnId;
                cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msgretn = (dt.Rows[0]["Message"].ToString());
                }
                else
                {
                    Emp_Msgretn = "Failed";
                }
                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetTravelModedatasingle(string ecfid, string invoiceid, string traveltype, int id)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                EOW_TravelClaim objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetTravelSingle";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecftravel_gid"].ToString());
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["ecftravel_expnature_gid"].ToString());
                    objModel.ExpenseCategoryId = Convert.ToInt32(dt.Rows[i]["ecftravel_expcat_gid"].ToString());
                    objModel.SubCategoryId = Convert.ToInt32(dt.Rows[i]["ecftravel_expsubcat_gid"].ToString());
                    objModel.PlaceFrom = Convert.ToString(dt.Rows[i]["ecftravel_city_from"].ToString());
                    objModel.ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecftravel_date_from"].ToString());
                    objModel.ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecftravel_date_to"].ToString());
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecftravel_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecftravel_fc"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecftravel_cc"].ToString());
                    objModel.Exp_FCCC = Convert.ToString(dt.Rows[i]["fccc_name"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecftravel_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecftravel_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.travelDescription = Convert.ToString(dt.Rows[i]["ecftravel_desc"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["Hsnid"].ToString());
                    objModel.TravelHsnCode = (dt.Rows[i]["HsnCode"].ToString());
                    objModel.TravelHsnDesc = dt.Rows[i]["Hsndesc"].ToString();
                    //Ramya Added
                    objModel.RCMFlag = dt.Rows[i]["RCMFlag"].ToString();
                    if (traveltype == "T")
                    {
                        objModel.PlaceTo = Convert.ToString(dt.Rows[i]["ecftravel_city_to"].ToString());
                        objModel.Distance = Convert.ToString(dt.Rows[i]["ecftravel_distance"].ToString());
                        objModel.Rate = Convert.ToString(dt.Rows[i]["ecftravel_rate"].ToString());
                        objModel.TravelModeId = Convert.ToInt32(dt.Rows[i]["ecftravel_transport_gid"].ToString());
                        objModel.TravelClassId = Convert.ToInt32(dt.Rows[i]["ecftravel_transportclass_gid"].ToString());
                    }
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string DeleteTravelExpense(int EmployeeeExpenseGID, string ecfgid, string invoicegid)
        {
            string delant = "0";
            /*try
            {

                string[,] codes = new string[,]
	               {
        {"ecftravel_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"ecftravel_gid",EmployeeeExpenseGID.ToString() },
        {"ecftravel_ecf_gid",ecfgid },
        {"ecftravel_invoice_gid",invoicegid }
                  };
                string tname = "iem_trn_tecftravel";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                string[,] codes1 = new string[,]
	               {
        {"invoicetax_isremoved","Y" }
                  };
                string[,] whcos1 = new string[,]
	               {
           {"invoicetax_ecftravel_gid",Convert.ToString(EmployeeeExpenseGID) },
           {"invoicetax_invoice_gid",invoicegid }
                  };
                string tname1 = "iem_trn_tinvoicetaxtemp";

                string insertcommend1 = objCommonIUD.UpdateCommon(codes1, whcos1, tname1);


                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }*/
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_Delete_TravelExpense", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecftravel_isremoved", SqlDbType.VarChar).Value = "Y";
                cmd.Parameters.Add("@ecftravel_gid", SqlDbType.Int).Value = EmployeeeExpenseGID;
                cmd.Parameters.Add("@ecftravel_ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid); // ECF Travel Gid 
                cmd.Parameters.Add("@ecftravel_invoice_gid", SqlDbType.Int).Value = Convert.ToInt32(invoicegid);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "DeleteTravelExpense";
                cmd.ExecuteNonQuery();

                //Split Amount update - GST_Phase3_2 - selva
                GetConnection();
                DataTable dtSplit = new DataTable();
                cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                da = new SqlDataAdapter(cmd);
                da.Fill(dtSplit);

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string insertempperson(EOW_Employeelst EmployeeeGid, string ecfgid)
        {
            string status = "";
            string Emp_Msgretn = "";
            try
            {
                status = Gettravelexcel(EmployeeeGid.employeeGid.ToString(), ecfgid.ToString(), "Chkemptravel");
                if (status != "notexists")
                {
                    Emp_Msgretn = "Employee Already Exits";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeGid.empfc.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeGid.empcc.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }

                string[,] codes = new string[,]
	               {
        {"ecfperson_ecf_gid",ecfgid },
	    {"ecfperson_employee_gid", EmployeeeGid.employeeGid.ToString() },
        {"ecfperson_branch_gid",EmployeeeGid.empbranch.ToString() },
	    {"ecfperson_fc_code", EmployeeeGid.empfc.ToString() },
        {"ecfperson_cc_code",EmployeeeGid.empcc.ToString()  }
                  };

                string tname = "iem_trn_tecfperson";
                string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                Emp_Msgretn = "Success";
                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string DeleteEmployeelst(int EmployeeeExpenseGID, string ecfgid)
        {
            string delant = "0";
            try
            {

                string[,] codes = new string[,]
	               {
        {"ecfperson_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"ecfperson_gid",EmployeeeExpenseGID.ToString() },
        {"ecfperson_ecf_gid",ecfgid },
                  };
                string tname = "iem_trn_tecfperson";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
            }
        }

        public string UpdateTravelModeCreate(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string rowid)
        {
            string Emp_Msg = "";
            string output = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            string Emp_Msgrate = "0";
            string Emp_Msgdis = "0";
            string Emp_Msgtmode = "";
            string Emp_Msgtclass = "";
            string Emp_MsgtTraveltypes = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                GetConnection();
                DataTable dtfc = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@BranchCode", SqlDbType.VarChar).Value = oussp[0].ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getbussinesssegment";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtfc);
                string FcCode;
                if (dtfc.Rows.Count > 0)
                {
                    FcCode = dtfc.Rows[0]["branch_businesssegement"].ToString();
                }
                else
                {
                    FcCode = EmployeeeExpense.FC;
                }
                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.Rate != null)
                {
                    Emp_Msgrate = EmployeeeExpense.Rate;
                }
                else
                {
                    Emp_Msgrate = "0";
                }
                if (EmployeeeExpense.Distance != null)
                {
                    Emp_Msgdis = EmployeeeExpense.Distance;
                }
                else
                {
                    Emp_Msgdis = "0";
                }
                if (EmployeeeExpense.TravelModeName != "0" && EmployeeeExpense.TravelModeName != null)
                {
                    Emp_Msgtmode = EmployeeeExpense.TravelModeName;
                }
                else
                {
                    Emp_Msgtmode = "";
                }
                if (EmployeeeExpense.TravelClassName != "0" && EmployeeeExpense.TravelClassName != null)
                {
                    Emp_Msgtclass = EmployeeeExpense.TravelClassName;
                }
                else
                {
                    Emp_Msgtclass = "";
                }
                if (EmployeeeExpense.Traveltypes == "T" || EmployeeeExpense.Traveltypes == "O")
                {
                    Emp_MsgtTraveltypes = "T";
                    status = GetStatusexcelduplicate(
                                                              EmployeeeExpense.NatureofExpensesName,
                                                              EmployeeeExpense.ExpenseCategoryName,
                                                              EmployeeeExpense.SubCategoryName,
                                                              empgid,
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString(),
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString(),
                                                              EmployeeeExpense.Amount,
                                                              rowid.ToString(), "", "", "", "localconduplicatete"
                                                              );
                    if (status == "Exists")
                    {
                        output = "Duplicatedate";
                    }
                    else
                    {
                        output = "valid";
                    }
                }
                else
                {
                    Emp_MsgtTraveltypes = "O";
                    output = "valid";
                }
                if (output == "valid")
                {
                    //            GetConnection();
                    //            DataTable dt = new DataTable();
                    //            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    //            cmd.CommandType = CommandType.StoredProcedure;
                    //            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                    //            cmd.Parameters.Add("@id1", SqlDbType.Int).Value = Convert.ToInt32(invoicegid); // Invid 
                    //            cmd.Parameters.Add("@id2", SqlDbType.Int).Value = Convert.ToInt32(rowid); // ECF Travel Gid 
                    //            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpCatGL";
                    //            da = new SqlDataAdapter(cmd);
                    //            da.Fill(dt);
                    //            decimal Invamount = 0, EcfTravelAmt = 0;
                    //            if (dt.Rows.Count > 0)
                    //            {
                    //                Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                    //                Invamount = Convert.ToDecimal(dt.Rows[0]["InvAmt"].ToString());
                    //                EcfTravelAmt = Convert.ToDecimal(dt.Rows[0]["EcfTravelAmt"].ToString());
                    //                EcfTravelAmt = EcfTravelAmt + Convert.ToDecimal(EmployeeeExpense.Amount);
                    //                if (Invamount < EcfTravelAmt)
                    //                {
                    //                    Emp_Msgretn = "Travel Amount should not be greater than Invoice Amount";
                    //                    return Emp_Msgretn;
                    //                }
                    //            }
                    //            else
                    //            {
                    //                Emp_Msgretn = "Invalid GL Code";
                    //                return Emp_Msgretn;
                    //            }
                    //            string[,] codes = new string[,]
                    //           {

                    //{"ecftravel_expnature_gid",EmployeeeExpense.NatureofExpensesName },
                    //{"ecftravel_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
                    //{"ecftravel_expsubcat_gid",EmployeeeExpense.SubCategoryName },
                    //{"ecftravel_type", Emp_MsgtTraveltypes},
                    //{"ecftravel_transport_gid", Emp_Msgtmode},
                    //{"ecftravel_transportclass_gid", Emp_Msgtclass},
                    //{"ecftravel_city_from", EmployeeeExpense.PlaceFrom},
                    //{"ecftravel_city_to", EmployeeeExpense.PlaceTo},
                    //{"ecftravel_gl_no", Emp_Msg},
                    //{"ecftravel_desc", Emp_Msgdesc},

                    //{"ecftravel_date_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom ).ToString()},
                    //{"ecftravel_date_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString()},
                    //{"ecftravel_fc",EmployeeeExpense.FC },
                    //{"ecftravel_cc", EmployeeeExpense.CC},
                    //{"ecftravel_product_code", Productsp[0].ToString()},
                    //{"ecftravel_ou_code",oussp[0].ToString() },
                    //{"ecftravel_distance", Emp_Msgdis},
                    //{"ecftravel_rate",Emp_Msgrate },
                    //{"ecftravel_amount", EmployeeeExpense.Amount}, //string.IsNullOrEmpty(dt.Rows[i]["DOCNO"].ToString()) ? "" : dt.Rows[i]["DOCNO"].ToString()
                    //{"ecftravel_Hsn_gid", Convert.ToInt32(EmployeeeExpense.TravelHsnid).ToString()},
                    //            {"ecftravel_rcmflag",EmployeeeExpense.RCMFlag.ToString()}
                    //          };
                    //            string[,] whcosup = new string[,]
                    //           {
                    //{"ecftravel_ecf_gid",ecfgid },
                    //{"ecftravel_invoice_gid", invoicegid},
                    // {"ecftravel_gid",rowid }
                    //          };
                    //            string tname = "iem_trn_tecftravel";

                    //            string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                    //            Emp_Msg = insertcommend.ToString();
                    //            Emp_Msgretn = "Success";
                    //            return Emp_Msgretn;
                    //        }
                    //        else
                    //        {
                    //            Emp_Msgretn = "duplicate";
                    //            return Emp_Msgretn;
                    //        }
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILS", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@Ecftravel_gid", SqlDbType.Int).Value = Convert.ToInt32(rowid);
                    cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = Convert.ToInt32(invoicegid);
                    cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                    cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                    cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = Emp_Msgtmode;
                    cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = Emp_Msgtclass;
                    cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                    cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                    cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                    cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString();
                    cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString();
                    cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = Emp_Msgdis;
                    cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Emp_Msgrate;
                    cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = FcCode;
                    cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.TravelHsnid;
                    //Ramya Added
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msgretn = (dt.Rows[0]["Message"].ToString());
                        GetConnection();
                        //selva 09-12-2020
                        DataTable dtSplit = new DataTable();
                        cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = Convert.ToInt32(invoicegid);
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtSplit);
                    }
                    else
                    {
                        Emp_Msgretn = "Failed";
                    }
                    return Emp_Msgretn;
                }
                else
                {
                    Emp_Msgretn = "duplicate";
                    return Emp_Msgretn;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return Emp_Msgretn;
        }

        public string UpdateOtherTravelCreate(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string rowid)
        {
            string Emp_Msg = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                if (status != "notexists")
                {
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_trn_mailckeck", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@modulecode", SqlDbType.VarChar).Value = EmployeeeExpense.FC.ToString();
                    cmd.Parameters.Add("@mailtypename", SqlDbType.VarChar).Value = EmployeeeExpense.CC.ToString();
                    cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "Empfccc";
                    status = (string)cmd.ExecuteScalar();
                    if (status == "notexists")
                    {
                        Emp_Msgretn = "Invalid Function Code and Cost Code";
                        return Emp_Msgretn;
                    }
                }
                status = GetStatusexcel(EmployeeeExpense.ProductCode.ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.OUCode.ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpCatGL";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }

                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }

                string[,] codes = new string[,]
	               {      
        {"ecftravel_expnature_gid",EmployeeeExpense.NatureofExpensesName },
	    {"ecftravel_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
        {"ecftravel_expsubcat_gid",EmployeeeExpense.SubCategoryName },
        {"ecftravel_desc", Emp_Msgdesc},
        {"ecftravel_type", "E"},     
        {"ecftravel_city_from", EmployeeeExpense.PlaceFrom},
        {"ecftravel_gl_no", Emp_Msg},

        {"ecftravel_date_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom ).ToString()},
	    {"ecftravel_date_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString()},
        {"ecftravel_fc",EmployeeeExpense.FC },
	    {"ecftravel_cc", EmployeeeExpense.CC},
        {"ecftravel_product_code", EmployeeeExpense.ProductCode},
        {"ecftravel_ou_code",EmployeeeExpense.OUCode },
	    {"ecftravel_amount", EmployeeeExpense.Amount}       
                  };

                string[,] whcosup = new string[,]
	               {
        {"ecftravel_ecf_gid",ecfgid },
	    {"ecftravel_invoice_gid", invoicegid},
         {"ecftravel_gid",rowid }
                  };

                string tname = "iem_trn_tecftravel";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                Emp_Msg = insertcommend.ToString();
                Emp_Msgretn = "Success";
                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<DashBoard> doctypedata()
        {
            List<DashBoard> objparenttax = new List<DashBoard>();
            try
            {

                objparenttax.Add(new DashBoard { DocTypeIdd = "0", DocTypeName = "-- Select --", });
                objparenttax.Add(new DashBoard { DocTypeIdd = "1", DocTypeName = "Employee Claim Format", });
                objparenttax.Add(new DashBoard { DocTypeIdd = "2", DocTypeName = "Advance Request", });
                objparenttax.Add(new DashBoard { DocTypeIdd = "3", DocTypeName = "Supplier Invoice", });
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetStatusType()
        {
            List<DashBoard> objparenttax = new List<DashBoard>();
            try
            {

                objparenttax.Add(new DashBoard { StatusTypeId = "0", StatusTypeName = "-- Select --", });
                objparenttax.Add(new DashBoard { StatusTypeId = "1", StatusTypeName = "Draft", });
                objparenttax.Add(new DashBoard { StatusTypeId = "3", StatusTypeName = "Rejected", });
                objparenttax.Add(new DashBoard { StatusTypeId = "5", StatusTypeName = "Inprocess", });
                objparenttax.Add(new DashBoard { StatusTypeId = "6", StatusTypeName = "Paid", });
                objparenttax.Add(new DashBoard { StatusTypeId = "7", StatusTypeName = "Approved", });
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetStatusTypeapp()
        {
            List<DashBoard> objparenttax = new List<DashBoard>();
            try
            {

                objparenttax.Add(new DashBoard { StatusTypeId = "0", StatusTypeName = "-- Select --", });
                objparenttax.Add(new DashBoard { StatusTypeId = "2", StatusTypeName = "Pending Approval", });
                objparenttax.Add(new DashBoard { StatusTypeId = "4", StatusTypeName = "Concurrent Approval", });
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> Getmanualecfdetails(string userlognid)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string status = "";
                DashBoard objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_mydocmanualecfdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = Convert.ToInt32(userlognid);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "mydocmanualecf";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                        objModel.raiserName = Convert.ToString(dt.Rows[i]["rempname"].ToString());
                        objModel.emporsupp = Convert.ToString(dt.Rows[i]["suppliername"].ToString());
                        objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());

                        string docsuntype = Convert.ToString(dt.Rows[i]["ecf_docsubtype_gid"].ToString());
                        objModel.DocTypeName = objCmnFunctions.GetSubDocTypedash(docsuntype);

                        status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                        objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                        objDashBoard.Add(objModel);
                    }
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetDashBoardDetails(string userlognid)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                DashBoard objModel;
                DataSet dt = new DataSet();
                string raisermode = "";
                string status = "";
                int raisergid = 0;
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                    raisergid = Convert.ToInt32(HttpContext.Current.Session["Proxyemployee_gid"]);
                }
                else
                {
                    raisermode = "Self";
                }

                GetConnection();
                cmd = new SqlCommand("pr_eow_com_mydocreqdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = Convert.ToInt32(userlognid);
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@raiser", SqlDbType.Int).Value = raisergid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "mydocreqdetail";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                string statusw = "";
                string statusq = "";
                if (dt.Tables[0].Rows.Count > 0)
                {
                    //if (raisermode != "Proxy")
                    //{
                    for (int i = 0; i < dt.Tables[0].Rows.Count; i++)
                    {
                        if (dt.Tables[0].Rows[i]["ecf_status"].ToString() != "262144" && dt.Tables[0].Rows[i]["ecf_status"].ToString() != "524288")
                        {
                            objModel = new DashBoard();
                            if (dt.Tables[0].Rows[i]["queue_gid"].ToString() != "")
                            {
                                objModel.Docnogid = Convert.ToInt32(dt.Tables[0].Rows[i]["queue_gid"].ToString());
                            }

                            objModel.Doctypeid = Convert.ToInt32(dt.Tables[0].Rows[i]["ecf_gid"].ToString());
                            objModel.Docno = Convert.ToString(dt.Tables[0].Rows[i]["ecf_no"].ToString());
                            objModel.DocDate = Convert.ToString(dt.Tables[0].Rows[i]["ecf_date"].ToString());
                            objModel.Docamount = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Tables[0].Rows[i]["ecf_amount"].ToString()));
                            objModel.raiserName = Convert.ToString(dt.Tables[0].Rows[i]["sempname"].ToString());
                            objModel.ecfdescription = Convert.ToString(dt.Tables[0].Rows[i]["ecf_description"].ToString());

                            string docsuntype = Convert.ToString(dt.Tables[0].Rows[i]["ecf_docsubtype_gid"].ToString());
                            objModel.DocTypeName = objCmnFunctions.GetSubDocTypedash(docsuntype);

                            string emporsupp = Convert.ToString(dt.Tables[0].Rows[i]["ecf_supplier_employee"].ToString());
                            if (emporsupp == "E")
                            {
                                objModel.emporsupp = Convert.ToString(dt.Tables[0].Rows[i]["employeename"].ToString());
                            }
                            else
                            {
                                if (dt.Tables[0].Rows[i]["employeename"].ToString() != "")
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Tables[0].Rows[i]["employeename"].ToString());
                                }
                                else
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Tables[0].Rows[i]["suppliername"].ToString());
                                }
                            }
                            statusw = Convert.ToString(dt.Tables[0].Rows[i]["ecf_status"].ToString());
                            statusq = Convert.ToString(dt.Tables[0].Rows[i]["ecf_all_status"].ToString());

                            if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                            {
                                objModel.StatusTypeName = objCmnFunctions.GetQueueStatusapp(statusw);
                                if (objModel.StatusTypeName == "Rejected")
                                {
                                    objModel.ecfselect = "notactive";
                                    objModel.ecfview = "active";
                                    objModel.ecfprint = "notactive";
                                }
                                else if (objModel.StatusTypeName == "Paid" || objModel.StatusTypeName == "EPU Inprocess")
                                {
                                    objModel.ecfselect = "notactive";
                                    objModel.ecfview = "active";
                                    objModel.ecfprint = "active";
                                }
                                else
                                {
                                    objModel.ecfselect = "notactive";
                                    objModel.ecfview = "active";
                                    objModel.ecfprint = "notactive";
                                }
                            }
                            else
                            {

                                if (statusq.Trim() == "16")
                                {
                                    objModel.StatusTypeName = "Hold";

                                    objModel.ecfselect = "notactive";
                                    objModel.ecfview = "active";
                                    objModel.ecfprint = "notactive";
                                }
                                else
                                {
                                    objModel.StatusTypeName = objCmnFunctions.GetQueueStatusapp(statusw);
                                    if (objModel.StatusTypeName == "Rejected")
                                    {
                                        objModel.ecfselect = "active";
                                        objModel.ecfview = "notactive";
                                        objModel.ecfprint = "notactive";
                                    }
                                    else if (objModel.StatusTypeName == "Paid" || objModel.StatusTypeName == "EPU Inprocess")
                                    {
                                        objModel.ecfselect = "notactive";
                                        objModel.ecfview = "active";
                                        objModel.ecfprint = "active";
                                    }
                                    else
                                    {
                                        objModel.ecfselect = "notactive";
                                        objModel.ecfview = "active";
                                        objModel.ecfprint = "notactive";
                                    }
                                }
                            }
                            objDashBoard.Add(objModel);
                        }

                    }
                    //}
                }
                if (dt.Tables[1].Rows.Count > 0)
                {
                    //if (raisermode != "Proxy")
                    //{
                    HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                    for (int i = 0; i < dt.Tables[1].Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        if (dt.Tables[1].Rows[i]["queue_gid"].ToString() != "")
                        {
                            objModel.Docnogid = Convert.ToInt32(dt.Tables[1].Rows[i]["queue_gid"].ToString());
                        }
                        objModel.Doctypeid = Convert.ToInt32(dt.Tables[1].Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dt.Tables[1].Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dt.Tables[1].Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Tables[1].Rows[i]["ecf_amount"].ToString()));
                        objModel.raiserName = Convert.ToString(dt.Tables[1].Rows[i]["sempname"].ToString());
                        objModel.ecfdescription = Convert.ToString(dt.Tables[1].Rows[i]["ecf_description"].ToString());

                        string docsuntype = Convert.ToString(dt.Tables[1].Rows[i]["ecf_docsubtype_gid"].ToString());
                        objModel.DocTypeName = objCmnFunctions.GetSubDocTypedash(docsuntype);

                        string emporsupp = Convert.ToString(dt.Tables[1].Rows[i]["ecf_supplier_employee"].ToString());
                        if (emporsupp == "E")
                        {
                            objModel.emporsupp = Convert.ToString(dt.Tables[1].Rows[i]["employeename"].ToString());
                        }
                        else
                        {
                            if (dt.Tables[1].Rows[i]["employeename"].ToString() != "")
                            {
                                objModel.emporsupp = Convert.ToString(dt.Tables[1].Rows[i]["employeename"].ToString());
                            }
                            else
                            {
                                objModel.emporsupp = Convert.ToString(dt.Tables[1].Rows[i]["suppliername"].ToString());
                            }
                        }

                        status = Convert.ToString(dt.Tables[1].Rows[i]["queue_action_for"].ToString());
                        objModel.StatusTypeName = "Approved";
                        objModel.ecfselect = "notactive";
                        objModel.ecfview = "active";
                        objModel.ecfprint = "active";
                        objDashBoard.Add(objModel);
                    }
                    //}
                }
                if (dt.Tables[2].Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Tables[2].Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        objModel.Docnogid = Convert.ToInt32(dt.Tables[2].Rows[i]["ecf_gid"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dt.Tables[2].Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dt.Tables[2].Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dt.Tables[2].Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Tables[2].Rows[i]["ecf_amount"].ToString()));
                        objModel.raiserName = Convert.ToString(dt.Tables[2].Rows[i]["rempname"].ToString());
                        objModel.ecfdescription = Convert.ToString(dt.Tables[2].Rows[i]["ecf_description"].ToString());

                        string docsuntype = Convert.ToString(dt.Tables[2].Rows[i]["ecf_docsubtype_gid"].ToString());
                        objModel.DocTypeName = objCmnFunctions.GetSubDocTypedash(docsuntype);

                        string emporsupp = Convert.ToString(dt.Tables[2].Rows[i]["ecf_supplier_employee"].ToString());
                        if (emporsupp == "E")
                        {
                            objModel.emporsupp = Convert.ToString(dt.Tables[2].Rows[i]["employeename"].ToString());
                        }
                        else
                        {
                            if (dt.Tables[2].Rows[i]["employeename"].ToString() != "")
                            {
                                objModel.emporsupp = Convert.ToString(dt.Tables[2].Rows[i]["employeename"].ToString());
                            }
                            else
                            {
                                objModel.emporsupp = Convert.ToString(dt.Tables[2].Rows[i]["suppliername"].ToString());
                            }
                        }

                        status = Convert.ToString(dt.Tables[2].Rows[i]["queue_action_for"].ToString());
                        objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                        objModel.ecfselect = "active";
                        objModel.ecfview = "notactive";
                        objModel.ecfprint = "notactive";
                        objDashBoard.Add(objModel);
                    }
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<DashBoard> GetDashBoardDetailsa(string userlognid)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            DashBoard objModel;
            try
            {
                Hashtable queuelist = new Hashtable();
                Hashtable emplist = new Hashtable();
                int emplistid = 0;
                string raisermode = "";
                //int raisergid = 0;
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                    //raisergid = Convert.ToInt32(HttpContext.Current.Session["Proxyemployee_gid"]);
                }
                else
                {
                    raisermode = "Self";
                }

                emplist.Add(emplistid, userlognid);

                GetConnection();
                DataTable dtdel = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.Int).Value = objCmnFunctions.GetLoginUserGid().ToString();
                //cmd.Parameters.Add("@raiser", SqlDbType.Int).Value = raisergid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdelegateuser";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdel);
                if (dtdel.Rows.Count > 0)
                {
                    for (int TR = 0; TR < dtdel.Rows.Count; TR++)
                    {
                        if (emplist.Count == 0)
                        {
                            emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                        }
                        else
                        {
                            if (!emplist.ContainsValue(Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString())))
                            {
                                emplistid++;
                                emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                            }
                        }
                    }
                }
                string delegatesuser = "";
                string status = "";
                for (int tr = 0; tr < emplist.Count; tr++)
                {
                    delegatesuser = emplist[tr].ToString().Trim();
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_com_formyapprvol", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = delegatesuser;
                    cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queueformyapprvol";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    Boolean hierhy = false;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        hierhy = false;
                        if (dt.Rows[i]["Additional_flag"].ToString() == "Y")
                        {
                            objModel = new DashBoard();
                            objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                            objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                            objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                            objModel.Docamount = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Rows[i]["ecf_amount"].ToString()));
                            objModel.raiserName = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                            objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());

                            string docsuntype = Convert.ToString(dt.Rows[i]["ecf_docsubtype_gid"].ToString());
                            objModel.DocTypeName = objCmnFunctions.GetSubDocTypedash(docsuntype);

                            string emporsupp = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                            if (emporsupp == "E")
                            {
                                objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                            }
                            else
                            {
                                if (dt.Rows[i]["employeename"].ToString() != "")
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                                }
                                else
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["suppliername"].ToString());
                                }
                            }

                            status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                            objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                            objDashBoard.Add(objModel);
                            if (!queuelist.ContainsKey(dt.Rows[i]["queue_gid"].ToString()))
                            {
                                queuelist.Add(dt.Rows[i]["queue_gid"].ToString(), delegatesuser);
                            }
                        }
                        else
                        {
                            string type = dt.Rows[i]["queue_to_type"].ToString();
                            string raiser = dt.Rows[i]["ecf_raiser"].ToString();
                            string supervisor = dt.Rows[i]["queue_to"].ToString();
                            if (type == "E")
                            {
                                hierhy = true;
                            }
                            else if (type == "G")
                            {
                                string getempgid = Getempheryname(raiser, "Grade", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (type == "D")
                            {
                                string getempgid = Getempheryname(raiser, "Designation", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (type == "R")
                            {
                                hierhy = true;
                            }
                            if (hierhy == true)
                            {
                                objModel = new DashBoard();
                                objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                                objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                                objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                                objModel.Docamount = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Rows[i]["ecf_amount"].ToString()));
                                objModel.raiserName = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());

                                string docsuntype = Convert.ToString(dt.Rows[i]["ecf_docsubtype_gid"].ToString());
                                objModel.DocTypeName = objCmnFunctions.GetSubDocTypedash(docsuntype);

                                string emporsupp = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                                if (emporsupp == "E")
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                                }
                                else
                                {
                                    if (dt.Rows[i]["employeename"].ToString() != "")
                                    {
                                        objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                                    }
                                    else
                                    {
                                        objModel.emporsupp = Convert.ToString(dt.Rows[i]["suppliername"].ToString());
                                    }
                                }

                                status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                                objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                                objDashBoard.Add(objModel);
                                if (!queuelist.ContainsKey(dt.Rows[i]["queue_gid"].ToString()))
                                {
                                    queuelist.Add(dt.Rows[i]["queue_gid"].ToString(), delegatesuser);
                                }
                            }
                        }
                    }
                }
                HttpContext.Current.Session["Queue_delegateslist"] = queuelist;
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<DashBoard> GetDashBoardUtlity(string userlognid, string countflag)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            DashBoard objModel;
            try
            {
                Hashtable emplist = new Hashtable();
                int emplistid = 0;
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }
                emplist.Add(emplistid, userlognid);

                GetConnection();
                DataTable dtdel = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.Int).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdelegateuser";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdel);
                if (dtdel.Rows.Count > 0)
                {
                    for (int TR = 0; TR < dtdel.Rows.Count; TR++)
                    {
                        if (emplist.Count == 0)
                        {
                            emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                        }
                        else
                        {
                            if (!emplist.ContainsValue(Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString())))
                            {
                                emplistid++;
                                emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                            }
                        }
                    }
                }
                string delegatesuser = "";
                string status = "";
                for (int tr = 0; tr < emplist.Count; tr++)
                {
                    delegatesuser = emplist[tr].ToString().Trim();
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_com_formyapprvol", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = delegatesuser;
                    cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "utlityformyapprvol";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);

                    Boolean hierhy = false;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        hierhy = false;
                        if (dt.Rows[i]["Additional_flag"].ToString() == "Y")
                        {
                            objModel = new DashBoard();
                            objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                            objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                            objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                            objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                            objModel.emporsupp = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                            objModel.raiserName = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                            objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                            objModel.DocTypeName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                            status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                            objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                            objDashBoard.Add(objModel);
                        }
                        else
                        {
                            string type = dt.Rows[i]["queue_to_type"].ToString();
                            string raiser = dt.Rows[i]["ecf_raiser"].ToString();
                            string supervisor = dt.Rows[i]["queue_to"].ToString();
                            if (type == "E")
                            {
                                hierhy = true;
                            }
                            else if (type == "G")
                            {
                                string getempgid = Getempheryname(raiser, "Grade", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (type == "D")
                            {
                                string getempgid = Getempheryname(raiser, "Designation", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (type == "R")
                            {
                                hierhy = true;
                            }
                            if (hierhy == true)
                            {
                                objModel = new DashBoard();
                                objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                                objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                                objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                                objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                                objModel.emporsupp = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                objModel.raiserName = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                                objModel.DocTypeName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                                status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                                objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                                objDashBoard.Add(objModel);
                            }
                        }
                    }
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<DashBoard> GetMydocDraft(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }

                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocDraft";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                for (int i = 0; i < dtdraft.Rows.Count; i++)
                {
                    objModel = new DashBoard();
                    objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                    objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                    objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                    objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                    objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());
                    objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["rempname"].ToString());
                    objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());

                    objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                    string emporsupp = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                    if (emporsupp == "E")
                    {
                        objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                    }
                    else
                    {
                        if (dtdraft.Rows[i]["employeename"].ToString() != "")
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                        }
                        else
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["suppliername"].ToString());
                        }
                    }
                    status = Convert.ToString(dtdraft.Rows[i]["ecf_status"].ToString());
                    objModel.StatusTypeName = "Draft";
                    objModel.ecfselect = "active";
                    objModel.ecfview = "notactive";
                    objModel.ecfprint = "notactive";
                    objModel.ecfprintid = type;
                    objDashBoard.Add(objModel);
                }

                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetMydocCancelled(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }

                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocCancelled";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                for (int i = 0; i < dtdraft.Rows.Count; i++)
                {
                    objModel = new DashBoard();
                    objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["queue_gid"].ToString());
                    objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                    objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                    objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                    objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());
                    objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["rempname"].ToString());

                    string emporsupp = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                    if (emporsupp == "E")
                    {
                        objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                    }
                    else
                    {
                        if (dtdraft.Rows[i]["employeename"].ToString() != "")
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                        }
                        else
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["suppliername"].ToString());
                        }
                    }

                    objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                    objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                    status = Convert.ToString(dtdraft.Rows[i]["queue_action_for"].ToString());
                    objModel.StatusTypeName = "Cancelled";
                    objModel.ecfselect = "notactive";
                    objModel.ecfview = "active";
                    objModel.ecfprint = "notactive";
                    objModel.ecfprintid = type;
                    objDashBoard.Add(objModel);
                }

                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetMydocReject(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }

                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocReject";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                for (int i = 0; i < dtdraft.Rows.Count; i++)
                {
                    objModel = new DashBoard();
                    objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["queue_gid"].ToString());
                    objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                    objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                    objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                    objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());
                    objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["rempname"].ToString());
                    objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                    objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());

                    string emporsupp = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                    if (emporsupp == "E")
                    {
                        objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                    }
                    else
                    {
                        if (dtdraft.Rows[i]["employeename"].ToString() != "")
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                        }
                        else
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["suppliername"].ToString());
                        }
                    }

                    status = Convert.ToString(dtdraft.Rows[i]["queue_action_for"].ToString());
                    objModel.StatusTypeName = "Rejected";
                    if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                    {
                        objModel.ecfselect = "notactive";
                        objModel.ecfview = "active";
                        objModel.ecfprint = "notactive";
                    }
                    else
                    {
                        objModel.ecfselect = "active";
                        objModel.ecfview = "notactive";
                        objModel.ecfprint = "notactive";
                    }

                    objModel.ecfprintid = type;
                    objDashBoard.Add(objModel);
                }

                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetMydocAppred(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }
                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocAppred";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                if (dtdraft.Rows.Count > 0)
                {
                    HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                    for (int i = 0; i < dtdraft.Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["queue_gid"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());

                        string emporsupp = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                        if (emporsupp == "E")
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                        }
                        else
                        {
                            if (dtdraft.Rows[i]["employeename"].ToString() != "")
                            {
                                objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                            }
                            else
                            {
                                objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["suppliername"].ToString());
                            }
                        }

                        objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["sempname"].ToString());
                        objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                        objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                        status = Convert.ToString(dtdraft.Rows[i]["queue_action_for"].ToString());
                        objModel.StatusTypeName = "Approved";
                        objModel.ecfselect = "notactive";
                        objModel.ecfview = "active";
                        objModel.ecfprint = "active";
                        objModel.ecfprintid = type;
                        objDashBoard.Add(objModel);
                    }
                }
                else
                {
                    HttpContext.Current.Session["docAppoalc"] = null;
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetMydocAppoalc(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }

                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocAppoalc";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                if (dtdraft.Rows.Count > 0)
                {
                    HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                    for (int i = 0; i < dtdraft.Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["queue_gid"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());

                        string emporsupp = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                        if (emporsupp == "E")
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                        }
                        else
                        {
                            if (dtdraft.Rows[i]["employeename"].ToString() != "")
                            {
                                objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                            }
                            else
                            {
                                objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["suppliername"].ToString());
                            }
                        }

                        objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["sempname"].ToString());
                        objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                        objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                        status = Convert.ToString(dtdraft.Rows[i]["queue_action_status"].ToString());
                        if (status.Trim() == "16")
                        {
                            objModel.StatusTypeName = "Hold";
                        }
                        else
                        {
                            objModel.StatusTypeName = "Inprocess";
                        }

                        objModel.ecfselect = "notactive";
                        objModel.ecfview = "active";
                        objModel.ecfprint = "notactive";
                        objModel.ecfprintid = type;
                        objDashBoard.Add(objModel);
                    }
                }
                else
                {
                    HttpContext.Current.Session["docAppoalc"] = null;
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetDashBoardMyAppval(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            DashBoard objModel;
            try
            {
                Hashtable queuelist = new Hashtable();
                Hashtable emplist = new Hashtable();
                int emplistid = 0;
                emplist.Add(emplistid, userlognid);
                GetConnection();
                DataTable dtdel = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.Int).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdelegateuser";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdel);
                if (dtdel.Rows.Count > 0)
                {
                    for (int TR = 0; TR < dtdel.Rows.Count; TR++)
                    {
                        if (emplist.Count == 0)
                        {
                            emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                        }
                        else
                        {
                            if (!emplist.ContainsValue(Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString())))
                            {
                                emplistid++;
                                emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                            }
                        }
                    }
                }
                string delegatesuser = "";
                for (int tr = 0; tr < emplist.Count; tr++)
                {
                    delegatesuser = emplist[tr].ToString().Trim();
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_com_formyapprvol", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = delegatesuser;
                    cmd.Parameters.Add("@doctype", SqlDbType.VarChar).Value = type;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queueformyapprvolcount";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    Boolean hierhy = false;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string status = "";
                        hierhy = false;
                        if (dt.Rows[i]["Additional_flag"].ToString() == "Y")
                        {
                            objModel = new DashBoard();
                            objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                            objModel.Doctypeid = Convert.ToInt32("0");
                            objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                            objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                            objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                            objModel.raiserName = Convert.ToString(dt.Rows[i]["rempname"].ToString());
                            objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                            objModel.DocTypeName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());

                            string emporsupp = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                            if (emporsupp == "E")
                            {
                                objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                            }
                            else
                            {
                                if (dt.Rows[i]["employeename"].ToString() != "")
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                                }
                                else
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["suppliername"].ToString());
                                }
                            }

                            status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                            objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);

                            objModel.ecfselect = "active";
                            objModel.ecfview = "notactive";
                            objModel.ecfprint = "notactive";
                            objModel.ecfprintid = type;
                            objDashBoard.Add(objModel);
                            if (!queuelist.ContainsKey(dt.Rows[i]["queue_gid"].ToString()))
                            {
                                queuelist.Add(dt.Rows[i]["queue_gid"].ToString(), delegatesuser);
                            }
                        }
                        else
                        {
                            string typecheck = dt.Rows[i]["queue_to_type"].ToString();
                            string raiser = dt.Rows[i]["ecf_raiser"].ToString();
                            string supervisor = dt.Rows[i]["queue_to"].ToString();
                            if (typecheck == "E")
                            {
                                //hierhy = Emphery(raiser, supervisor);
                                hierhy = true;
                                //string getempgid = Getempheryname(raiser, "Employee", supervisor);
                                //if (getempgid != "0")
                                //{
                                //    hierhy = true;
                                //}
                            }
                            else if (typecheck == "G")
                            {
                                //hierhy = Gradehery(raiser, supervisor);
                                string getempgid = Getempheryname(raiser, "Grade", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (typecheck == "D")
                            {
                                //hierhy = Deghery(raiser, supervisor);
                                string getempgid = Getempheryname(raiser, "Designation", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (typecheck == "R")
                            {
                                hierhy = true;
                            }
                            //if (dt.Rows[i]["employee_dept_gidnew"].ToString() == queue_toU.ToString())
                            //{
                            if (hierhy == true)
                            {
                                //if (userlognid != raiser)
                                //{
                                objModel = new DashBoard();
                                objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                                objModel.Doctypeid = Convert.ToInt32("0");
                                objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                                objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                                objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                                objModel.raiserName = Convert.ToString(dt.Rows[i]["rempname"].ToString());
                                objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                                objModel.DocTypeName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                                status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                                objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);

                                string emporsupp = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                                if (emporsupp == "E")
                                {
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                                }
                                else
                                {
                                    if (dt.Rows[i]["employeename"].ToString() != "")
                                    {
                                        objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                                    }
                                    else
                                    {
                                        if (dt.Rows[i]["employeename"].ToString() != "")
                                        {
                                            objModel.emporsupp = Convert.ToString(dt.Rows[i]["employeename"].ToString());
                                        }
                                        else
                                        {
                                            objModel.emporsupp = Convert.ToString(dt.Rows[i]["suppliername"].ToString());
                                        }
                                    }
                                }

                                objModel.ecfselect = "active";
                                objModel.ecfview = "notactive";
                                objModel.ecfprint = "notactive";
                                objModel.ecfprintid = type;
                                objDashBoard.Add(objModel);
                                if (!queuelist.ContainsKey(dt.Rows[i]["queue_gid"].ToString()))
                                {
                                    queuelist.Add(dt.Rows[i]["queue_gid"].ToString(), delegatesuser);
                                }
                                //}
                            }
                            //}
                        }
                    }
                }
                HttpContext.Current.Session["Queue_delegateslist"] = queuelist;
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_EmployeeeExpense> SelectViewdata(string ecfid, string type)
        {
            List<EOW_EmployeeeExpense> objAttachment = new List<EOW_EmployeeeExpense>();
            try
            {
                EOW_EmployeeeExpense objModel;
                DataTable dt = new DataTable();
                string straction = "";
                if (type == "D")
                {
                    straction = "data";
                }
                else if (type == "L")
                {
                    straction = "check";
                }
                else if (type == "AL")
                {
                    straction = "checkview";
                }
                else
                {
                    straction = "others";
                }

                GetConnection();
                cmd = new SqlCommand("pr_eow_com_SelectViewsupplierinvoice", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = straction;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_EmployeeeExpense();
                        objModel.queueactionfor = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dt.Rows[i]["ecf_docsubtype_gid"].ToString());
                        objModel.Queue_GID = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                        objModel.ecf_GID = Convert.ToInt32(dt.Rows[i]["ecf_gid"].ToString());
                        if (!string.IsNullOrEmpty(Convert.ToString(dt.Rows[i]["invoice_gid"])))
                        {
                            objModel.invoice_GID = Convert.ToInt32(dt.Rows[i]["invoice_gid"].ToString());
                        }
                        objModel.raisermodeId = Convert.ToString(dt.Rows[i]["ecf_create_mode"].ToString());
                        objModel.Raiser_Code = Convert.ToString(dt.Rows[i]["employee_code"].ToString());
                        objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecf_claim_month"].ToString());
                        objModel.Raiser_Name = Convert.ToString(dt.Rows[i]["employee_name"].ToString());
                        objModel.Grade = Convert.ToString(dt.Rows[i]["employee_grade_code"].ToString());
                        objModel.ECF_Date = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());

                        objModel.ecfno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                        string noperson = Convert.ToString(dt.Rows[i]["ecf_travelpersoncount"].ToString());
                        string doctyped = Convert.ToString(dt.Rows[i]["ecf_docsubtype_gid"].ToString());
                        if (doctyped == "2")
                        {
                            objModel.ECF_Amount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                            objModel.ecfdelmatamt = Convert.ToString(dt.Rows[i]["ecf_delmat_amount"].ToString());
                        }
                        else
                        {
                            objModel.ecfdelmatamt = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                            objModel.ECF_Amount = Convert.ToString(dt.Rows[i]["ecf_delmat_amount"].ToString());
                        }
                        if (noperson != "")
                        {
                            objModel.noofperson = noperson;
                        }
                        else
                        {
                            objModel.noofperson = "0";
                        }
                        if (doctyped == "6" || doctyped == "7" || doctyped == "12")
                        {
                            string arftye = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                            if (arftye == "E")
                            {
                                objModel.arftype = "Employee";
                                objModel.arfempsupcode = Convert.ToString(dt.Rows[i]["employee_code"].ToString());
                                objModel.arfempsupname = Convert.ToString(dt.Rows[i]["employee_name"].ToString());
                            }
                            if (arftye == "S" || arftye == "I")
                            {
                                objModel.arftype = "Supplier";
                                objModel.arfempsupcode = Convert.ToString(dt.Rows[i]["supplierheader_suppliercode"].ToString());
                                objModel.arfempsupname = Convert.ToString(dt.Rows[i]["supplierheader_name"].ToString());
                            }
                            if (arftye == "P")
                            {
                                objModel.arftype = "Petty Cash";
                                objModel.arfempsupcode = Convert.ToString(dt.Rows[i]["employee_code"].ToString());
                                objModel.arfempsupname = Convert.ToString(dt.Rows[i]["employee_name"].ToString());
                            }
                        }
                        objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                        objModel.ecfremark = Convert.ToString(dt.Rows[i]["ecf_remark"].ToString());
                        objModel.ecf_paymode = dt.Rows[i]["ecf_pay_mode"].ToString();
                        objModel.CygnetFlag = dt.Rows[i]["CygnetFlag"].ToString();
                        objAttachment.Add(objModel);
                    }
                }
                return objAttachment;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAttachment;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Supplierinvoice> SelectViewdatasupplier(string ecfid, string action)
        {
            List<EOW_Supplierinvoice> objAttachment = new List<EOW_Supplierinvoice>();
            try
            {
                EOW_Supplierinvoice objModel;
                DataTable dt = new DataTable();
                string straction = "";
                if (action.ToString() == "D")
                {
                    straction = "data";
                }
                else if (action.ToString() == "check")
                {
                    straction = "check";
                }
                else if (action.ToString() == "checkview")
                {
                    straction = "checkview";
                }
                else if (action.ToString() == "ctdata")
                {
                    straction = "ctdata";
                }
                else
                {
                    straction = "others";
                }
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_SelectViewsupplierecf", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = straction;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_Supplierinvoice();
                        objModel.queueactionfor = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dt.Rows[i]["ecf_docsubtype_gid"].ToString());
                        objModel.Queue_GID = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                        objModel.ecf_GID = Convert.ToInt32(dt.Rows[i]["ecf_gid"].ToString());
                        objModel.raisermodeId = Convert.ToString(dt.Rows[i]["ecf_create_mode"].ToString());
                        objModel.raisermodeName = Convert.ToString(dt.Rows[i]["ecf_raiser"].ToString());
                        objModel.Raiser_Code = Convert.ToString(dt.Rows[i]["employee_code"].ToString());
                        objModel.Raiser_Name = Convert.ToString(dt.Rows[i]["employee_name"].ToString());
                        objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                        objModel.Grade = Convert.ToString(dt.Rows[i]["employee_grade_code"].ToString());
                        objModel.ECF_Date = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                        objModel.ECF_Amount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                        objModel.chkraiser_gid = Convert.ToInt32(dt.Rows[i]["ecf_raiser"].ToString());
                        objModel.ecfno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                        objModel.ecfstatus = Convert.ToString(dt.Rows[i]["ecf_status"].ToString());
                        objModel.ecf_Paymode = dt.Rows[i]["ecf_pay_mode"].ToString();
                        objModel.CygnetFlag = dt.Rows[i]["CygnetFlag"].ToString();
                        string doctype = Convert.ToString(dt.Rows[i]["ecf_po_type"].ToString());
                        string doctypegid = Convert.ToString(dt.Rows[i]["ecf_docsubtype_gid"].ToString());
                        if (doctype == "P")
                        {
                            objModel.DocName = "PO";
                        }
                        else if (doctype == "W")
                        {
                            objModel.DocName = "WO";
                        }
                        else if (doctype == "O")
                        {
                            objModel.DocName = "WO(WithOut PAR)"; // Muthu Added On 26-MAY-2022
                        }
                        else if (doctype == "N")
                        {
                            objModel.DocName = "Non PO/WO";
                        }
                        else if (doctype == "U")
                        {
                            objModel.DocName = "Utility";
                        }
                        else if (doctypegid == "11")
                        {
                            objModel.DocName = "Insurance";
                        }
                        else
                        {
                            objModel.DocName = "-- Select --";
                        }
                        objModel.SupplierMSME = Convert.ToString(dt.Rows[i]["supplierheader_ismsmed"].ToString());//prema added for MSME CR on 7th March 2022 
                        objModel.Suppliergid = Convert.ToString(dt.Rows[i]["supplierheader_gid"].ToString());
                        objModel.Suppliercode = Convert.ToString(dt.Rows[i]["supplierheader_suppliercode"].ToString());
                        objModel.Suppliername = Convert.ToString(dt.Rows[i]["supplierheader_name"].ToString());
                        objModel.CurrencyId = Convert.ToString(dt.Rows[i]["ecf_currency_gid"].ToString());
                        objModel.CurrencyName = Convert.ToString(dt.Rows[i]["ecf_currency_code"].ToString());
                        objModel.Exrate = Convert.ToString(dt.Rows[i]["ecf_currency_rate"].ToString());
                        objModel.Currencyamount = Convert.ToString(dt.Rows[i]["ecf_currency_amount"].ToString());

                        string amort = Convert.ToString(dt.Rows[i]["ecf_amort_flag"].ToString());
                        if (amort == "N")
                        {
                            objModel.amort = "No";
                        }
                        else
                        {
                            objModel.amort = "Yes";
                        }
                        objModel.from = Convert.ToString(dt.Rows[i]["ecf_amort_from"].ToString());
                        objModel.to = Convert.ToString(dt.Rows[i]["ecf_amort_to"].ToString());
                        objModel.amortdec = Convert.ToString(dt.Rows[i]["ecf_amort_desc"].ToString());

                        objModel.ecfremark = Convert.ToString(dt.Rows[i]["ecf_remark"].ToString());

                        objAttachment.Add(objModel);
                    }
                }
                return objAttachment;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAttachment;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }


        public IEnumerable<ApproverHistry> GetecfappHistory(string ecfgid, string invoicegid)
        {
            List<ApproverHistry> objDashBoard = new List<ApproverHistry>();
            try
            {
                int rowvalues = 0;
                HttpContext.Current.Session["NextApprover"] = null;
                string ecfmainraiser = "";
                ApproverHistry objModel;
                GetConnection();
                DataTable dt = new DataTable();
                DataTable dtr = new DataTable();
                string streject = "";
                string strejectraiserid = "";
                string strejectnew = "";
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_audittrail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Normal";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    string createmode = Convert.ToString(dt.Rows[0]["ecf_create_mode"].ToString());
                    if (createmode == "C" || createmode == "R")
                    {
                        DataTable dtcen = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_audittrail", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Normalcombinecen";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtcen);
                        if (dtcen.Rows.Count > 0)
                        {
                            for (int i = 0; i < dtcen.Rows.Count; i++)
                            {
                                if (i.ToString() == "0")
                                {
                                    string strinsert = Convert.ToString(dtcen.Rows[i]["ecf_insert_by"].ToString());
                                    string empcodnamer = Getempname(strinsert);
                                    string[] datarinr;
                                    datarinr = empcodnamer.Split(',');
                                    if (datarinr.Length > 1)
                                    {
                                        objModel = new ApproverHistry();
                                        //objModel.empcode = datarinr[0].ToString();
                                        //objModel.empname = datarinr[1].ToString() + " [ Central Team Maker ]";

                                        objModel.empcode = datarinr[0].ToString() + "-" + datarinr[1].ToString() + " [ Central Team Maker ]";
                                        objModel.empname = Gethrsdesi(datarinr[0].ToString());

                                        objModel.statusdate = Convert.ToString(dtcen.Rows[i]["queue_date"].ToString());
                                        objModel.remarks = Convert.ToString(dtcen.Rows[i]["ecf_remark"].ToString());
                                        objModel.status = "Submitted";
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);
                                    }
                                    string actions = Convert.ToString(dtcen.Rows[i]["queue_action_status"].ToString());
                                    if (actions != "0")
                                    {
                                        string empidchk = Convert.ToString(dtcen.Rows[i]["queue_action_by"].ToString());
                                        string empcodnamerchk = Getempname(empidchk);
                                        string[] datarinrchk;
                                        datarinrchk = empcodnamerchk.Split(',');
                                        if (datarinrchk.Length > 1)
                                        {
                                            objModel = new ApproverHistry();
                                            //objModel.empcode = datarinrchk[0].ToString();
                                            //objModel.empname = datarinrchk[1].ToString() + " [ Central Team Checker ]";

                                            objModel.empcode = datarinrchk[0].ToString() + "-" + datarinrchk[1].ToString() + " [ Central Team Checker ]";
                                            objModel.empname = Gethrsdesi(datarinrchk[0].ToString());

                                            objModel.statusdate = Convert.ToString(dtcen.Rows[i]["queue_action_date"].ToString());
                                            objModel.remarks = Convert.ToString(dtcen.Rows[i]["queue_action_remark"].ToString());
                                            status = Convert.ToString(dtcen.Rows[i]["queue_action_status"].ToString());
                                            if (status == "10")
                                            {
                                                objModel.status = "CT - Reject";
                                            }
                                            else if (status == "20")
                                            {
                                                objModel.status = "Rejected";
                                            }
                                            else
                                            {
                                                objModel.status = "Approved";
                                            }
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);
                                        }
                                    }
                                }
                                else
                                {
                                    string actionsnew = Convert.ToString(dtcen.Rows[i]["queue_action_status"].ToString());
                                    if (actionsnew != "0")
                                    {
                                        string empid = Convert.ToString(dtcen.Rows[i]["queue_to"].ToString());
                                        if (empid == "17")
                                        {
                                            string empidchkr = Convert.ToString(dtcen.Rows[i]["queue_action_by"].ToString());
                                            string empcodnamerchkr = Getempname(empidchkr);
                                            string[] datarinrchkr;
                                            datarinrchkr = empcodnamerchkr.Split(',');
                                            if (datarinrchkr.Length > 1)
                                            {
                                                objModel = new ApproverHistry();
                                                //objModel.empcode = datarinrchkr[0].ToString();
                                                //objModel.empname = datarinrchkr[1].ToString() + " [ Central Team Maker ]";

                                                objModel.empcode = datarinrchkr[0].ToString() + "-" + datarinrchkr[1].ToString() + " [ Central Team Maker ]";
                                                objModel.empname = Gethrsdesi(datarinrchkr[0].ToString());

                                                objModel.statusdate = Convert.ToString(dtcen.Rows[i]["queue_action_date"].ToString());
                                                objModel.remarks = Convert.ToString(dtcen.Rows[i]["queue_action_remark"].ToString());
                                                objModel.status = "Submitted";
                                                rowvalues++;
                                                objModel.rowcount = rowvalues;
                                                objDashBoard.Add(objModel);
                                            }
                                        }
                                        else if (empid == "18")
                                        {
                                            string empidchkrs = Convert.ToString(dtcen.Rows[i]["queue_action_by"].ToString());
                                            string empcodnamerchkrs = Getempname(empidchkrs);
                                            string[] datarinrchkrs;
                                            datarinrchkrs = empcodnamerchkrs.Split(',');
                                            if (datarinrchkrs.Length > 1)
                                            {
                                                objModel = new ApproverHistry();
                                                //objModel.empcode = datarinrchkrs[0].ToString();
                                                //objModel.empname = datarinrchkrs[1].ToString() + " [ Central Team Checker ]";

                                                objModel.empcode = datarinrchkrs[0].ToString() + "-" + datarinrchkrs[1].ToString() + " [ Central Team Checker ]";
                                                objModel.empname = Gethrsdesi(datarinrchkrs[0].ToString());

                                                objModel.statusdate = Convert.ToString(dtcen.Rows[i]["queue_action_date"].ToString());
                                                objModel.remarks = Convert.ToString(dtcen.Rows[i]["queue_action_remark"].ToString());
                                                status = Convert.ToString(dtcen.Rows[i]["queue_action_status"].ToString());
                                                if (status == "10")
                                                {
                                                    objModel.status = "CT - Reject";
                                                }
                                                else if (status == "20")
                                                {
                                                    objModel.status = "Rejected";
                                                }
                                                else
                                                {
                                                    objModel.status = "Approved";
                                                }
                                                rowvalues++;
                                                objModel.rowcount = rowvalues;
                                                objDashBoard.Add(objModel);
                                            }
                                        }
                                        else
                                        {
                                            streject = Convert.ToString(dtcen.Rows[i]["employee_gid"].ToString());
                                            string empcodnamer = Getempname(streject);
                                            string[] datar;
                                            datar = empcodnamer.Split(',');
                                            objModel = new ApproverHistry();
                                            //objModel.empcode = datar[0].ToString();
                                            //objModel.empname = datar[1].ToString();

                                            objModel.empcode = datar[0].ToString() + "-" + datar[1].ToString();
                                            objModel.empname = Gethrsdesi(datar[0].ToString());

                                            objModel.statusdate = Convert.ToString(dtcen.Rows[i]["queue_action_date"].ToString());
                                            objModel.remarks = Convert.ToString(dtcen.Rows[i]["queue_action_remark"].ToString());
                                            status = Convert.ToString(dtcen.Rows[i]["queue_action_status"].ToString());
                                            string statuspergid = Convert.ToString(dtcen.Rows[i]["queue_prev_gid"].ToString());
                                            if (status == "10")
                                            {
                                                objModel.status = "CT - Reject";
                                            }
                                            else if (status == "20")
                                            {
                                                objModel.status = "Rejected";
                                            }
                                            else
                                            {
                                                if (statuspergid == "0")
                                                {
                                                    objModel.status = "Reviewed";
                                                }
                                                else
                                                {
                                                    objModel.status = objCmnFunctions.GetQueueStatusHistry(status);
                                                }
                                            }
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);
                                        }
                                    }
                                }

                            }
                        }
                    }
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string pergid = Convert.ToString(dt.Rows[i]["queue_prev_gid"].ToString());
                        streject = Convert.ToString(dt.Rows[i]["queue_from"].ToString());
                        string streject11 = Convert.ToString(dt.Rows[i]["queue_to"].ToString());
                        string create_mode = Convert.ToString(dt.Rows[i]["ecf_create_mode"].ToString());
                        if (pergid == "0" || streject == "17")
                        {
                            strejectraiserid = streject;
                            if (streject == "17" && create_mode == "C")
                            {
                                string strinsert = Convert.ToString(dt.Rows[i]["ecf_insert_by"].ToString());
                                string empcodnamer = Getempname(strinsert);
                                string[] datarinr;
                                datarinr = empcodnamer.Split(',');
                                if (datarinr.Length > 1)
                                {
                                    objModel = new ApproverHistry();
                                    objModel.empcode = datarinr[0].ToString() + "-" + datarinr[1].ToString() + " [ Central Team Maker ]"; ;
                                    objModel.empname = Gethrsdesi(datarinr[0].ToString()); ;
                                    objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_date"].ToString());
                                    objModel.remarks = Convert.ToString(dt.Rows[i]["ecf_remark"].ToString());
                                    objModel.status = "Submitted";
                                    rowvalues++;
                                    objModel.rowcount = rowvalues;
                                    objDashBoard.Add(objModel);
                                }
                                string actions = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                if (actions != "0")
                                {
                                    string empidchk = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                                    string empcodnamerchk = Getempname(empidchk);
                                    string[] datarinrchk;
                                    datarinrchk = empcodnamerchk.Split(',');
                                    if (datarinrchk.Length > 1)
                                    {
                                        objModel = new ApproverHistry();
                                        objModel.empcode = datarinrchk[0].ToString() + "-" + datarinrchk[1].ToString() + " [ Central Team Checker ]"; ;
                                        objModel.empname = Gethrsdesi(datarinrchk[0].ToString());
                                        objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                        objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                        status = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                        if (status == "10")
                                        {
                                            objModel.status = "CT - Reject";
                                        }
                                        else if (status == "20")
                                        {
                                            objModel.status = "Rejected";
                                        }
                                        else
                                        {
                                            objModel.status = "Approved";
                                        }
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);
                                    }
                                }
                                else
                                {
                                    objModel = new ApproverHistry();
                                    string empcodnamegr = Getrolename(dt.Rows[i]["queue_to"].ToString());
                                    string[] data;
                                    data = empcodnamegr.Split(',');
                                    if (data.Length > 1)
                                    {
                                        objModel.empcode = "Role - " + data[1].ToString();
                                        objModel.empname = "";
                                    }
                                    objModel.statusdate = "";
                                    objModel.remarks = "";
                                    status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                    objModel.status = "Next Approver";
                                    rowvalues++;
                                    objModel.rowcount = rowvalues;
                                    objDashBoard.Add(objModel);

                                    HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                }
                            }
                            else
                            {
                                ecfmainraiser = streject;
                                string empcodnamer = Getempname(streject);
                                string[] datar;
                                datar = empcodnamer.Split(',');
                                objModel = new ApproverHistry();
                                if (datar.Length > 1)
                                {
                                    objModel.empcode = datar[0].ToString() + "-" + datar[1].ToString();
                                    objModel.empname = Gethrsdesi(datar[0].ToString());
                                }
                                objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_date"].ToString());
                                objModel.remarks = Convert.ToString(dt.Rows[i]["ecf_remark"].ToString());
                                objModel.status = "Submitted";
                                objModel.rowcount = rowvalues;
                                objDashBoard.Add(objModel);

                                string actions = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                if (actions != "0")
                                {
                                    string ecfstatus = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                    string empid = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                                    string empcodname = Getempname(empid);
                                    string[] data;
                                    data = empcodname.Split(',');
                                    string empiddel = Convert.ToString(dt.Rows[i]["queue_delegation_gid"].ToString());
                                    objModel = new ApproverHistry();
                                    if (data.Length > 1)
                                    {
                                        if (empid == empiddel || empiddel == "0")
                                        {
                                            objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                        }
                                        else
                                        {
                                            string empcodnamedel = Getempname(empiddel);
                                            string[] datadel;
                                            datadel = empcodnamedel.Split(',');
                                            objModel.empcode = datadel[0].ToString() + "-" + datadel[1].ToString() + " instead of " + data[0].ToString() + "-" + data[1].ToString();

                                        }
                                        objModel.empname = Gethrsdesi(data[0].ToString());
                                    }
                                    objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                    objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                    status = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                    if (ecfstatus == "1")
                                    {
                                        objModel.status = "Final Approver";
                                    }
                                    else
                                    {
                                        objModel.status = objCmnFunctions.GetQueueStatusHistry(status);
                                    }
                                    rowvalues++;
                                    objModel.rowcount = rowvalues;
                                    objDashBoard.Add(objModel);
                                }
                                else
                                {
                                    string queuetotype = Convert.ToString(dt.Rows[i]["queue_to_type"].ToString());
                                    if (queuetotype == "U")
                                    {
                                        //string empids = Convert.ToString(dt.Rows[i]["queue_to"].ToString());
                                        //string empcodname = Getempname(empids);
                                        //string[] data;
                                        //data = empcodname.Split(',');
                                        objModel = new ApproverHistry();
                                        //if (data.Length > 1)
                                        //{
                                        objModel.empcode = "Audit Maker";
                                        objModel.empname = "";
                                        //}
                                        objModel.statusdate = "";
                                        objModel.remarks = "";
                                        objModel.status = "Next Approver";
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);
                                        HttpContext.Current.Session["NextApprover"] = "Audit Maker";
                                    }
                                    else if (queuetotype == "D")
                                    {
                                        //string empids = Convert.ToString(dt.Rows[i]["queue_to"].ToString());
                                        //string empcodname = Getempname(empids);
                                        //string[] data;
                                        //data = empcodname.Split(',');
                                        objModel = new ApproverHistry();
                                        //if (data.Length > 1)
                                        //{
                                        objModel.empcode = "Head Human Capital";
                                        objModel.empname = "";
                                        //}
                                        objModel.statusdate = "";
                                        objModel.remarks = "";
                                        objModel.status = "Next Approver";
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);
                                        HttpContext.Current.Session["NextApprover"] = "Head Human Capital";
                                    }
                                    else
                                    {
                                        string empids = Convert.ToString(dt.Rows[i]["queue_to"].ToString());
                                        string empcodname = Getempname(empids);
                                        string[] data;
                                        data = empcodname.Split(',');
                                        objModel = new ApproverHistry();
                                        if (data.Length > 1)
                                        {
                                            objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                            objModel.empname = "";
                                        }
                                        objModel.statusdate = "";
                                        objModel.remarks = "";
                                        objModel.status = "Next Approver";
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);
                                        HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                    }
                                }
                            }
                        }
                        else
                        {
                            string queue_action_by = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                            if (queue_action_by == "")
                            {
                                string empidtype = Convert.ToString(dt.Rows[i]["queue_to_type"].ToString());
                                string empid = Convert.ToString(dt.Rows[i]["queue_to"].ToString());
                                if (empidtype == "E")
                                {
                                    if (empid != "")
                                    {
                                        if (strejectraiserid != empid)
                                        {
                                            string empcodname = Getempname(empid);
                                            string[] data;
                                            data = empcodname.Split(',');
                                            objModel = new ApproverHistry();
                                            if (data.Length > 1)
                                            {
                                                objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                                objModel.empname = "";
                                            }
                                            objModel.statusdate = "";
                                            objModel.remarks = "";
                                            status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                            objModel.status = "Next Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);
                                            HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                        }
                                    }
                                }
                                if (empidtype == "G")
                                {
                                    if (dt.Rows[i]["Additional_flag"].ToString() == "Y")
                                    {
                                        objModel = new ApproverHistry();
                                        string empcodnamegr = GetGradename(dt.Rows[i]["queue_to"].ToString());
                                        string[] data;
                                        data = empcodnamegr.Split(',');
                                        if (data.Length > 1)
                                        {
                                            objModel.empcode = "Grade - " + data[1].ToString();
                                            objModel.empname = "";
                                        }
                                        objModel.statusdate = "";
                                        objModel.remarks = "";
                                        status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                        objModel.status = "Next Approver";
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);

                                        HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                    }
                                    else
                                    {
                                        string getempgid = Getempheryname(dt.Rows[i]["ecf_raiser"].ToString(), "Grade", empid);
                                        if (getempgid != "0" && getempgid != "")
                                        {
                                            string empcodname = Getempname(getempgid);
                                            string[] data;
                                            data = empcodname.Split(',');
                                            objModel = new ApproverHistry();
                                            if (data.Length > 1)
                                            {
                                                objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                                objModel.empname = "";
                                            }
                                            objModel.statusdate = "";
                                            objModel.remarks = "";
                                            status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                            objModel.status = "Next Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);

                                            HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                        }
                                        else
                                        {
                                            objModel = new ApproverHistry();
                                            string empcodnamegr = GetGradename(dt.Rows[i]["queue_to"].ToString());
                                            string[] data;
                                            data = empcodnamegr.Split(',');
                                            if (data.Length > 1)
                                            {
                                                objModel.empcode = "Grade - " + data[1].ToString();
                                                objModel.empname = "";
                                            }
                                            objModel.statusdate = "";
                                            objModel.remarks = "";
                                            status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                            objModel.status = "Next Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);

                                            HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                        }
                                    }
                                }
                                if (empidtype == "D")
                                {
                                    if (dt.Rows[i]["Additional_flag"].ToString() == "Y")
                                    {
                                        objModel = new ApproverHistry();
                                        string empcodnamegr = GetDesignationname(dt.Rows[i]["queue_to"].ToString());
                                        string[] data;
                                        data = empcodnamegr.Split(',');
                                        if (data.Length > 1)
                                        {
                                            objModel.empcode = "Designation - " + data[1].ToString();
                                            objModel.empname = "";
                                        }
                                        objModel.statusdate = "";
                                        objModel.remarks = "";
                                        status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                        objModel.status = "Next Approver";
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);

                                        HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                    }
                                    else
                                    {
                                        string getempgid = Getempheryname(dt.Rows[i]["ecf_raiser"].ToString(), "Designation", empid);
                                        if (getempgid != "0" && getempgid != "")
                                        {
                                            string empcodname = Getempname(getempgid);
                                            string[] data;
                                            data = empcodname.Split(',');
                                            objModel = new ApproverHistry();
                                            if (data.Length > 1)
                                            {
                                                objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                                objModel.empname = "";
                                            }
                                            objModel.statusdate = "";
                                            objModel.remarks = "";
                                            status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                            objModel.status = "Next Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);

                                            HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();

                                        }
                                        else
                                        {
                                            objModel = new ApproverHistry();
                                            //string empcodnamegr = GetGradename(dt.Rows[i]["queue_to"].ToString()); //ramya modified 06 jul 2020 showing wrong code like B6,R4 etc
                                            string empcodnamegr = GetDesignationname(dt.Rows[i]["queue_to"].ToString());
                                            string[] data;
                                            data = empcodnamegr.Split(',');
                                            if (data.Length > 1)
                                            {
                                                objModel.empcode = "Designation - " + data[1].ToString();
                                                objModel.empname = "";
                                            }
                                            objModel.statusdate = "";
                                            objModel.remarks = "";
                                            status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                            objModel.status = "Next Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);

                                            HttpContext.Current.Session["NextApprover"] = "Designation - " + data[1].ToString();
                                        }
                                    }
                                }
                                if (empidtype == "R")
                                {
                                    if (dt.Rows[i]["Additional_flag"].ToString() == "Y")
                                    {
                                        objModel = new ApproverHistry();
                                        string empcodnamegr = Getrolename(dt.Rows[i]["queue_to"].ToString());
                                        string[] data;
                                        data = empcodnamegr.Split(',');
                                        if (data.Length > 1)
                                        {
                                            objModel.empcode = "Role - " + data[1].ToString();
                                            objModel.empname = "";
                                        }
                                        objModel.statusdate = "";
                                        objModel.remarks = "";
                                        status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                        objModel.status = "Next Approver";
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);

                                        HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                    }
                                    else
                                    {
                                        string getempgid = Getempheryname(ecfmainraiser, "Role Group", empid);
                                        if (getempgid != "0" && getempgid != "")
                                        {
                                            string empcodname = Getempname(getempgid);
                                            string[] data;
                                            data = empcodname.Split(',');
                                            objModel = new ApproverHistry();
                                            if (data.Length > 1)
                                            {
                                                objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                                objModel.empname = "";
                                            }
                                            objModel.statusdate = "";
                                            objModel.remarks = "";
                                            status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                            objModel.status = "Next Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);

                                            HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();

                                        }
                                        else
                                        {
                                            objModel = new ApproverHistry();
                                            string empcodnamegr = Getrolename(dt.Rows[i]["queue_to"].ToString());
                                            string[] data;
                                            data = empcodnamegr.Split(',');
                                            if (data.Length > 1)
                                            {
                                                objModel.empcode = "Role - " + data[1].ToString();
                                                objModel.empname = "";
                                            }
                                            objModel.statusdate = "";
                                            objModel.remarks = "";
                                            status = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());
                                            objModel.status = "Next Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);

                                            HttpContext.Current.Session["NextApprover"] = data[0].ToString() + "-" + data[1].ToString();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                strejectnew = Convert.ToString(dt.Rows[i]["employee_gid"].ToString());
                                if (strejectnew == streject)
                                {
                                    string actionsnew = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                    if (actionsnew != "0")
                                    {
                                        streject = Convert.ToString(dt.Rows[i]["employee_gid"].ToString());
                                        string empcodnamer = Getempname(streject);
                                        string[] datar;
                                        datar = empcodnamer.Split(',');
                                        objModel = new ApproverHistry();
                                        if (datar.Length > 1)
                                        {
                                            objModel.empcode = datar[0].ToString() + "-" + datar[1].ToString();
                                            objModel.empname = Gethrsdesi(datar[0].ToString()); ;
                                        }
                                        objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                        objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                        if (actionsnew == "4")
                                        {
                                            objModel.status = "Cancelled";
                                        }
                                        else
                                        {
                                            objModel.status = "Re-Submitted";
                                        }
                                        rowvalues++;
                                        objModel.rowcount = rowvalues;
                                        objDashBoard.Add(objModel);
                                    }
                                }
                                else
                                {
                                    string actionsecfstatus = Convert.ToString(dt.Rows[i]["queue_ref_status"].ToString());

                                    if (actionsecfstatus == "1" || actionsecfstatus == "20" || actionsecfstatus == "10")
                                    {
                                        if (actionsecfstatus != "20" && actionsecfstatus != "10")
                                        {
                                            string empid = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                                            string empiddel = Convert.ToString(dt.Rows[i]["queue_delegation_gid"].ToString());
                                            string empcodname = Getempname(empid);
                                            string[] data;
                                            data = empcodname.Split(',');
                                            objModel = new ApproverHistry();
                                            if (data.Length > 1)
                                            {
                                                if (empid == empiddel || empiddel == "0")
                                                {
                                                    objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                                }
                                                else
                                                {
                                                    string empcodnamedel = Getempname(empiddel);
                                                    string[] datadel;
                                                    datadel = empcodnamedel.Split(',');
                                                    objModel.empcode = datadel[0].ToString() + "-" + datadel[1].ToString() + " instead of " + data[0].ToString() + "-" + data[1].ToString();
                                                }
                                                objModel.empname = Gethrsdesi(data[0].ToString()); ;
                                            }
                                            objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                            objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                            objModel.status = "Final Approver";
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);
                                        }
                                    }
                                    else
                                    {
                                        string actionscc = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                        if (actionscc != "0")
                                        {
                                            string empid = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                                            string empiddel = Convert.ToString(dt.Rows[i]["queue_delegation_gid"].ToString());
                                            string empcodname = Getempname(empid);
                                            string[] data;
                                            data = empcodname.Split(',');
                                            objModel = new ApproverHistry();
                                            if (data.Length > 1)
                                            {
                                                if (empid == empiddel || empiddel == "0")
                                                {
                                                    objModel.empcode = data[0].ToString() + "-" + data[1].ToString();
                                                }
                                                else
                                                {
                                                    string empcodnamedel = Getempname(empiddel);
                                                    string[] datadel;
                                                    datadel = empcodnamedel.Split(',');
                                                    objModel.empcode = datadel[0].ToString() + "-" + datadel[1].ToString() + " instead of " + data[0].ToString() + "-" + data[1].ToString();
                                                }
                                                objModel.empname = Gethrsdesi(data[0].ToString());
                                            }
                                            objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                            objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                            status = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                            objModel.status = objCmnFunctions.GetQueueStatusHistry(status);
                                            rowvalues++;
                                            objModel.rowcount = rowvalues;
                                            objDashBoard.Add(objModel);
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
                var newList = objDashBoard.OrderByDescending(x => x.rowcount).ToList();
                return newList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<ApproverHistry> GetecfappHistorycen(string ecfgid, string invoicegid)
        {
            List<ApproverHistry> objDashBoard = new List<ApproverHistry>();
            try
            {

                ApproverHistry objModel;
                GetConnection();
                DataTable dt = new DataTable();
                DataTable dtr = new DataTable();
                string streject = "";
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_audittrail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Central";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string pergid = Convert.ToString(dt.Rows[i]["queue_prev_gid"].ToString());
                        if (pergid == "0")
                        {
                            string strinsert = Convert.ToString(dt.Rows[i]["ecf_insert_by"].ToString());
                            string empcodnamer = Getempname(strinsert);
                            string[] datarinr;
                            datarinr = empcodnamer.Split(',');
                            if (datarinr.Length > 1)
                            {
                                objModel = new ApproverHistry();
                                objModel.empcode = datarinr[0].ToString();
                                objModel.empname = datarinr[1].ToString() + " [ Central Team Maker ]";
                                objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_date"].ToString());
                                objModel.remarks = Convert.ToString(dt.Rows[i]["ecf_remark"].ToString());
                                objModel.status = "Submitted";
                                objDashBoard.Add(objModel);
                            }
                            string actions = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                            if (actions != "0")
                            {
                                string empidchk = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                                string empcodnamerchk = Getempname(empidchk);
                                string[] datarinrchk;
                                datarinrchk = empcodnamerchk.Split(',');
                                if (datarinrchk.Length > 1)
                                {
                                    objModel = new ApproverHistry();
                                    objModel.empcode = datarinrchk[0].ToString();
                                    objModel.empname = datarinrchk[1].ToString() + " [ Central Team Checker ]";
                                    objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                    objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                    status = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                    if (status == "10")
                                    {
                                        objModel.status = "CT - Reject";
                                    }
                                    else if (status == "20")
                                    {
                                        objModel.status = "Rejected";
                                    }
                                    else
                                    {
                                        objModel.status = "Approved";
                                    }
                                    objDashBoard.Add(objModel);
                                }
                            }
                        }
                        else
                        {
                            string actionsnew = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                            if (actionsnew != "0")
                            {
                                string empid = Convert.ToString(dt.Rows[i]["queue_to"].ToString());
                                if (empid == "17")
                                {
                                    string empidchkr = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                                    string empcodnamerchkr = Getempname(empidchkr);
                                    string[] datarinrchkr;
                                    datarinrchkr = empcodnamerchkr.Split(',');
                                    if (datarinrchkr.Length > 1)
                                    {
                                        objModel = new ApproverHistry();
                                        objModel.empcode = datarinrchkr[0].ToString();
                                        objModel.empname = datarinrchkr[1].ToString() + " [ Central Team Maker ]";
                                        objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                        objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                        objModel.status = "Submitted";
                                        objDashBoard.Add(objModel);
                                    }
                                }
                                else if (empid == "18")
                                {
                                    string empidchkrs = Convert.ToString(dt.Rows[i]["queue_action_by"].ToString());
                                    string empcodnamerchkrs = Getempname(empidchkrs);
                                    string[] datarinrchkrs;
                                    datarinrchkrs = empcodnamerchkrs.Split(',');
                                    if (datarinrchkrs.Length > 1)
                                    {
                                        objModel = new ApproverHistry();
                                        objModel.empcode = datarinrchkrs[0].ToString();
                                        objModel.empname = datarinrchkrs[1].ToString() + " [ Central Team Checker ]";
                                        objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                        objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                        status = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                        if (status == "10")
                                        {
                                            objModel.status = "CT - Reject";
                                        }
                                        else if (status == "20")
                                        {
                                            objModel.status = "Rejected";
                                        }
                                        else
                                        {
                                            objModel.status = "Approved";
                                        }
                                        objDashBoard.Add(objModel);
                                    }
                                }
                                else
                                {
                                    streject = Convert.ToString(dt.Rows[i]["employee_gid"].ToString());
                                    string empcodnamer = Getempname(streject);
                                    string[] datar;
                                    datar = empcodnamer.Split(',');
                                    objModel = new ApproverHistry();
                                    objModel.empcode = datar[0].ToString();
                                    objModel.empname = datar[1].ToString();
                                    objModel.statusdate = Convert.ToString(dt.Rows[i]["queue_action_date"].ToString());
                                    objModel.remarks = Convert.ToString(dt.Rows[i]["queue_action_remark"].ToString());
                                    status = Convert.ToString(dt.Rows[i]["queue_action_status"].ToString());
                                    if (status == "10")
                                    {
                                        objModel.status = "CT - Reject";
                                    }
                                    else if (status == "20")
                                    {
                                        objModel.status = "Rejected";
                                    }
                                    else
                                    {
                                        objModel.status = "Approved";
                                    }
                                    objDashBoard.Add(objModel);
                                }
                            }
                        }

                    }
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string Getempheryname(string empgid, string titlevalue, string titlegid)
        {
            string status = "";
            try
            {
                if (empgid != "" && titlegid != "")
                {
                    GetConnection();
                    cmd = new SqlCommand("pr_chk_employee_hierarchy", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                    cmd.Parameters.Add("@title_value_gid", SqlDbType.Int).Value = Convert.ToInt32(titlegid.ToString());
                    cmd.Parameters.Add("@title_name", SqlDbType.VarChar).Value = titlevalue.ToString();

                    cmd.Parameters.Add("@title_employee_gid", SqlDbType.Int, 64);
                    cmd.Parameters["@title_employee_gid"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@pr_err_output", SqlDbType.VarChar, 10000);
                    cmd.Parameters["@pr_err_output"].Direction = ParameterDirection.Output;

                    cmd.ExecuteNonQuery();

                    var result = Convert.ToString(cmd.Parameters["@title_employee_gid"].Value);
                    var sqlerrors = Convert.ToString(cmd.Parameters["@pr_err_output"].Value);
                    status = result.ToString();
                }
                return status;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string Getempname(string empgid)
        {
            string status = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_audittrail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "employeename";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    string raisername = Convert.ToString(dt.Rows[0]["employee_code"].ToString());
                    string raisercode = Convert.ToString(dt.Rows[0]["employee_name"].ToString());
                    status = raisername + "," + raisercode;
                }
                return status;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetGradename(string empgid)
        {
            string status = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_audittrail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetGradename";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    string raisername = Convert.ToString(dt.Rows[0]["grade_code"].ToString());
                    string raisercode = Convert.ToString(dt.Rows[0]["grade_name"].ToString());
                    status = raisername + "," + raisercode;
                }
                return status;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetDesignationname(string empgid)
        {
            string status = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_audittrail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetDesignationname";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    string raisername = Convert.ToString(dt.Rows[0]["designation_code"].ToString());
                    string raisercode = Convert.ToString(dt.Rows[0]["designation_name"].ToString());
                    status = raisername + "," + raisercode;
                }
                return status;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Getrolename(string empgid)
        {
            string status = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_audittrail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getrolename";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    string raisername = Convert.ToString(dt.Rows[0]["rolegroup_code"].ToString());
                    string raisercode = Convert.ToString(dt.Rows[0]["rolegroup_name"].ToString());
                    status = raisername + "," + raisercode;
                }
                return status;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Gethrsdesi(string empgid)
        {
            string status = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_audittrail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "empdesignation";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    string raisername = Convert.ToString(dt.Rows[0]["employee_hris_designation"].ToString());
                    status = raisername;
                }
                return status;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        /*  public void centralapprovedaction(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid, string queueamt, string checker_raisergid)
          {
              int EMPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["EMPdelmattype"].ToString());
              int SUPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["SUPdelmattype"].ToString());
              int EcfInprocess = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
              int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
              int ecfHold = Convert.ToInt32(ConfigurationManager.AppSettings["EcfHold"].ToString());
              int EcfConcurrentApproval = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApproval"].ToString());
              int EcfRejected = Convert.ToInt32(ConfigurationManager.AppSettings["EcfRejected"].ToString());
              int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
              int centralckecker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralchecker"].ToString());
              int centralckeckerreject = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralreject"].ToString());
              int centralckeckerrejectra = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCenraiserreject"].ToString());
              int centralckeckerapp = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralChk"].ToString());
              int centralteam = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralMkr"].ToString());
              string ecfdescriptions = "";
              try
              {
                  if (EmployeeeExpense.Rejecthold != null)
                  {
                      ecfdescriptions = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                  }
                  if (EmployeeeExpense.status == "Approve")
                  {
                      string[,] codesq = new string[,]
                                   {
                        {"queue_isremoved","Y"},
                        {"queue_action_date","sysdatetime()"},
                        {"queue_action_by",empgid.ToString() },
                        {"queue_action_status",EcfApproved.ToString() },
                        {"queue_action_remark",ecfdescriptions },
                        //{"queue_prev_gid", "-1"}
                                    };
                      string[,] whreq = new string[,]
                    {
                   {"queue_gid",queuegid.ToString() }
                   };
                      string tnameq = "iem_trn_tqueue";
                      string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                      string[,] codesIN = new string[,]
                                     {
                     {"queue_date","sysdatetime()"},
                     {"queue_ref_flag", "1"},
                     {"queue_ref_gid",ecfgid },
                     {"queue_ref_status", centralckeckerapp.ToString()},
                     {"queue_from",centralckecker.ToString()},
                     {"queue_to_type", "E"},
                     {"queue_to", checker_raisergid.ToString()},
                     {"queue_action_for", "A"}, 
                     {"queue_prev_gid", queuegid.ToString()}
                                    };
                      string tnameIN = "iem_trn_tqueue";

                      string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);

                      string[,] codes = new string[,]
                  {
                   {"ecf_all_status","1" },
                    {"ecf_status",centralckeckerapp.ToString() }
                  };

                      string[,] whre = new string[,]
                  {
                     {"ecf_gid",ecfgid }
                  };
                      string tname = "iem_trn_tecf";
                      string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                      if (checker_raisergid != "")
                      {
                          string[,] codesqctct = new string[,]
                                 {
                        {"centralinward_status","524288" }
                                };
                          string[,] whreqctct = new string[,]
                                 {
                      {"centralinward_ecf_gid",ecfgid }
                                };
                          string tnameqctc = "iem_trn_tcentralinward";
                          string insertcommendqc = objCommonIUD.UpdateCommon(codesqctct, whreqctct, tnameqctc);
                      }
                      else
                      {
                          string[,] codesqctct = new string[,]
                                 {
                        {"centralinward_status","524288" }
                                };
                          string[,] whreqctct = new string[,]
                                 {
                      {"centralinward_ecf_gid",ecfgid }
                                };
                          string tnameqctc = "iem_trn_tcentralinward";
                          string insertcommendqc = objCommonIUD.UpdateCommon(codesqctct, whreqctct, tnameqctc);
                      }

                      string queue_gid = "";
                      GetConnection();
                      DataTable dtempsupnew = new DataTable();
                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = centralckecker.ToString();
                      cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtempsupnew);
                      if (dtempsupnew.Rows.Count > 0)
                      {
                          queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                      }

                      string mail = queue_gid.ToString();
                      GetConnection();
                      DataTable dtdoctype = new DataTable();
                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtdoctype);
                      if (dtdoctype.Rows.Count > 0)
                      {
                          string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                          doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                          //  mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                      }

                  }
                  else if (EmployeeeExpense.status == "Reject")
                  {
                      string rejectstatus = "0";
                      string raiser = "";
                      GetConnection();
                      DataTable dtdoctypedata = new DataTable();
                      cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "TYPEDL";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtdoctypedata);
                      if (dtdoctypedata.Rows.Count > 0)
                      {
                          raiser = Convert.ToString(dtdoctypedata.Rows[0]["ecf_raiser"].ToString());
                      }

                      if (raiser == objCmnFunctions.GetLoginUserGid().ToString())
                      {
                          rejectstatus = centralckeckerrejectra.ToString();
                      }
                      else
                      {
                          rejectstatus = centralckeckerreject.ToString();
                      }

                      string[,] codes = new string[,]
                     {
                         {"ecf_all_status",rejectstatus.ToString() },
                         {"ecf_status",rejectstatus.ToString() },
                    };

                      string[,] whre = new string[,]
                     {
                           {"ecf_gid",ecfgid }
                    };
                      string tname = "iem_trn_tecf";
                      string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                      string Emp_Msgsuper = "";
                      DataTable dtempsup = new DataTable();
                      GetConnection();
                      cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getqueuefromreject";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtempsup);

                      if (dtempsup.Rows.Count > 0)
                      {
                          Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["queue_from"].ToString());

                          string[,] codesq = new string[,]
                     {
                        {"queue_isremoved","Y"},
                        {"queue_action_date","sysdatetime()"},
                        {"queue_action_by",empgid.ToString() },
                        {"queue_action_status",rejectstatus.ToString() },
                        {"queue_action_remark",ecfdescriptions },
                         //{"queue_prev_gid", "-1"}
                    };
                          string[,] whreq = new string[,]
                     {
                            {"queue_gid",queuegid.ToString() }
                    };
                          string tnameq = "iem_trn_tqueue";
                          string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                          string[,] codesIN = new string[,]
                     {
          {"queue_date","sysdatetime()"},
          {"queue_ref_flag", "1"},
          {"queue_ref_gid",ecfgid },
          {"queue_ref_status", rejectstatus.ToString()},
          {"queue_from",empgid },
          {"queue_to_type", "R"},
          {"queue_to", centralmaker.ToString()},
          {"queue_action_for", "R"},  
          {"queue_prev_gid", queuegid.ToString()}
                    };
                          string tnameIN = "iem_trn_tqueue";

                          string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);
                      }

                      string[,] codesqctct = new string[,]
                                 {
                        {"centralinward_status",rejectstatus.ToString() }
                                };
                      string[,] whreqctct = new string[,]
                                 {
                      {"centralinward_ecf_gid",ecfgid }
                                };
                      string tnameqctc = "iem_trn_tcentralinward";
                      string insertcommendqc = objCommonIUD.UpdateCommon(codesqctct, whreqctct, tnameqctc);

                      string queue_gid = "";
                      GetConnection();
                      DataTable dtempsupnew = new DataTable();
                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Emp_Msgsuper.ToString();
                      cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtempsupnew);
                      if (dtempsupnew.Rows.Count > 0)
                      {
                          queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                      }

                      string mail = queue_gid.ToString();
                      GetConnection();
                      DataTable dtdoctype = new DataTable();
                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtdoctype);
                      if (dtdoctype.Rows.Count > 0)
                      {
                          string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                          doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                          // mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                      }
                  }
              }
              catch (Exception ex)
              {
                  objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

              }
              finally
              {
                  con.Close();
                  da.Dispose();
              }
          }*/


        public string centralapprovedaction(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid, string queueamt, string checker_raisergid)
        {
            int EMPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["EMPdelmattype"].ToString());
            int SUPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["SUPdelmattype"].ToString());
            int EcfInprocess = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
            int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
            int ecfHold = Convert.ToInt32(ConfigurationManager.AppSettings["EcfHold"].ToString());
            int EcfConcurrentApproval = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApproval"].ToString());
            int EcfRejected = Convert.ToInt32(ConfigurationManager.AppSettings["EcfRejected"].ToString());
            int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
            int centralckecker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralchecker"].ToString());
            int centralckeckerreject = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralreject"].ToString());
            int centralckeckerrejectra = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCenraiserreject"].ToString());
            int centralckeckerapp = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralChk"].ToString());
            int centralteam = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralMkr"].ToString());
            string ecfdescriptions = "";
            string Emp_Msg = "";
            try
            {
                if (EmployeeeExpense.Rejecthold != null)
                {
                    ecfdescriptions = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                }

                GetConnection();
                cmd = new SqlCommand("PR_EOW_COM_ECFQUEUEUPDATE", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@QUEUEGID", SqlDbType.VarChar).Value = queuegid.ToString();
                cmd.Parameters.Add("@QUEUEACTIONBY", SqlDbType.VarChar).Value = empgid.ToString();
                cmd.Parameters.Add("@QUEUEACTIONSTATUS", SqlDbType.VarChar).Value = EmployeeeExpense.status;
                cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                cmd.Parameters.Add("@ECFRAISER", SqlDbType.VarChar).Value = checker_raisergid;
                cmd.Parameters.Add("@ECFREMARK", SqlDbType.VarChar).Value = ecfdescriptions;
                cmd.Parameters.Add("@ECFDESC", SqlDbType.VarChar).Value = ecfdescriptions;
                cmd.Parameters.Add("@loginuserid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "centralapprovedaction";
                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                Emp_Msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return Emp_Msg = "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        /*  public void raiseapprovedaction(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid, string queueamt, string checker_raisergid)
          {
              int EcfInprocess = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
              int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
              string Emp_Msgsuper = "";
              string Emp_remarks = "";
              try
              {
                  if (EmployeeeExpense.Rejecthold != null)
                  {
                      Emp_remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                  }
                  string[,] codesq = new string[,]
                                 {
                        {"queue_isremoved","Y"},
                        {"queue_action_date","sysdatetime()"},
                        {"queue_action_by",empgid.ToString() },
                        {"queue_action_status",EcfApproved.ToString()},
                        {"queue_ref_status",EcfInprocess.ToString() },
                        {"queue_action_remark", Emp_remarks}
                                };
                  string[,] whreq = new string[,]
                                 {
                      {"queue_gid",queuegid.ToString() }
                                };
                  string tnameq = "iem_trn_tqueue";
                  string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                  //string[,] codesall = new string[,]
                  //{
                  //{"queue_prev_gid", "-1"}
                  //};

                  //string[,] whreall = new string[,]
                  //{
                  //{"queue_from","17" },
                  //{"queue_from","18" },
                  //{"queue_ref_flag", "1"},
                  //{"queue_ref_gid",ecfgid },
                  //};

                  //string tnameall = "iem_trn_tqueue";
                  //string insertcommendall = objCommonIUD.UpdateCommon(codesall, whreall, tnameall);

                  DataTable dtempsup = new DataTable();
                  GetConnection();
                  cmd = new SqlCommand("pr_eow_com_empdetails", con);
                  cmd.CommandType = CommandType.StoredProcedure;
                  cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = empgid;
                  cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                  da = new SqlDataAdapter(cmd);
                  da.Fill(dtempsup);
                  if (dtempsup.Rows.Count > 0)
                  {
                      Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["employee_supervisor"].ToString());

                      string[,] codes = new string[,]
                       {
                           {"queue_date","sysdatetime()"},
                           {"queue_ref_flag", "1"},
                           {"queue_ref_gid",ecfgid },
                           {"queue_ref_status", EcfInprocess.ToString()},
                           {"queue_from",empgid },
                           {"queue_to_type", "E"},
                           {"queue_to",Emp_Msgsuper.ToString()},
                           {"queue_action_for", "A"},    
                           {"queue_prev_gid", queuegid.ToString()}
                      };

                      string tname = "iem_trn_tqueue";

                      string insertcommendecf = objCommonIUD.InsertCommon(codes, tname);

                      string[,] codesg = new string[,]
                     {
                         {"ecf_all_status",EcfInprocess.ToString() },
                         {"ecf_status",EcfInprocess.ToString() },
                         {"ecf_remark",Emp_remarks.ToString() },
                    };

                      string[,] whreg = new string[,]
                     {
                           {"ecf_gid",ecfgid }
                    };
                      string tnameg = "iem_trn_tecf";
                      string insertcommend = objCommonIUD.UpdateCommon(codesg, whreg, tnameg);

                      string[,] codesqctct = new string[,]
                                 {
                        {"centralinward_status","32" }
                                };
                      string[,] whreqctct = new string[,]
                                 {
                      {"centralinward_ecf_gid",ecfgid }
                                };
                      string tnameqctc = "iem_trn_tcentralinward";
                      string insertcommendqc = objCommonIUD.UpdateCommon(codesqctct, whreqctct, tnameqctc);

                      string queue_gid = "";
                      GetConnection();
                      DataTable dtempsupnew = new DataTable();
                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                      cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtempsupnew);
                      if (dtempsupnew.Rows.Count > 0)
                      {
                          queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                      }

                      string mail = queue_gid.ToString();
                      GetConnection();
                      DataTable dtdoctype = new DataTable();
                      cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                      cmd.CommandType = CommandType.StoredProcedure;
                      cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                      cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                      da = new SqlDataAdapter(cmd);
                      da.Fill(dtdoctype);
                      if (dtdoctype.Rows.Count > 0)
                      {
                          string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                          doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                          mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                      }
                  }
              }
              catch (Exception ex)
              {
                  objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

              }
              finally
              {
                  con.Close();
                  da.Dispose();
              }
          }*/

        /*public void raiseapprovedaction(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid, string queueamt, string checker_raisergid)
        {
            int EcfInprocess = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
            int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
            string Emp_Msgsuper = "";
            string Emp_remarks = "";
            string Emp_Msg = "";
            try
            {
                if (EmployeeeExpense.Rejecthold != null)
                {
                    Emp_remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                }
                GetConnection();
                cmd = new SqlCommand("PR_EOW_COM_ECFQUEUEUPDATE", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@QUEUEGID", SqlDbType.VarChar).Value = queuegid.ToString();
                //cmd.Parameters.Add("@QUEUEREFGID", SqlDbType.VarChar).Value = ;
                cmd.Parameters.Add("@QUEUEACTIONBY", SqlDbType.VarChar).Value = empgid.ToString();
                cmd.Parameters.Add("@QUEUEACTIONSTATUS", SqlDbType.VarChar).Value = EmployeeeExpense.status;
                cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                cmd.Parameters.Add("@ECFRAISER", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@ECFREMARK", SqlDbType.VarChar).Value = Emp_remarks;
                cmd.Parameters.Add("@ECFDESC", SqlDbType.VarChar).Value = Emp_remarks;
                //cmd.Parameters.Add("@ECFAMORTFLAG", SqlDbType.VarChar).Value = .amort.ToString();
                cmd.Parameters.Add("@loginuserid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "raiseapprovedaction";
                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();
                Emp_Msg = Convert.ToString(cmd.Parameters["@MSG"].Value);

                string queue_gid = "";
                //     GetConnection();
                DataTable dtempsupnew = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtempsupnew);
                if (dtempsupnew.Rows.Count > 0)
                {
                    queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                }

                string mail = queue_gid.ToString();
                //   GetConnection();
                DataTable dtdoctype = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdoctype);
                if (dtdoctype.Rows.Count > 0)
                {
                    string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                    doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                    mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                }
            }

            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }*/

        public void raiseapprovedaction(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid, string queueamt, string checker_raisergid)
        {
            int EcfInprocess = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
            int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
            string Emp_Msgsuper = "";
            string Emp_remarks = "";
            string Emp_Msg = "";
            try
            {
                if (EmployeeeExpense.Rejecthold != null)
                {
                    Emp_remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                }
                GetConnection();
                cmd = new SqlCommand("PR_EOW_COM_ECFQUEUEUPDATE", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@QUEUEGID", SqlDbType.VarChar).Value = queuegid.ToString();

                cmd.Parameters.Add("@QUEUEACTIONBY", SqlDbType.VarChar).Value = empgid.ToString();
                cmd.Parameters.Add("@QUEUEACTIONSTATUS", SqlDbType.VarChar).Value = EmployeeeExpense.status;
                cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                cmd.Parameters.Add("@ECFRAISER", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@ECFREMARK", SqlDbType.VarChar).Value = Emp_remarks;
                cmd.Parameters.Add("@ECFDESC", SqlDbType.VarChar).Value = Emp_remarks;

                cmd.Parameters.Add("@loginuserid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "raiseapprovedaction";
                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();
                Emp_Msg = Convert.ToString(cmd.Parameters["@MSG"].Value);

                string queue_gid = "";

                DataTable dtempsupnew = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtempsupnew);
                if (dtempsupnew.Rows.Count > 0)
                {
                    queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                }

                string mail = queue_gid.ToString();
                string doctypeid = "";
                DataSet dtdoctype = new DataSet();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdoctype);
                if (dtdoctype.Tables[0].Rows.Count > 0)
                {
                    doctypeid = Convert.ToString(dtdoctype.Tables[0].Rows[0]["docsubtype_gid"].ToString());
                    doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                    mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                }


                if (dtdoctype.Tables[2].Rows.Count > 0)
                {
                    for (int i = 0; i < dtdoctype.Tables[2].Rows.Count; i++)
                    {
                        string queueidformail = Convert.ToString(dtdoctype.Tables[2].Rows[0]["queue_gid"].ToString());
                        mailsender.sendusermail("EOW", doctypeid, queueidformail, "A", "0");
                    }
                }
            }

            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string ecfclaimappvol(string gid)
        {
            try
            {
                string stremp = "0";
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Convert.ToString(gid);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpSupperdesc";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    stremp = dt.Rows[0]["employee_iem_designation"].ToString();
                }
                else
                {
                    stremp = "0";
                }
                return stremp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        /*public string Insertapprovedaction(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid, string queueamt, string checker_raisergid, string delegates)
        {
            string err_msg = "";
            try
            {
                string Ecfdesignation = Convert.ToString(ConfigurationManager.AppSettings["Ecfdesignation"].ToString());
                int EMPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["EMPdelmattype"].ToString());
                int SUPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["SUPdelmattype"].ToString());
                int EcfInprocess = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
                int ecfHold = Convert.ToInt32(ConfigurationManager.AppSettings["EcfHold"].ToString());
                int EcfConcurrentApproval = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApproval"].ToString());
                int EcfRejected = Convert.ToInt32(ConfigurationManager.AppSettings["EcfRejected"].ToString());
                int centralckeckerreject = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCenraiserreject"].ToString());
                int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());

                if (ecftype == "ECRegular" || ecftype == "ECTravel" || ecftype == "ECLocal" || ecftype == "EcfSupplierDSA" || ecftype == "EcfSupplier")
                {
                    //------------------------------------------------------To Select Approve Status -------------
                    Hashtable Togetlist = new Hashtable();
                    Togetlist = (Hashtable)HttpContext.Current.Session["Queue_delegateslist"];

                    if (Togetlist.ContainsKey(queuegid))
                    {
                        empgid = Togetlist[queuegid].ToString();
                    }
                    if (EmployeeeExpense.status == "Approve")
                    {
                        GetConnection();
                        cmd = new SqlCommand("pr_ecfdelmat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());

                        cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                        cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_final_flag", SqlDbType.Char, 1, "N");
                        cmd.Parameters["@ecf_final_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                        cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;
                        cmd.CommandTimeout = 0;
                        cmd.ExecuteNonQuery();

                        var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                        var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                        var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                        var finalapprver = Convert.ToString(cmd.Parameters["@ecf_final_flag"].Value);
                        var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                        var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                        var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);

                        string Additionalflagnewq = "N";
                        string titlevalues = "";
                        titlevalues = Flag.ToString();
                        string Emp_designation = "";
                         Emp_designation = ecfclaimappvol(ecfgid);
                        if (Emp_designation == "0")
                        {
                            err_msg = "Invalid Approver.";
                            return err_msg;
                        }
                        if (Emp_designation == Ecfdesignation)
                        {
                            demmatresult = "1";
                            result = "0";
                            Flag = "E";
                            finalapprver = "Y";
                        }

                        //Kavitha added
                        if (Emp_designation.Trim() == "President")
                        {
                            demmatresult = "1";
                            result = "0";
                            Flag = "E";
                            finalapprver = "Y";
                        }
                        if (result == "0" || result == "" || result == " " || result == null || Emp_designation.Trim() == "President")
                        {
                            objErrorLog.WriteErrorLog("Employee supervisor is empty : Emp_designation=" + Emp_designation.Trim() + "ecfgid =" + ecfgid + "", "Ecfdesignation =" + Ecfdesignation + "Final approver =" + finalapprver + "demmatresult=" + demmatresult);
                        }

                        //Kavitha added

                        string remarks = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                        }

                        if (demmatresult != "0" && demmatresult != "")
                        {
                            if (finalapprver != "Y" && (Emp_designation.Trim() != "President"))
                            {
                                if (Additionalflagnew != null)
                                {
                                    if (Additionalflagnew.ToString() == "Y")
                                    {
                                        Additionalflagnewq = "Y";
                                    }
                                    else
                                    {
                                        Additionalflagnewq = "N";
                                    }
                                }

                                string[,] codesq = new string[,]
	                             {
                                      {"queue_isremoved","Y"},
                                      {"queue_action_date","sysdatetime()"},
                                      {"queue_action_by",empgid.ToString() },
                                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                                      {"queue_action_status",EcfApproved.ToString() },
                                      {"queue_action_remark", remarks}
                                  };
                                string[,] whreq = new string[,]
	                             {
                                     {"queue_gid",queuegid.ToString() }
                                };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                                if (insertcommendq == "Success")
                                {
                                    string[,] codesIN = new string[,]
	                               {
                                        {"queue_date","sysdatetime()"},
	                                    {"queue_ref_flag", "1"},
                                        {"queue_ref_gid",ecfgid },
	                                    {"queue_ref_status", EcfInprocess.ToString()},
                                        {"queue_from",empgid },
	                                    {"queue_to_type", titlevalues.ToString()},
                                        {"queue_to", result.ToString()},
	                                    {"queue_action_for", "A"}, 
                                        {"Additional_flag", Additionalflagnewq.ToString()}, 
                                        {"queue_prev_gid", queuegid.ToString()}
                                  };
                                    string tnameIN = "iem_trn_tqueue";

                                    string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);

                                    if (insertcommendecf == "success")
                                    {
                                        string[,] codes = new string[,]
                                    {
                                      {"ecf_all_status",EcfApproved.ToString() }
                                    };

                                        string[,] whre = new string[,]
                                   {
                                     {"ecf_gid",ecfgid }
                                  };
                                        string tname = "iem_trn_tecf";
                                        string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);
                                    }
                                    else
                                    {
                                        return insertcommendecf;
                                    }
                                }
                                else
                                {
                                    return insertcommendq;
                                }
                            }
                            else
                            {
                                string[,] codesq = new string[,]
	                             {
                                      {"queue_isremoved","Y"},
                                      {"queue_action_date","sysdatetime()"},
                                      {"queue_action_by",empgid.ToString() },
                                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                                      {"queue_action_status",EcfApproved.ToString() },
                                      {"queue_ref_status",EcfApproved.ToString() },
                                      {"queue_action_remark", remarks}
                                  };
                                string[,] whreq = new string[,]
	                             {
                                     {"queue_gid",queuegid.ToString() }
                                };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                                if (insertcommendq == "Success")
                                {
                                    string[,] codesIN = new string[,]
	                               {
                                        {"queue_date","sysdatetime()"},
	                                    {"queue_ref_flag", "1"},
                                        {"queue_ref_gid",ecfgid },
	                                    {"queue_ref_status", "64"},
                                        {"queue_from",empgid },
	                                    {"queue_to_type","U"},
                                        {"queue_to", "43"},
	                                    {"queue_action_for", "A"}, 
                                        {"Additional_flag", Additionalflagnewq.ToString()}, 
                                        {"queue_prev_gid", queuegid.ToString()}
                                  };
                                    string tnameIN = "iem_trn_tqueue";

                                    string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);
                                    if (insertcommendecf == "success")
                                    {
                                        string[,] codes = new string[,]
                                    {
                                      {"ecf_status",EcfApproved.ToString() },
                                      {"ecf_all_status",EcfApproved.ToString() }
                                    };

                                        string[,] whre = new string[,]
                                   {
                                     {"ecf_gid",ecfgid }
                                  };
                                        string tname
                                            = "iem_trn_tecf";
                                        string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);


















                                        GetConnection();
                                        cmd = new SqlCommand("pr_eow_com_eowtofsmoveddata", con);
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                                        cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "INSETINTO";
                                        cmd.CommandTimeout = 0;
                                        int i = cmd.ExecuteNonQuery();
                                    }
                                    else
                                    {
                                        return insertcommendecf;
                                    }
                                }
                                else
                                {
                                    return insertcommendq;
                                }
                            }
                            err_msg = "Sucess";
                            string queue_gid = "";
                            GetConnection();
                            DataTable dtempsupnew = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtempsupnew);
                            if (dtempsupnew.Rows.Count > 0)
                            {
                                queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                            }

                            string mail = queue_gid.ToString();
                            GetConnection();
                            DataTable dtdoctype = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtdoctype);
                            if (dtdoctype.Rows.Count > 0)
                            {
                                string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                            }
                            err_msg = "Sucess";
                            return err_msg;
                        }
                        else
                        {
                            //err_msg = ecferrors + sqlerrors;
                            err_msg = sqlerrors;
                            return err_msg;
                        }

                    }
                    //------------------------------------------------------To Select Reject Status -------------
                    else if (EmployeeeExpense.status == "Reject")
                    {
                        string doctyoeandmode = "";
                        DataTable dtrejectcon = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "TYPEDL";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtrejectcon);
                        if (dtrejectcon.Rows.Count > 0)
                        {
                            doctyoeandmode = Convert.ToString(dtrejectcon.Rows[0]["ecf_create_mode"].ToString());

                            if (doctyoeandmode == "S" || doctyoeandmode == "P")
                            {













                                string[,] codesq = new string[,]
	               {
                      {"queue_isremoved","Y"},
                      {"queue_action_date","sysdatetime()"},
                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                      {"queue_action_by",empgid.ToString() },
                      {"queue_action_status",EcfRejected.ToString() },
                      {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold.ToString())}
                  };
                                string[,] whreq = new string[,]
	               {
                          {"queue_gid",queuegid.ToString() }
                  };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);
                                if (insertcommendq == "Success")
                                {
                                    string Emp_Msgsuper = "";
                                    DataTable dtempsup = new DataTable();
                                    GetConnection();
                                    cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getqueuefromreject";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtempsup);
                                    if (dtempsup.Rows.Count > 0)
                                    {
                                        Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["queue_from"].ToString());

                                        string[,] codesIN = new string[,]
	               {
        {"queue_date","sysdatetime()"},
	    {"queue_ref_flag", "1"},
        {"queue_ref_gid",ecfgid },
	    {"queue_ref_status", EcfRejected.ToString()},
        {"queue_from",empgid },
	    {"queue_to_type", "E"},
        {"queue_to", Emp_Msgsuper.ToString()},
	    {"queue_action_for", "R"},  
        {"queue_prev_gid", queuegid.ToString()}
                  };
                                        string tnameIN = "iem_trn_tqueue";

                                        string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);
                                        if (insertcommendecf == "success")
                                        {
                                            string[,] codes = new string[,]
	               {
                       {"ecf_all_status",EcfRejected.ToString() },
                        {"ecf_status",EcfRejected.ToString() },
                  };

                                            string[,] whre = new string[,]
	               {
                         {"ecf_gid",ecfgid }
                  };
                                            string tname = "iem_trn_tecf";
                                            string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);
                                        }
                                        else
                                        {
                                            return insertcommendecf;
                                        }

                                    }
                                    err_msg = "Sucess";
                                    string queue_gid = "";
                                    GetConnection();
                                    DataTable dtempsupnew = new DataTable();
                                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtempsupnew);
                                    if (dtempsupnew.Rows.Count > 0)
                                    {
                                        queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                                    }

                                    string mail = queue_gid.ToString();
                                    GetConnection();
                                    DataTable dtdoctype = new DataTable();
                                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtdoctype);
                                    if (dtdoctype.Rows.Count > 0)
                                    {
                                        string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                        doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                        mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                                    }
                                    err_msg = "Sucess";
                                    return err_msg;
                                }
                                else
                                {
                                    return insertcommendq;
                                }
                            }
                            else
                            {




                                string[,] codesq = new string[,]
	               {
                      //{"queue_prev_gid", "-1"},
                      {"queue_isremoved","Y"},
                      {"queue_action_date","sysdatetime()"},
                      {"queue_action_by",empgid.ToString() },
                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                      {"queue_action_status",centralckeckerreject.ToString() },
                      {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold.ToString()) }
                  };
                                string[,] whreq = new string[,]
	               {
                          {"queue_gid",queuegid.ToString() }
                  };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);
                                if (insertcommendq == "Success")
                                {
                                    string Emp_Msgsuper = "";
                                    DataTable dtempsup = new DataTable();
                                    GetConnection();
                                    cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getqueuefromreject";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtempsup);

                                    if (dtempsup.Rows.Count > 0)
                                    {
                                        Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["queue_from"].ToString());


















                                        string[,] codesIN = new string[,]
	               {
        {"queue_date","sysdatetime()"},
	    {"queue_ref_flag", "1"},
        {"queue_ref_gid",ecfgid },
	    {"queue_ref_status", centralckeckerreject.ToString()},
        {"queue_from",empgid },
	    {"queue_to_type", "R"},
        {"queue_to", centralmaker.ToString()},
	    {"queue_action_for", "R"},  
        {"queue_prev_gid", queuegid.ToString()}
                  };
                                        string tnameIN = "iem_trn_tqueue";

                                        string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);
                                        if (insertcommendecf == "success")
                                        {
                                            string[,] codes = new string[,]
	               {
                       {"ecf_all_status",centralckeckerreject.ToString() },
                       {"ecf_status",centralckeckerreject.ToString() },
                  };

                                            string[,] whre = new string[,]
	               {
                         {"ecf_gid",ecfgid }
                  };
                                            string tname = "iem_trn_tecf";
                                            string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                                            string[,] codesqctct = new string[,]
	                           {
                      {"centralinward_status",centralckeckerreject.ToString() }
                              };
                                            string[,] whreqctct = new string[,]
	                           {
                    {"centralinward_ecf_gid",ecfgid }
                              };
                                            string tnameqctc = "iem_trn_tcentralinward";
                                            string insertcommendqc = objCommonIUD.UpdateCommon(codesqctct, whreqctct, tnameqctc);
                                        }
                                        else
                                        {
                                            return insertcommendecf;
                                        }
                                    }

                                    string queue_gid = "";
                                    GetConnection();
                                    DataTable dtempsupnew = new DataTable();
                                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Emp_Msgsuper.ToString();
                                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtempsupnew);
                                    if (dtempsupnew.Rows.Count > 0)
                                    {
                                        queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                                    }

                                    string mail = queue_gid.ToString();
                                    GetConnection();
                                    DataTable dtdoctype = new DataTable();
                                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtdoctype);
                                    if (dtdoctype.Rows.Count > 0)
                                    {
                                        string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                        doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                        mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                                    }
                                    err_msg = "Sucess";
                                    return err_msg;
                                }
                                else
                                {
                                    return insertcommendq;
                                }
                            }
                        }
                    }
                    //------------------------------------------------------To Select Hold Status -------------
                    else if (EmployeeeExpense.status == "Hold")
                    {
                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }
                        string[,] codes = new string[,]
	               {
        {"ecf_all_status",ecfHold.ToString() }
                  };

                        string[,] whre = new string[,]
	               {
        {"ecf_gid",ecfgid }
                  };
                        string tname = "iem_trn_tecf";
                        string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                        string[,] codesq = new string[,]
	               {
          //{"queue_isremoved","Y"},
          {"queue_action_date","sysdatetime()"},
          {"queue_action_by",empgid.ToString() },
          {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
          {"queue_action_status",ecfHold.ToString() },
          {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString())}
                  };
                        string[,] whreq = new string[,]
	               {
        {"queue_gid",queuegid.ToString() }
                  };
                        string tnameq = "iem_trn_tqueue";
                        string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                        string[,] codesqh = new string[,]
	               {
          {"ecfhold_ecf_gid",ecfgid.ToString() },
          {"ecfhold_queue_gid",queuegid.ToString() },
          {"ecfhold_date", "sysdatetime()"},
          {"ecfhold_by",empgid.ToString() },
          {"ecfhold_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString()) },
          {"ecfhold_status","0" }
                  };

                        string tnameqh = "iem_trn_tecfhold";
                        string insertcommendqh = objCommonIUD.InsertCommon(codesqh, tnameqh);

                        err_msg = "Sucess";
                        return err_msg;

                    }
                    //------------------------------------------------------To Select Concurrent Approval Status -------------
                    else if (EmployeeeExpense.status == "Concurrent")
                    {
                        string Concurrentmsg = "";
                        if (EmployeeeExpense.Concurrentmsg != null)
                        {
                            Concurrentmsg = EmployeeeExpense.Concurrentmsg;
                        }
                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }

                        string[,] codes = new string[,]
	               {
                     {"ecf_all_status",EcfConcurrentApproval.ToString() }
                  };

                        string[,] whre = new string[,]
	               {
                      {"ecf_gid",ecfgid }
                  };
                        string tname = "iem_trn_tecf";
                        string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);


                        string[,] codesCC = new string[,]
	               {
        {"queue_isremoved","Y"},
        {"queue_action_date","sysdatetime()"},
        {"queue_action_by",empgid.ToString() },
        {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
        {"queue_action_status",EcfConcurrentApproval.ToString() },
        {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(Concurrentmsg.ToString()) }
                  };

                        string[,] whreCC = new string[,]
	               {
        {"queue_gid",queuegid.ToString() }
                  };
                        string tnameCC = "iem_trn_tqueue";
                        insertcommend = objCommonIUD.UpdateCommon(codesCC, whreCC, tnameCC);



                        string[,] codesIN = new string[,]
	               {
        {"queue_date","sysdatetime()"},
	    {"queue_ref_flag", "1"},
        {"queue_ref_gid",ecfgid },
	    {"queue_ref_status", EcfConcurrentApproval.ToString()},
        {"queue_from",empgid },
	    {"queue_to_type", "E"},
        {"queue_to",EmployeeeExpense.Concurrent.ToString()},
	    {"queue_action_for", "C"},  
        {"queue_prev_gid", queuegid.ToString()}
                  };
                        string tnameIN = "iem_trn_tqueue";

                        string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);


                        string[,] codec = new string[,]
	               {
          {"ecfconcurrent_ecf_gid",ecfgid.ToString() },
          {"ecfconcurrent_queue_gid",queuegid.ToString() },
          {"ecfconcurrent_date","sysdatetime()"},
          {"ecfconcurrent_from",empgid.ToString() },
          {"ecfconcurrent_to",EmployeeeExpense.Concurrent.ToString() },
          {"ecfconcurrent_subject",EmployeeeExpense.Concurrentmsg.ToString() },
          {"ecfconcurrent_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString()) },
          {"ecfconcurrent_status","0" }
                  };

                        string tnamec = "iem_trn_tecfconcurrent";
                        string insertcommendc = objCommonIUD.InsertCommon(codec, tnamec);

                        err_msg = "Sucess";
                        return err_msg;
                    }
                }
                else if (ecftype == "Arf")
                {
                    if (EmployeeeExpense.status == "Approve")
                    {
                        Hashtable Togetlist = new Hashtable();
                        Togetlist = (Hashtable)HttpContext.Current.Session["Queue_delegateslist"];

                        if (Togetlist.ContainsKey(queuegid))
                        {
                            empgid = Togetlist[queuegid].ToString();
                        }

                        GetConnection();
                        cmd = new SqlCommand("pr_ecfdelmat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());


                        cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                        cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_final_flag", SqlDbType.Char, 1, "N");
                        cmd.Parameters["@ecf_final_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                        cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                        var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                        var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                        var finalapprver = Convert.ToString(cmd.Parameters["@ecf_final_flag"].Value);
                        var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                        var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                        var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);

                        string Additionalflagnewq = "N";
                        string titlevalues = "";
                        titlevalues = Flag.ToString();
                        string remarks = "";
                        if (EmployeeeExpense.Rejecthold != null && EmployeeeExpense.Rejecthold != "")
                        {
                            remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                        }
                        if (demmatresult != "0" && demmatresult != "")
                        {
                            if (finalapprver != "Y")
                            {
                                if (Additionalflagnew != null)
                                {
                                    if (Additionalflagnew.ToString() == "Y")
                                    {
                                        Additionalflagnewq = "Y";
                                    }
                                    else
                                    {
                                        Additionalflagnewq = "N";
                                    }
                                }

                                string[,] codesq = new string[,]
	                             {
                                      {"queue_isremoved","Y"},
                                      {"queue_action_date","sysdatetime()"},
                                      {"queue_action_by",empgid.ToString() },
                                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                                      {"queue_action_status",EcfApproved.ToString() },
                                      {"queue_action_remark", remarks}
                                  };
                                string[,] whreq = new string[,]
	                             {
                                     {"queue_gid",queuegid.ToString() }
                                };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                                string[,] codes = new string[,]
                                    {
                                      {"ecf_status",EcfInprocess.ToString() },
                                      {"ecf_all_status",EcfApproved.ToString() }
                                    };

                                string[,] whre = new string[,]
                                   {
                                     {"ecf_gid",ecfgid }
                                  };
                                string tname = "iem_trn_tecf";
                                string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                                string[,] codesIN = new string[,]
	                               {
                                    {"queue_date","sysdatetime()"},
	                                {"queue_ref_flag", "1"},
                                    {"queue_ref_gid",ecfgid },
	                                {"queue_ref_status", EcfInprocess.ToString()},
                                    {"queue_from",empgid },
	                                {"queue_to_type", titlevalues.ToString()},
                                    {"queue_to", result.ToString()},
	                                {"queue_action_for", "A"},  
                                     {"Additional_flag", Additionalflagnewq.ToString()}, 
                                    {"queue_prev_gid", queuegid.ToString()}
                                  };
                                string tnameIN = "iem_trn_tqueue";

                                string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);
                            }
                            else
                            {
                                string[,] codesq = new string[,]
	                             {
                                      {"queue_isremoved","Y"},
                                      {"queue_action_date","sysdatetime()"},
                                      {"queue_action_by",empgid.ToString() },
                                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                                      {"queue_action_status",EcfApproved.ToString() },
                                      {"queue_ref_status",EcfApproved.ToString() },
                                      {"queue_action_remark", remarks}
                                  };
                                string[,] whreq = new string[,]
	                             {
                                     {"queue_gid",queuegid.ToString() }
                                };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                                string[,] codes = new string[,]
                                    {
                                      {"ecf_status",EcfApproved.ToString() },
                                      {"ecf_all_status",EcfApproved.ToString() }
                                    };

                                string[,] whre = new string[,]
                                   {
                                     {"ecf_gid",ecfgid }
                                  };
                                string tname = "iem_trn_tecf";
                                string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                                string[,] codesIN = new string[,]
	                               {
                                        {"queue_date","sysdatetime()"},
	                                    {"queue_ref_flag", "1"},
                                        {"queue_ref_gid",ecfgid },
	                                    {"queue_ref_status", "64"},
                                        {"queue_from",empgid },
	                                    {"queue_to_type","U"},
                                        {"queue_to", "43"},
	                                    {"queue_action_for", "A"}, 
                                        {"Additional_flag", Additionalflagnewq.ToString()}, 
                                        {"queue_prev_gid", queuegid.ToString()}
                                  };
                                string tnameIN = "iem_trn_tqueue";

                                string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);

                                GetConnection();
                                cmd = new SqlCommand("pr_eow_com_eowtofsmoveddata", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "INSETINTO";
                                int i = cmd.ExecuteNonQuery();
                            }

                            err_msg = "Sucess";
                            string queue_gid = "";
                            GetConnection();
                            DataTable dtempsupnew = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtempsupnew);
                            if (dtempsupnew.Rows.Count > 0)
                            {
                                queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                            }

                            string mail = queue_gid.ToString();
                            GetConnection();
                            DataTable dtdoctype = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtdoctype);
                            if (dtdoctype.Rows.Count > 0)
                            {
                                string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                            }
                            err_msg = "Sucess";
                            return err_msg;
                        }
                        else
                        {
                            //err_msg = ecferrors + sqlerrors;
                            err_msg = sqlerrors;
                            return err_msg;
                        }

                    }
                    //------------------------------------------------------To Select Reject Status -------------
                    else if (EmployeeeExpense.status == "Reject")
                    {
                        string[,] codes = new string[,]
	               {
                       {"ecf_status",EcfRejected.ToString() },
                       {"ecf_all_status",EcfRejected.ToString() }
                  };

                        string[,] whre = new string[,]
	               {
                        {"ecf_gid",ecfgid }
                  };
                        string tname = "iem_trn_tecf";
                        string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                        string[,] codesq = new string[,]
	               {
                      {"queue_isremoved","Y"},
                      {"queue_action_date","sysdatetime()"},
                      {"queue_action_by",empgid.ToString() },
                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                      {"queue_action_status",EcfRejected.ToString() },
                      {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold.ToString())}
                  };
                        string[,] whreq = new string[,]
	               {
                      {"queue_gid",queuegid.ToString() }
                  };
                        string tnameq = "iem_trn_tqueue";
                        string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                        string Emp_Msgsuper = "";
                        DataTable dtempsup = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getqueuefromreject";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtempsup);
                        if (dtempsup.Rows.Count > 0)
                        {
                            Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["queue_from"].ToString());

                            string[,] codesIN = new string[,]
	                       {
                            {"queue_date","sysdatetime()"},
	                        {"queue_ref_flag", "1"},
                            {"queue_ref_gid",ecfgid },
	                        {"queue_ref_status", EcfRejected.ToString()},
                            {"queue_from",empgid },
	                        {"queue_to_type", "E"},
                            {"queue_to", Emp_Msgsuper.ToString()},
	                        {"queue_action_for", "R"},  
                            {"queue_prev_gid", queuegid.ToString()}
                          };
                            string tnameIN = "iem_trn_tqueue";

                            string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);

                        }

                        err_msg = "Sucess";
                        string queue_gid = "";
                        GetConnection();
                        DataTable dtempsupnew = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtempsupnew);
                        if (dtempsupnew.Rows.Count > 0)
                        {
                            queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                        }

                        string mail = queue_gid.ToString();
                        GetConnection();
                        DataTable dtdoctype = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdoctype);
                        if (dtdoctype.Rows.Count > 0)
                        {
                            string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                            doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                            mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                        }
                        err_msg = "Sucess";
                        return err_msg;
                    }
                    //------------------------------------------------------To Select Hold Status -------------
                    else if (EmployeeeExpense.status == "Hold")
                    {
                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }
                        string[,] codes = new string[,]
	               {
                      {"ecf_all_status",ecfHold.ToString() }
                  };

                        string[,] whre = new string[,]
	               {
                        {"ecf_gid",ecfgid }
                  };
                        string tname = "iem_trn_tecf";
                        string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                        string[,] codesq = new string[,]
	               {  
                      //{"queue_isremoved","Y"},
                      {"queue_action_date","sysdatetime()"},
                      {"queue_action_by",empgid.ToString() },
                      {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                      {"queue_action_status",ecfHold.ToString() },
                      {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString()) }
                  };
                        string[,] whreq = new string[,]
	               {
                         {"queue_gid",queuegid.ToString() }
                  };
                        string tnameq = "iem_trn_tqueue";
                        string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                        string[,] codesqh = new string[,]
	               {
                      {"ecfhold_ecf_gid",ecfgid.ToString() },
                      {"ecfhold_queue_gid",queuegid.ToString() },
                      {"ecfhold_date", "sysdatetime()"},
                      {"ecfhold_by",empgid.ToString() },
                      {"ecfhold_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString()) },
                      {"ecfhold_status","0" }
                  };

                        string tnameqh = "iem_trn_tecfhold";
                        string insertcommendqh = objCommonIUD.InsertCommon(codesqh, tnameqh);

                        err_msg = "Sucess";
                        return err_msg;

                    }
                    //------------------------------------------------------To Select Concurrent Approval Status -------------
                    else if (EmployeeeExpense.status == "Concurrent")
                    {
                        string Concurrentmsg = "";
                        if (EmployeeeExpense.Concurrentmsg != null)
                        {
                            Concurrentmsg = EmployeeeExpense.Concurrentmsg;
                        }
                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }


                        string[,] codes = new string[,]
	               {
                      {"ecf_all_status",EcfConcurrentApproval.ToString() }
                  };

                        string[,] whre = new string[,]
	               {
                       {"ecf_gid",ecfgid }
                  };
                        string tname = "iem_trn_tecf";
                        string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);


                        string[,] codesCC = new string[,]
	               {
                    {"queue_isremoved","Y"},
                    {"queue_action_date","sysdatetime()"},
                    {"queue_action_by",empgid.ToString() },
                    {"queue_delegation_gid",objCmnFunctions.GetLoginUserGid().ToString() },
                    {"queue_action_status",EcfConcurrentApproval.ToString() },
                    {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(Concurrentmsg.ToString()) }
                  };

                        string[,] whreCC = new string[,]
	               {
                     {"queue_gid",queuegid.ToString() }
                  };
                        string tnameCC = "iem_trn_tqueue";
                        insertcommend = objCommonIUD.UpdateCommon(codesCC, whreCC, tnameCC);



                        string[,] codesIN = new string[,]
	               {
                    {"queue_date","sysdatetime()"},
	                {"queue_ref_flag", "1"},
                    {"queue_ref_gid",ecfgid },
	                {"queue_ref_status", EcfConcurrentApproval.ToString()},
                    {"queue_from",empgid },
	                {"queue_to_type", "E"},
                    {"queue_to",EmployeeeExpense.Concurrent.ToString()},
	                {"queue_action_for", "C"},  
                    {"queue_prev_gid", queuegid.ToString()}
                  };
                        string tnameIN = "iem_trn_tqueue";

                        string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);


                        string[,] codec = new string[,]
	               {
                      {"ecfconcurrent_ecf_gid",ecfgid.ToString() },
                      {"ecfconcurrent_queue_gid",queuegid.ToString() },
                      {"ecfconcurrent_date","sysdatetime()"},
                      {"ecfconcurrent_from",empgid.ToString() },
                      {"ecfconcurrent_to",EmployeeeExpense.Concurrent.ToString() },
                      {"ecfconcurrent_subject",EmployeeeExpense.Concurrentmsg.ToString() },
                      {"ecfconcurrent_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString()) },
                      {"ecfconcurrent_status","0" }
                  };

                        string tnamec = "iem_trn_tecfconcurrent";
                        string insertcommendc = objCommonIUD.InsertCommon(codec, tnamec);

                        err_msg = "Sucess";
                        return err_msg;

                    }
                }
                return err_msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }*/


        #region Insertapprovedaction
        public string Insertapprovedaction(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid, string queueamt, string checker_raisergid, string delegates)
        {
            string err_msg = "", Mailstring = "", mail = "", doctypeid = "";
            //using (TransactionScope tscope = new TransactionScope())
            //{
            try
            {
                GetConnection();
                string Ecfdesignation = Convert.ToString(ConfigurationManager.AppSettings["Ecfdesignation"].ToString());
                int EMPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["EMPdelmattype"].ToString());
                int SUPdelmattype = Convert.ToInt32(ConfigurationManager.AppSettings["SUPdelmattype"].ToString());
                int EcfInprocess = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
                int ecfHold = Convert.ToInt32(ConfigurationManager.AppSettings["EcfHold"].ToString());
                int EcfConcurrentApproval = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApproval"].ToString());
                int EcfRejected = Convert.ToInt32(ConfigurationManager.AppSettings["EcfRejected"].ToString());
                int centralckeckerreject = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCenraiserreject"].ToString());
                int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
                //------------------------------------------------------To Select Approve Status -------------
                //objErrorLog.WriteErrorLog(ecfgid + " - " + invoicegid + " - " + empgid + " - 11397 line", "Insertapprovedaction method");
                #region ECFApprove
                if (ecftype == "ECRegular" || ecftype == "ECTravel" || ecftype == "ECLocal" || ecftype == "EcfSupplierDSA" || ecftype == "EcfSupplier" || ecftype == "Insurance")
                {
                    Hashtable Togetlist = new Hashtable();
                    Togetlist = (Hashtable)HttpContext.Current.Session["Queue_delegateslist"];
                    if (Togetlist != null)
                    {
                        if (Togetlist.ContainsKey(queuegid))
                        {
                            empgid = Togetlist[queuegid].ToString();
                        }
                    }
                    if (EmployeeeExpense.status == "Approve")
                    {
                        //objErrorLog.WriteErrorLog(ecfgid + " - " + queuegid + " - " + empgid + " - 11410 line", "inside approve action method");
                        //GetConnection();
                        cmd = new SqlCommand("pr_ecfdelmat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());

                        cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                        cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_final_flag", SqlDbType.Char, 1, "N");
                        cmd.Parameters["@ecf_final_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                        cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;
                        cmd.CommandTimeout = 0;
                        cmd.ExecuteNonQuery();

                        var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                        var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                        var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                        var finalapprver = Convert.ToString(cmd.Parameters["@ecf_final_flag"].Value);
                        var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                        var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                        var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);
                        //objErrorLog.WriteErrorLog(ecfgid + " - " + queuegid + " - " + empgid + " - 11449 line", "inside approve action method");
                        string Additionalflagnewq = "N";
                        string titlevalues = "";
                        titlevalues = Flag.ToString();

                        string Emp_designation = "";
                        // Correction by sugumar
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Convert.ToString(ecfgid);
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpSupperdesc";
                        da = new SqlDataAdapter(cmd);
                        DataTable dt = new DataTable();
                        da.Fill(dt);
                        if (dt.Rows.Count > 0)
                        {
                            Emp_designation = dt.Rows[0]["employee_iem_designation"].ToString();
                        }
                        else
                        {
                            Emp_designation = "0";
                        }
                        if (Emp_designation == "0" || Emp_designation == "" || Emp_designation == null || Emp_designation == " ")
                        {
                            err_msg = "Invalid Approver.";
                            return err_msg;
                        }
                        //objErrorLog.WriteErrorLog(ecfgid + " - " + queuegid + " - " + empgid + " - " + Emp_designation + " - 11476 line", "inside approve action method");
                        if (Emp_designation == Ecfdesignation)
                        {
                            demmatresult = "1";
                            result = "0";
                            Flag = "E";
                            finalapprver = "Y";
                        }

                        if (Emp_designation.Trim() == "President")
                        {
                            demmatresult = "1";
                            result = "0";
                            Flag = "E";
                            finalapprver = "Y";
                        }
                        if (result == "0" || result == "" || result == " " || result == null || Emp_designation.Trim() == "President")
                        {
                            objErrorLog.WriteErrorLog("Employee supervisor is empty : Emp_designation=" + Emp_designation.Trim() + "ecfgid =" + ecfgid + "", "Ecfdesignation =" + Ecfdesignation + "Final approver =" + finalapprver + "demmatresult=" + demmatresult);
                        }

                        string remarks = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                        }

                        if (demmatresult != "0" && demmatresult != "")
                        {
                            if (finalapprver != "Y" && (Emp_designation.Trim() != "President"))
                            {
                                if (Additionalflagnew != null)
                                {
                                    if (Additionalflagnew.ToString() == "Y")
                                    {
                                        Additionalflagnewq = "Y";
                                    }
                                    else
                                    {
                                        Additionalflagnewq = "N";
                                    }
                                }
                                //GetConnection();
                                //objErrorLog.WriteErrorLog(ecfgid + " - " + queuegid + " - " + empgid + " - " + Emp_designation + " - " + EmployeeeExpense.status + " - 11520 line", "InsertapprovedactionNOTfinalapprove above PR_EOW_COM_FINALECFQUEUEUPDATE");
                                cmd = new SqlCommand("PR_EOW_COM_FINALECFQUEUEUPDATE", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.CommandTimeout = 0; // ramya added on 12 Sep 22 for Bulk Claim movement like DSA
                                cmd.Parameters.Add("@QUEUEGID", SqlDbType.VarChar).Value = queuegid.ToString();
                                cmd.Parameters.Add("@QUEUEACTIONBY", SqlDbType.VarChar).Value = empgid.ToString();
                                cmd.Parameters.Add("@QUEUEACTIONSTATUS", SqlDbType.VarChar).Value = EmployeeeExpense.status;
                                cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                cmd.Parameters.Add("@INVOICEID", SqlDbType.Int).Value = 0;
                                cmd.Parameters.Add("@ECFAMOUNT", SqlDbType.VarChar).Value = queueamt;
                                cmd.Parameters.Add("@DELEGATE", SqlDbType.VarChar).Value = delegates;
                                cmd.Parameters.Add("@titlevalues", SqlDbType.VarChar).Value = titlevalues;
                                cmd.Parameters.Add("@Additionalflagnewq", SqlDbType.VarChar).Value = Additionalflagnewq;
                                cmd.Parameters.Add("@ECFRAISER", SqlDbType.VarChar).Value = "";
                                cmd.Parameters.Add("@RESULT", SqlDbType.VarChar).Value = result;
                                cmd.Parameters.Add("@ECFREMARK", SqlDbType.VarChar).Value = remarks;
                                cmd.Parameters.Add("@ECFDESC", SqlDbType.VarChar).Value = remarks;
                                cmd.Parameters.Add("@loginuserid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "InsertapprovedactionNOTfinalapprove";
                                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                                cmd.ExecuteNonQuery();
                                err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);

                            }
                            else
                            {
                                //GetConnection();
                                //objErrorLog.WriteErrorLog(ecfgid + " - " + queuegid + " - " + empgid + " - " + Emp_designation + " - " + EmployeeeExpense.status + " - 11520 line", "Insertapprovedactionfinalapprove above PR_EOW_COM_FINALECFQUEUEUPDATE");
                                cmd = new SqlCommand("PR_EOW_COM_FINALECFQUEUEUPDATE", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.CommandTimeout = 0; // ramya added on 12 Sep 22 for Bulk Claim movement like DSA
                                cmd.Parameters.Add("@QUEUEGID", SqlDbType.VarChar).Value = queuegid.ToString();
                                cmd.Parameters.Add("@QUEUEACTIONBY", SqlDbType.VarChar).Value = empgid.ToString();
                                cmd.Parameters.Add("@QUEUEACTIONSTATUS", SqlDbType.VarChar).Value = EmployeeeExpense.status;
                                cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                cmd.Parameters.Add("@INVOICEID", SqlDbType.Int).Value = 0;
                                cmd.Parameters.Add("@ECFAMOUNT", SqlDbType.VarChar).Value = queueamt;
                                cmd.Parameters.Add("@DELEGATE", SqlDbType.VarChar).Value = delegates;
                                cmd.Parameters.Add("@titlevalues", SqlDbType.VarChar).Value = titlevalues;
                                cmd.Parameters.Add("@Additionalflagnewq", SqlDbType.VarChar).Value = Additionalflagnewq;
                                cmd.Parameters.Add("@ECFRAISER", SqlDbType.VarChar).Value = "";
                                cmd.Parameters.Add("@RESULT", SqlDbType.VarChar).Value = result;
                                cmd.Parameters.Add("@ECFREMARK", SqlDbType.VarChar).Value = remarks;
                                cmd.Parameters.Add("@ECFDESC", SqlDbType.VarChar).Value = remarks;
                                cmd.Parameters.Add("@loginuserid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Insertapprovedactionfinalapprove";
                                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                                cmd.ExecuteNonQuery();
                                err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                            }
                            if (err_msg != "Sucess")
                            {
                                return err_msg;
                            }
                            //objErrorLog.WriteErrorLog(ecfgid + " - " + err_msg + " - " + empgid + " - " + Emp_designation + " - " + EmployeeeExpense.status + " - 11572 line", "above PR_EOW_COM_FINALECFQUEUEUPDATE");
                            string queue_gid = "";
                            DataTable dtempsupnew = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandTimeout = 0; // ramya added on 12 Sep 22 for Bulk Claim movement like DSA
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtempsupnew);
                            if (dtempsupnew.Rows.Count > 0)
                            {
                                queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                            }
                            mail = queue_gid.ToString();
                            DataTable dtdoctype = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandTimeout = 0; // ramya added on 12 Sep 22 for Bulk Claim movement like DSA
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtdoctype);
                            if (dtdoctype.Rows.Count > 0)
                            {
                                doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                Mailstring = "Approve";
                            }

                        }
                        else
                        {
                            err_msg = sqlerrors;
                            return err_msg;
                        }
                        //objErrorLog.WriteErrorLog(ecfgid + " - " + err_msg + " - " + empgid + " - " + Emp_designation + " - " + EmployeeeExpense.status + " - 11607 line", "above PR_EOW_COM_FINALECFQUEUEUPDATE");
                    }
                #endregion
                    //------------------------------------------------------To Select Reject Status -------------
                    #region ECFReject
                    else if (EmployeeeExpense.status == "Reject")
                    {
                        string doctyoeandmode = "";
                        DataTable dtrejectcon = new DataTable();
                        //GetConnection();
                        cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "TYPEDL";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtrejectcon);
                        if (dtrejectcon.Rows.Count > 0)
                        {
                            doctyoeandmode = Convert.ToString(dtrejectcon.Rows[0]["ecf_create_mode"].ToString());
                            if (doctyoeandmode == "S" || doctyoeandmode == "P")
                            {
                                //GetConnection();
                                cmd = new SqlCommand("pr_eow_com_reject", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                                cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(EcfRejected.ToString());
                                cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold.ToString());
                                cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@ecf_create_mode", SqlDbType.Char).Value = Convert.ToChar(doctyoeandmode.ToString());
                                cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@queue_action", SqlDbType.VarChar).Value = "getqueuefromreject";
                                cmd.Parameters.Add("@queue_ref_flag", SqlDbType.Int).Value = 1;
                                cmd.Parameters.Add("@queue_ref_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                                cmd.Parameters.Add("@queue_ref_status", SqlDbType.Int).Value = Convert.ToInt32(EcfRejected.ToString());
                                cmd.Parameters.Add("@queue_from", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_to_type", SqlDbType.Char).Value = 'E';
                                cmd.Parameters.Add("@queue_to", SqlDbType.Int).Value = Convert.ToInt32(Convert.ToString(dtrejectcon.Rows[0]["ecf_raiser"]));
                                cmd.Parameters.Add("@queue_action_for", SqlDbType.Char).Value = 'R';
                                cmd.Parameters.Add("@queue_prev_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = Convert.ToInt32(EcfRejected.ToString());
                                cmd.Parameters.Add("@ecf_status", SqlDbType.Int).Value = Convert.ToInt32(EcfRejected.ToString());
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@queue_max_action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                                cmd.Parameters.Add("@NOE_para1", SqlDbType.VarChar).Value = queuegid.ToString();
                                cmd.Parameters.Add("@NOE_action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                //pandiaraj 22/06/2018
                                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                                cmd.ExecuteNonQuery();
                                err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                                // int Result = cmd.ExecuteNonQuery(); 
                                // if (Result != 0)
                                if (err_msg != "Sucess")
                                {
                                    return err_msg;
                                }
                                string queue_gid = "";
                                DataTable dtempsupnew = new DataTable();
                                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtempsupnew);
                                if (dtempsupnew.Rows.Count > 0)
                                {
                                    queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                                }
                                mail = queue_gid.ToString();
                                DataTable dtdoctype = new DataTable();
                                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtdoctype);
                                if (dtdoctype.Rows.Count > 0)
                                {
                                    doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                    doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                    Mailstring = "Reject";
                                }
                                //return err_msg;

                            }

                            else
                            {
                                cmd = new SqlCommand("pr_eow_updat_queuedetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                                cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(centralckeckerreject.ToString());
                                cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold.ToString());
                                cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getqueuefromreject";
                                cmd.Parameters.Add("@queue_ref_flag", SqlDbType.Int).Value = 1;
                                cmd.Parameters.Add("@queue_ref_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                                cmd.Parameters.Add("@queue_ref_status", SqlDbType.Int).Value = Convert.ToInt32(centralckeckerreject.ToString());
                                cmd.Parameters.Add("@queue_from", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_to_type", SqlDbType.Char).Value = Convert.ToChar('R');
                                cmd.Parameters.Add("@queue_to", SqlDbType.Int).Value = Convert.ToInt32(centralmaker.ToString());
                                cmd.Parameters.Add("@queue_action_for", SqlDbType.Char).Value = Convert.ToChar('R');
                                cmd.Parameters.Add("@queue_prev_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = Convert.ToInt32(centralckeckerreject.ToString());
                                cmd.Parameters.Add("@ecf_status", SqlDbType.Int).Value = Convert.ToInt32(centralckeckerreject.ToString());
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                // int Result = cmd.ExecuteNonQuery();
                                //pandiaraj 22/06/2018
                                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                                cmd.ExecuteNonQuery();
                                err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                                if (err_msg != "Sucess")
                                {
                                    return err_msg;
                                }
                                string queue_gid = "";
                                string Emp_Msgsuper = "";
                                DataTable dtempsupnew = new DataTable();
                                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Emp_Msgsuper.ToString();
                                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtempsupnew);
                                if (dtempsupnew.Rows.Count > 0)
                                {
                                    queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                                }
                                mail = queue_gid.ToString();
                                DataTable dtdoctype = new DataTable();
                                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtdoctype);
                                if (dtdoctype.Rows.Count > 0)
                                {
                                    doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                    doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                }

                            }
                        }
                        else
                        {
                            err_msg = "Please Select ECF";
                            return err_msg;
                        }
                    }
                    #endregion
                    //------------------------------------------------------To Select Hold Status ------------- 
                    #region ECFHold
                    else if (EmployeeeExpense.status == "Hold")
                    {
                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }

                        cmd = new SqlCommand("pr_eow_trn_hold", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = Convert.ToInt32(ecfHold.ToString());
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                        cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                        cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(ecfHold.ToString());
                        cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecfhold_ecf_gid", SqlDbType.Int).Value = ecfgid.ToString();
                        cmd.Parameters.Add("@ecfhold_queue_gid", SqlDbType.Int).Value = queuegid.ToString();
                        cmd.Parameters.Add("@ecfhold_by", SqlDbType.Int).Value = empgid.ToString();
                        cmd.Parameters.Add("@ecfhold_remark ", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString());
                        cmd.Parameters.Add("@ecfhold_status", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);

                        if (err_msg != "Sucess")
                        {
                            return err_msg;
                        }

                    }
                    #endregion

                    //------------------------------------------------------To Select Concurrent Approval Status -------------

                    #region ConcurrentApproval
                    else if (EmployeeeExpense.status == "Concurrent")
                    {
                        string Concurrentmsg = "";
                        if (EmployeeeExpense.Concurrentmsg != null)
                        {
                            Concurrentmsg = EmployeeeExpense.Concurrentmsg;
                        }
                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }
                        //GetConnection();
                        cmd = new SqlCommand("pr_eow_trn_concurrent_aprvl", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = Convert.ToInt32(EcfConcurrentApproval.ToString());
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                        cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                        cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(EcfConcurrentApproval.ToString());
                        cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Concurrentmsg.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@queue_ref_flag", SqlDbType.Int).Value = 1;
                        cmd.Parameters.Add("@queue_ref_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@queue_ref_status", SqlDbType.Int).Value = Convert.ToInt32(EcfConcurrentApproval.ToString());
                        cmd.Parameters.Add("@queue_from ", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_to_type", SqlDbType.Char).Value = 'E';
                        cmd.Parameters.Add("@queue_to ", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.Concurrent.ToString());
                        cmd.Parameters.Add("@queue_action_for", SqlDbType.Char).Value = 'C';
                        cmd.Parameters.Add("@queue_prev_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_from", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_to", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.Concurrent.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_subject ", SqlDbType.VarChar).Value = EmployeeeExpense.Concurrentmsg.ToString();
                        cmd.Parameters.Add("@ecfconcurrent_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_status", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                        if (err_msg != "Sucess")
                        {
                            return err_msg;
                        }

                        //k.bharathidhasan
                        string queue_gid = "";
                        DataTable dtempsupnew = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtempsupnew);
                        if (dtempsupnew.Rows.Count > 0)
                        {
                            queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                        }
                        mail = queue_gid.ToString();
                        DataTable dtdoctype = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdoctype);
                        if (dtdoctype.Rows.Count > 0)
                        {
                            doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                            doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                            Mailstring = "Concurrent";
                        }

                        //k.bharathidhasan
                    }
                }
                    #endregion


                //------------------------------------------------------To Select ARF -------------
                #region ARF
                else if (ecftype == "Arf" || ecftype == "Insuranceadvance")
                {
                    //------------------------------------------------------To Select ARF Approve Status -------------
                    #region  ARFApprove
                    if (EmployeeeExpense.status == "Approve")
                    {
                        Hashtable Togetlist = new Hashtable();
                        Togetlist = (Hashtable)HttpContext.Current.Session["Queue_delegateslist"];

                        // ramya modified on 04 Nov 22 for ARF mail approve
                        if(Togetlist!=null)
                        {
                            if (Togetlist.ContainsKey(queuegid))
                            {
                                empgid = Togetlist[queuegid].ToString();
                            }
                        }
                        

                        cmd = new SqlCommand("pr_ecfdelmat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());

                        cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                        cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                        cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_final_flag", SqlDbType.Char, 1, "N");
                        cmd.Parameters["@ecf_final_flag"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                        cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                        cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                        var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                        var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                        var finalapprver = Convert.ToString(cmd.Parameters["@ecf_final_flag"].Value);
                        var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                        var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                        var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);

                        string Additionalflagnewq = "N";
                        string titlevalues = "";
                        titlevalues = Flag.ToString();
                        string remarks = "";
                        int Result = 0;
                        if (EmployeeeExpense.Rejecthold != null && EmployeeeExpense.Rejecthold != "")
                        {
                            remarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold);
                        }
                        if (demmatresult != "0" && demmatresult != "")
                        {
                            if (finalapprver != "Y")
                            {
                                if (Additionalflagnew != null)
                                {
                                    if (Additionalflagnew.ToString() == "Y")
                                    {
                                        Additionalflagnewq = "Y";
                                    }
                                    else
                                    {
                                        Additionalflagnewq = "N";
                                    }
                                }
                                cmd = new SqlCommand("pr_eow_arf_approve", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@queue_isremoved", SqlDbType.Char).Value = 'Y';
                                cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                                cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(EcfApproved.ToString());
                                cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = remarks;
                                cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@ecf_status", SqlDbType.Int).Value = Convert.ToInt32(EcfInprocess.ToString());
                                cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = Convert.ToInt32(EcfApproved.ToString());
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                cmd.Parameters.Add("@queue_ref_flag", SqlDbType.Int).Value = 1;
                                cmd.Parameters.Add("@queue_ref_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                cmd.Parameters.Add("@queue_ref_status", SqlDbType.Int).Value = Convert.ToInt32(EcfInprocess.ToString());
                                cmd.Parameters.Add("@queue_from", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_to_type", SqlDbType.Char).Value = Convert.ToChar(titlevalues.ToString());
                                cmd.Parameters.Add("@queue_to", SqlDbType.Int).Value = Convert.ToInt32(result.ToString());
                                cmd.Parameters.Add("@queue_action_for", SqlDbType.Char).Value = 'A';
                                cmd.Parameters.Add("@Additional_flag", SqlDbType.Char).Value = Convert.ToChar(Additionalflagnewq.ToString());
                                cmd.Parameters.Add("@queue_prev_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                                cmd.ExecuteNonQuery();
                                err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);

                                if (err_msg != "Sucess")
                                {
                                    return err_msg;
                                }
                            }
                            else
                            {
                                //GetConnection();
                                cmd = new SqlCommand("pr_eow_arf_approve", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@queue_isremoved", SqlDbType.Char).Value = 'Y';
                                cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                                cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(EcfApproved.ToString());
                                cmd.Parameters.Add("@queue_ref_Ustatus", SqlDbType.Int).Value = Convert.ToInt32(EcfApproved.ToString());
                                cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = remarks;
                                cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@ecf_status", SqlDbType.Int).Value = Convert.ToInt32(EcfApproved.ToString());
                                cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = Convert.ToInt32(EcfApproved.ToString());
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                cmd.Parameters.Add("@queue_ref_flag", SqlDbType.Int).Value = 1;
                                cmd.Parameters.Add("@queue_ref_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                                cmd.Parameters.Add("@queue_ref_status", SqlDbType.Int).Value = 64;
                                cmd.Parameters.Add("@queue_from", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                                cmd.Parameters.Add("@queue_to_type", SqlDbType.Char).Value = 'U';
                                cmd.Parameters.Add("@queue_to", SqlDbType.Int).Value = 43;
                                cmd.Parameters.Add("@queue_action_for", SqlDbType.Char).Value = 'A';
                                cmd.Parameters.Add("@Additional_flag", SqlDbType.Char).Value = Convert.ToChar(Additionalflagnewq.ToString());
                                cmd.Parameters.Add("@queue_prev_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = empgid;
                                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                                cmd.ExecuteNonQuery();
                                err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                                if (err_msg != "Sucess")
                                {
                                    return err_msg;
                                }
                            }
                            string queue_gid = "";
                            DataTable dtempsupnew = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtempsupnew);
                            if (dtempsupnew.Rows.Count > 0)
                            {
                                queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                            }
                            mail = queue_gid.ToString();
                            //GetConnection();
                            DataTable dtdoctype = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtdoctype);
                            if (dtdoctype.Rows.Count > 0)
                            {
                                doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                Mailstring = "ARF";
                            }
                        }
                        else
                        {
                            err_msg = sqlerrors;
                            return err_msg;
                        }

                    }
                    #endregion
                    //------------------------------------------------------To Select ARF Reject Status -------------
                    #region ARFReject
                    else if (EmployeeeExpense.status == "Reject")
                    {

                        cmd = new SqlCommand("pr_eow_arf_upda_reject", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_status", SqlDbType.Int).Value = EcfRejected.ToString();
                        cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = EcfRejected.ToString();
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = ecfgid;
                        cmd.Parameters.Add("@queue_isremoved", SqlDbType.Char).Value = 'Y';
                        cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                        cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(EcfRejected.ToString());
                        cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Rejecthold.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@queue_ref_flag", SqlDbType.Int).Value = 1;
                        cmd.Parameters.Add("@queue_ref_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                        cmd.Parameters.Add("@queue_ref_status", SqlDbType.Int).Value = Convert.ToInt32(EcfRejected.ToString());
                        cmd.Parameters.Add("@queue_from", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_to_type", SqlDbType.Char).Value = 'E';
                        cmd.Parameters.Add("@queue_action_for", SqlDbType.Char).Value = 'R';
                        cmd.Parameters.Add("@queue_prev_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                        if (err_msg != "Sucess")
                        {
                            return err_msg;
                        }
                        string queue_gid = "";
                        //GetConnection();
                        DataTable dtempsupnew = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtempsupnew);
                        if (dtempsupnew.Rows.Count > 0)
                        {
                            queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                        }
                        mail = queue_gid.ToString();
                        //GetConnection();
                        DataTable dtdoctype = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdoctype);
                        if (dtdoctype.Rows.Count > 0)
                        {
                            doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                            doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                            Mailstring = "ARFReject";
                            //mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                        }

                    }
                    #endregion
                    //------------------------------------------------------To Select ARF Hold Status -------------------
                    #region ARFHold
                    else if (EmployeeeExpense.status == "Hold")
                    {

                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }

                        cmd = new SqlCommand("pr_eow_trn_hold", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = ecfHold.ToString();
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                        //cmd.Parameters.Add("@queue_isremoved", SqlDbType.Char).Value = 'Y';
                        cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                        cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(ecfHold.ToString());
                        cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecfhold_ecf_gid", SqlDbType.Int).Value = ecfgid.ToString();
                        cmd.Parameters.Add("@ecfhold_queue_gid", SqlDbType.Int).Value = queuegid.ToString();
                        cmd.Parameters.Add("@ecfhold_by", SqlDbType.Int).Value = empgid.ToString();
                        cmd.Parameters.Add("@ecfhold_remark ", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString());
                        cmd.Parameters.Add("@ecfhold_status", SqlDbType.Int).Value = 0;
                        // int Result = cmd.ExecuteNonQuery();
                        cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                        //if (Result != 0)
                        //{
                        //    err_msg = "Sucess";
                        //    tscope.Complete();
                        //}
                        //else
                        //{
                        //    err_msg = "Error";
                        //    tscope.Dispose();
                        //}
                        return err_msg;

                    }
                    #endregion
                    //------------------------------------------------------To Select ARF Concurrent Approval Status -------------
                    #region  ARFConcurrentApproval
                    else if (EmployeeeExpense.status == "Concurrent")
                    {
                        string Concurrentmsg = "";
                        if (EmployeeeExpense.Concurrentmsg != null)
                        {
                            Concurrentmsg = EmployeeeExpense.Concurrentmsg;
                        }
                        string Rejecthold = "";
                        if (EmployeeeExpense.Rejecthold != null)
                        {
                            Rejecthold = EmployeeeExpense.Rejecthold;
                        }

                        //GetConnection();
                        cmd = new SqlCommand("pr_eow_trn_concurrent_aprvl", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_all_status", SqlDbType.Int).Value = Convert.ToInt32(EcfConcurrentApproval.ToString());
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                        cmd.Parameters.Add("@queue_isremoved", SqlDbType.Char).Value = 'Y';
                        cmd.Parameters.Add("@queue_action_by", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_delegation_gid", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                        cmd.Parameters.Add("@queue_action_status", SqlDbType.Int).Value = Convert.ToInt32(EcfConcurrentApproval.ToString());
                        cmd.Parameters.Add("@queue_action_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Concurrentmsg.ToString());
                        cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@queue_ref_flag", SqlDbType.Int).Value = 1;
                        cmd.Parameters.Add("@queue_ref_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@queue_ref_status", SqlDbType.Int).Value = Convert.ToInt32(EcfConcurrentApproval.ToString());
                        cmd.Parameters.Add("@queue_from ", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@queue_to_type", SqlDbType.Char).Value = 'E';
                        cmd.Parameters.Add("@queue_to ", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.Concurrent.ToString());
                        cmd.Parameters.Add("@queue_action_for", SqlDbType.Char).Value = 'C';
                        cmd.Parameters.Add("@queue_prev_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_from", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_to", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.Concurrent.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_subject ", SqlDbType.VarChar).Value = EmployeeeExpense.Concurrentmsg.ToString();
                        cmd.Parameters.Add("@ecfconcurrent_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString());
                        cmd.Parameters.Add("@ecfconcurrent_status", SqlDbType.Int).Value = 0;
                        cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        err_msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                        //int Result = cmd.ExecuteNonQuery();

                        //if (Result != 0)
                        //{
                        //    err_msg = "Sucess";
                        //    tscope.Complete();
                        //}
                        //else
                        //{
                        //    err_msg = "Error";
                        //}

                        return err_msg;

                    }
                    #endregion
                }
                #endregion
                //  tscope.Complete();

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                //tscope.Dispose();
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();

            }
            //}
            string mailreturn = "";
            if (err_msg == "Sucess")
            {
                // for Mail correction by sugumar
                if (Mailstring == "Approve")
                {
                    //old
                   // mailreturn = mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                    //vadivu add
                    int PrGid = 0;
                    string POgid = "POgid";
                    string cbfgid = "cbfgid";
                    int WoGid = 0;

                    mailreturn = mailsender.sendusermailEOW("EOW", doctypeid, mail, "A", "0", ecfgid, PrGid, POgid, cbfgid, WoGid);

                    //vadivu end
                }
                else if (Mailstring == "Reject")
                {
                   // mailreturn = mailsender.sendusermail("EOW", doctypeid, mail, "R", "0"); old

                    int PrGid = 0;
                    string POgid = "POgid";
                    string cbfgid = "cbfgid";
                    int WoGid = 0;

                    mailreturn = mailsender.sendusermailEOW("EOW", doctypeid, mail, "R", "0", ecfgid, PrGid, POgid, cbfgid, WoGid);

                }
                else if (Mailstring == "ARF")
                {
                   // mailreturn = mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                    int PrGid = 0;
                    string POgid = "POgid";
                    string cbfgid = "cbfgid";
                    int WoGid = 0;

                    mailreturn = mailsender.sendusermailEOW("EOW", doctypeid, mail, "A", "0", ecfgid, PrGid, POgid, cbfgid, WoGid);

                }
                else if (Mailstring == "ARFReject")
                {
                  //  mailreturn = mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                    int PrGid = 0;
                    string POgid = "POgid";
                    string cbfgid = "cbfgid";
                    int WoGid = 0;

                    mailreturn = mailsender.sendusermailEOW("EOW", doctypeid, mail, "A", "0", ecfgid, PrGid, POgid, cbfgid, WoGid);

                }
                else if (Mailstring == "Concurrent")
                {
                    //old
                    // mailreturn = mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                    //vadivu add
                    int PrGid = 0;
                    string POgid = "POgid";
                    string cbfgid = "cbfgid";
                    int WoGid = 0;

                    mailreturn = mailsender.sendusermailEOW("EOW", doctypeid, mail, "C", "0", ecfgid, PrGid, POgid, cbfgid, WoGid);

                    //vadivu end
                }
                else
                {
                    if (mailreturn == "" && Mailstring != "") // ramya modififed on 04 Oct 22
                    {
                        mailreturn = mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                    }
                }

                //if (Mailstring != "")
                //{
                //    mailreturn = mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                //}
                //if (mailreturn != "Sucess")
                //{
                //    err_msg = err_msg + "! Mail " + mailreturn;
                //}
            }
            return err_msg;

        }
        #endregion
        /*public string Insertapprovedactioncon(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid)
        {
            string statuss = "";
            string EcfConcurrentApprovald = "";
            try
            {
                int EcfConcurrentApprovalreject = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApprovalreject"].ToString());
                int EcfConcurrentApprovalappred = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApprovalappred"].ToString());
                int EcfConcurrentApprovalnotapp = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApprovalnotapp"].ToString());
                int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                int EcfConcurrentApproval = Convert.ToInt32(ConfigurationManager.AppSettings["EcfConcurrentApproval"].ToString());
                int EcfRejected = Convert.ToInt32(ConfigurationManager.AppSettings["EcfRejected"].ToString());

                //------------------------------------------------------To Select Approve Status -------------
                string Rejecthold = "";
                if (EmployeeeExpense.Rejecthold == null)
                {
                    Rejecthold = "";
                }
                else
                {
                    Rejecthold = EmployeeeExpense.Rejecthold;
                }

                if (EmployeeeExpense.status == "Approve" || EmployeeeExpense.status == "NotApplicable")
                {

                    if (EmployeeeExpense.status == "NotApplicable")
                    {
                        EcfConcurrentApprovald = EcfConcurrentApprovalnotapp.ToString();
                    }
                    else
                    {
                        EcfConcurrentApprovald = EcfConcurrentApprovalappred.ToString();
                    }

                    string[,] codes = new string[,]
	               {
        {"ecf_all_status",EcfApproved.ToString() }
                  };

                    string[,] whre = new string[,]
	               {
        {"ecf_gid",ecfgid }
                  };
                    string tname = "iem_trn_tecf";
                    string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                    string[,] codesq = new string[,]
	               {
          {"queue_isremoved","Y"},
          {"queue_action_date","sysdatetime()"},
          {"queue_action_by",empgid.ToString() },
         {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString()) },
          {"queue_action_status",EcfConcurrentApprovald.ToString() },
                  };
                    string[,] whreq = new string[,]
	               {
        {"queue_gid",queuegid.ToString() }
                  };
                    string tnameq = "iem_trn_tqueue";
                    string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                    string Emp_Msgsuper = "";
                    DataTable dtempsup = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@queue_gid", SqlDbType.VarChar).Value = queuegid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getqueuefromnew";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtempsup);
                    if (dtempsup.Rows.Count > 0)
                    {
                        Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["queue_to"].ToString());
                        string queue_to_type = Convert.ToString(dtempsup.Rows[0]["queue_to_type"].ToString());
                        string Additional_flag = Convert.ToString(dtempsup.Rows[0]["Additional_flag"].ToString());

                        string[,] codesIN = new string[,]
	               {
        {"queue_date","sysdatetime()"},
	    {"queue_ref_flag", "1"},
        {"queue_ref_gid",ecfgid },
	    {"queue_ref_status", EcfApproved.ToString()},
        {"queue_from",empgid },
	    {"queue_to_type", queue_to_type.ToString()},
        {"queue_to", Emp_Msgsuper.ToString()},
        {"Additional_flag", Additional_flag.ToString()},
	    {"queue_action_for", "A"},  
        {"queue_prev_gid", queuegid.ToString()}
                  };
                        string tnameIN = "iem_trn_tqueue";

                        string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);

                    }

                    string[,] codec = new string[,]
	               {           
          {"ecfconcurrent_status","1" }
                  };
                    string[,] whrec = new string[,]
	               {
          {"ecfconcurrent_ecf_gid",ecfgid.ToString() },
          {"ecfconcurrent_queue_gid",queuegid.ToString() }
                  };
                    string tnamec = "iem_trn_tecfconcurrent";
                    string insertcommendc = objCommonIUD.UpdateCommon(codec, whrec, tnamec);

                    statuss = "Success";
                    string queue_gid = "";
                    GetConnection();
                    DataTable dtempsupnew = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtempsupnew);
                    if (dtempsupnew.Rows.Count > 0)
                    {
                        queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                    }

                    string mail = queue_gid.ToString();
                    GetConnection();
                    DataTable dtdoctype = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdoctype);
                    if (dtdoctype.Rows.Count > 0)
                    {
                        string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                        doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                        mailsender.sendusermail("EOW", doctypeid, mail, "A", "0");
                    }
                }
                //------------------------------------------------------To Select Reject Status -------------
                else if (EmployeeeExpense.status == "Reject")
                {
                    string[,] codes = new string[,]
	               {
        {"ecf_all_status",EcfRejected.ToString() }
                  };

                    string[,] whre = new string[,]
	               {
        {"ecf_gid",ecfgid }
                  };
                    string tname = "iem_trn_tecf";
                    string insertcommend = objCommonIUD.UpdateCommon(codes, whre, tname);

                    string[,] codesq = new string[,]
	               {
          {"queue_isremoved","Y"},
          {"queue_action_date","sysdatetime()"},
          {"queue_action_by",empgid.ToString() },
          {"queue_action_status",EcfConcurrentApprovalreject.ToString() },
          {"queue_action_remark",objCmnFunctions.Getreplacesinglequotes(Rejecthold.ToString()) }
                  };
                    string[,] whreq = new string[,]
	               {
        {"queue_gid",queuegid.ToString() }
                  };
                    string tnameq = "iem_trn_tqueue";
                    string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                    string Emp_Msgsuper = "";
                    DataTable dtempsup = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@queue_gid", SqlDbType.VarChar).Value = queuegid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getqueuefromnew";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtempsup);
                    if (dtempsup.Rows.Count > 0)
                    {
                        Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["queue_to"].ToString());
                        string queue_to_type = Convert.ToString(dtempsup.Rows[0]["queue_to_type"].ToString());
                        string Additional_flag = Convert.ToString(dtempsup.Rows[0]["Additional_flag"].ToString());

                        string[,] codesIN = new string[,]
	               {
        {"queue_date","sysdatetime()"},
	    {"queue_ref_flag", "1"},
        {"queue_ref_gid",ecfgid },
	    {"queue_ref_status", EcfApproved.ToString()},
        {"queue_from",empgid },
	    {"queue_to_type", queue_to_type},
        {"queue_to", Emp_Msgsuper.ToString()},
        {"Additional_flag", Additional_flag.ToString()},
	    {"queue_action_for", "A"},  
        {"queue_prev_gid", queuegid.ToString()}
                  };
                        string tnameIN = "iem_trn_tqueue";

                        string insertcommendecf = objCommonIUD.InsertCommon(codesIN, tnameIN);

                    }

                    string[,] codec = new string[,]
	               {           
          {"ecfconcurrent_status","1" }
                  };
                    string[,] whrec = new string[,]
	               {
          {"ecfconcurrent_ecf_gid",ecfgid.ToString() },
          {"ecfconcurrent_queue_gid",queuegid.ToString() }
                  };
                    string tnamec = "iem_trn_tecfconcurrent";
                    string insertcommendc = objCommonIUD.UpdateCommon(codec, whrec, tnamec);

                    statuss = "Success";
                    string queue_gid = "";
                    GetConnection();
                    DataTable dtempsupnew = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = empgid;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMaxqueuegid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtempsupnew);
                    if (dtempsupnew.Rows.Count > 0)
                    {
                        queue_gid = Convert.ToString(dtempsupnew.Rows[0]["queue_gid"].ToString());
                    }

                    string mail = queue_gid.ToString();
                    GetConnection();
                    DataTable dtdoctype = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdoctype);
                    if (dtdoctype.Rows.Count > 0)
                    {
                        string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                        doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                        mailsender.sendusermail("EOW", doctypeid, mail, "R", "0");
                    }
                }
                return statuss;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }*/


        public string Insertapprovedactioncon(Approveraction EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string ecftype, string queuegid)
        {
            string statuss = "error";
            try
            {
                string Remarks = "";
                string EcfConcurrentApprovald = "";
                int docsubtype_gid = 0;
                int maxqueue = 0;
                string mailappstatus = "R"; // Pandiaraj 28-12-2018
                if (EmployeeeExpense.Rejecthold == null)
                {
                    Remarks = "";
                }
                else
                {
                    Remarks = EmployeeeExpense.Rejecthold;
                }

                string EcfConcurrentApprovalreject = ConfigurationManager.AppSettings["EcfConcurrentApprovalreject"].ToString();
                string EcfApproved = ConfigurationManager.AppSettings["EcfInprocess"].ToString();
                string EcfConcurrentApproval = ConfigurationManager.AppSettings["EcfConcurrentApproval"].ToString();
                string EcfRejected = ConfigurationManager.AppSettings["EcfRejected"].ToString();

                if (EmployeeeExpense.status == "Approve" || EmployeeeExpense.status == "NotApplicable")
                {
                    mailappstatus = "A"; // Pandiaraj 28-12-2018
                    if (EmployeeeExpense.status == "NotApplicable")
                    {
                        EcfConcurrentApprovald = ConfigurationManager.AppSettings["EcfConcurrentApprovalnotapp"].ToString();
                    }
                    else
                    {
                        EcfConcurrentApprovald = ConfigurationManager.AppSettings["EcfConcurrentApprovalappred"].ToString();
                    }
                }
                else
                {
                    mailappstatus = "R";
                }

                GetConnection();
                cmd = new SqlCommand("Insertapprovedaction_concurrent", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                //cmd.Parameters.Add("@invoicegid", SqlDbType.Int).Value = Convert.ToInt32(invoicegid.ToString());
                cmd.Parameters.Add("@invoicegid", SqlDbType.Int).Value = string.IsNullOrEmpty(invoicegid.ToString()) ? 0 : Convert.ToInt32(invoicegid);
                cmd.Parameters.Add("@empgid", SqlDbType.Int).Value = Convert.ToInt32(empgid.ToString());
                cmd.Parameters.Add("@ecftype", SqlDbType.VarChar).Value = ecftype;
                cmd.Parameters.Add("@queue_gid", SqlDbType.Int).Value = Convert.ToInt32(queuegid.ToString());

                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks;
                cmd.Parameters.Add("@EcfApproved", SqlDbType.VarChar).Value = EcfApproved;
                cmd.Parameters.Add("@status", SqlDbType.VarChar).Value = EmployeeeExpense.status;
                cmd.Parameters.Add("@EcfConcurrentApprovald", SqlDbType.VarChar).Value = EcfConcurrentApprovald;
                cmd.Parameters.Add("@EcfConcurrentApprovalreject", SqlDbType.VarChar).Value = EcfConcurrentApprovalreject;
                cmd.Parameters.Add("@EcfRejected", SqlDbType.VarChar).Value = EcfRejected;

                cmd.Parameters.Add("@docsubtype_gid", SqlDbType.Int, 64);
                cmd.Parameters["@docsubtype_gid"].Direction = ParameterDirection.Output;

                cmd.Parameters.Add("@maxqueue", SqlDbType.Int, 64);
                cmd.Parameters["@maxqueue"].Direction = ParameterDirection.Output;

                cmd.Parameters.Add("@constatus", SqlDbType.VarChar, 20);
                cmd.Parameters["@constatus"].Direction = ParameterDirection.Output;

                cmd.ExecuteNonQuery();
                docsubtype_gid = Convert.ToInt32(cmd.Parameters["@docsubtype_gid"].Value);
                maxqueue = Convert.ToInt32(cmd.Parameters["@maxqueue"].Value);
                statuss = cmd.Parameters["@constatus"].Value.ToString();
                string doctypeid = docsubtype_gid.ToString();
                string max_queue = maxqueue.ToString();
                doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                string mailstatus = mailsender.sendusermail("EOW", doctypeid, max_queue, mailappstatus, "0");

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                //return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return statuss;
        }

        public string GetStatuspetty(string valatate, string valatate1)
        {
            string result = "";
            string arfamt = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = valatate1.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetPetty";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    arfamt = Convert.ToString(dt.Rows[0]["ecfarf_exception"].ToString());
                    if (arfamt != "")
                    {
                        decimal ecfamt = Convert.ToDecimal(valatate.ToString());
                        decimal arfamount = Convert.ToDecimal(arfamt);
                        if (arfamount >= ecfamt)
                        {
                            result = "Sucess";
                        }
                        else
                        {
                            result = "ECF Amont Should be less than or equal to " + arfamount.ToString();
                        }
                    }
                    else
                    {
                        result = "Employee Can't Raise Petty Cash Claim";
                    }
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return result;
        }
        public string GetStatusexcelduplicate(string valatate, string valatate1, string valatate2, string valatate3,
            string valatate4, string valatate5, string valatate6, string valatate7, string valatate8, string valatate9, string valatate10, string action)
        {
            string result = "";
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_excelvalate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@chkdata", SqlDbType.VarChar).Value = valatate.ToString();
                cmd.Parameters.Add("@chkdata1", SqlDbType.VarChar).Value = valatate1.ToString();
                cmd.Parameters.Add("@chkdata2", SqlDbType.VarChar).Value = valatate2.ToString();
                cmd.Parameters.Add("@chkdata3", SqlDbType.VarChar).Value = valatate3.ToString();
                cmd.Parameters.Add("@chkdata4", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(valatate4.ToString());
                cmd.Parameters.Add("@chkdata5", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(valatate5.ToString());
                cmd.Parameters.Add("@chkdata6", SqlDbType.VarChar).Value = valatate6.ToString();
                cmd.Parameters.Add("@chkdata7", SqlDbType.VarChar).Value = valatate7.ToString();
                cmd.Parameters.Add("@chkdata8", SqlDbType.VarChar).Value = valatate8.ToString();
                cmd.Parameters.Add("@chkdata9", SqlDbType.VarChar).Value = valatate9.ToString();
                cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = action;
                result = (string)cmd.ExecuteScalar();
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return result;
        }
        public string GetStatusexcel(string valatate, string valatate1, string valatate2, string action)
        {
            string result = "";
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_excelvalate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@chkdata", SqlDbType.VarChar).Value = valatate.ToString();
                cmd.Parameters.Add("@chkdata1", SqlDbType.VarChar).Value = valatate1.ToString();
                cmd.Parameters.Add("@chkdata2", SqlDbType.VarChar).Value = valatate2.ToString();
                cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = action;
                result = (string)cmd.ExecuteScalar();
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return result;
        }
        public string Gettravelexcel(string valatate, string valatate1, string action)
        {
            string result = "";
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_Travelempchk", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@chkdata", SqlDbType.VarChar).Value = valatate1.ToString();
                cmd.Parameters.Add("@chkEmp", SqlDbType.VarChar).Value = valatate.ToString();
                cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = action;
                result = (string)cmd.ExecuteScalar();
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return result;
        }
        public IEnumerable<EOW_TravelClaim> GetTravelModedatalocal(DataTable DataTable, string ecfgid, string ecfdate)
        {
            List<EOW_TravelClaim> objNatureofExpenses = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                DataTable err1 = new DataTable();
                err1 = (DataTable)DataTable;

                for (int i = 0; i < err1.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.NatureofExpensesName = err1.Rows[i]["Nature of Expenses"].ToString();
                    objModel.ExpenseCategoryName = err1.Rows[i]["Main Category"].ToString();
                    objModel.SubCategoryName = err1.Rows[i]["Sub Category"].ToString();
                    objModel.raisermodeId = err1.Rows[i]["Employee ID"].ToString();
                    objModel.raisermodeName = err1.Rows[i]["Employee Name"].ToString();
                    objModel.Branch = err1.Rows[i]["Branch"].ToString();
                    objModel.ClaimPeriodFrom = objCmnFunctions.ddMMyyyyString(err1.Rows[i]["From Date"].ToString());
                    objModel.ClaimPeriodTo = objCmnFunctions.ddMMyyyyString(err1.Rows[i]["To Date"].ToString());
                    objModel.TravelModeName = err1.Rows[i]["Travel Mode"].ToString();
                    objModel.Distance = err1.Rows[i]["Distance"].ToString();
                    objModel.Rate = err1.Rows[i]["Rate"].ToString();
                    objModel.FC = err1.Rows[i]["Function Code"].ToString();
                    objModel.CC = err1.Rows[i]["Cost Code"].ToString();
                    objModel.ProductCode = err1.Rows[i]["Product Code"].ToString();
                    objModel.OUCode = err1.Rows[i]["OU Code"].ToString();
                    objModel.Amount = err1.Rows[i]["Amount"].ToString();
                    objNatureofExpenses.Add(objModel);

                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetEmployeeelocal(DataTable convertTable, DataTable uploadTable, string ecfgid, string ecfdate)
        {
            string invoice_gid = "";
            string Emp_Msg = "";
            string Natureid = "";
            string Expenseid = "";
            string SubCatid = "";
            string TravelModeid = "";
            string result = "";
            try
            {
                List<EOW_Payment> objNatureofExpenses = new List<EOW_Payment>();
                EOW_Payment objModel;
                DataTable err1 = new DataTable();
                err1 = (DataTable)convertTable;
                for (int i = 0; i < err1.Rows.Count; i++)
                {
                    objModel = new EOW_Payment();

                    objModel.Employeecode = err1.Rows[i]["EmployeeID"].ToString().Trim();
                    objModel.Employeename = err1.Rows[i]["emp_name"].ToString().Trim();
                    objModel.PaymentAmount = err1.Rows[i]["Amount"].ToString().Trim();
                    DataTable dtmode = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_empdetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_code", SqlDbType.VarChar).Value = err1.Rows[i]["EmployeeID"].ToString().Trim();
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetailscode";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtmode);
                    if (dtmode.Rows.Count > 0)
                    {
                        objModel.PaymentModeName = Convert.ToString(dtmode.Rows[0]["emp_paymode"].ToString());
                        objModel.RefNoName = Convert.ToString(dtmode.Rows[0]["employee_era_acc_no"].ToString());
                        objModel.Description = Convert.ToString(dtmode.Rows[0]["emp_paymodedesc"].ToString());
                        objModel.Beneficiary = Convert.ToString(dtmode.Rows[0]["employee_name"].ToString());

                        objNatureofExpenses.Add(objModel);

                        string[,] codes = new string[,]
	               {
        {"ecfperson_ecf_gid",ecfgid },
	    {"ecfperson_employee_gid", Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString()) },
        {"ecfperson_branch_gid",Convert.ToString(dtmode.Rows[0]["employee_branch_gid"].ToString())},
	    {"ecfperson_fc_code", err1.Rows[i]["emp_fccode"].ToString().Trim() },
        {"ecfperson_cc_code",err1.Rows[i]["emp_cccode"].ToString().Trim()  }
                  };
                        string tname = "iem_trn_tecfperson";
                        string insertcommend = objCommonIUD.InsertCommon(codes, tname);


                        string[,] codesi = new string[,]
	               {
        {"invoice_ecf_gid",ecfgid},
	    {"invoice_employee_gid", Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString()) },
        {"invoice_type","E" },
	    {"invoice_date", objCmnFunctions.convertoDateTimeString(ecfdate).ToString()},
        {"invoice_service_month",objCmnFunctions.convertoDateTimeString(ecfdate).ToString()},
	    {"invoice_amount", err1.Rows[i]["Amount"].ToString().Trim()},
        {"invoice_wotax_amount", err1.Rows[i]["Amount"].ToString().Trim() },
	    {"invoice_dedup_no", "0"},
        {"invoice_no", "0"},
        {"invoice_provision_flag", "N"},
        {"invoice_dedup_status","0" }    
                  };
                        string tnamei = "iem_trn_tinvoice";

                        string insertcommendi = objCommonIUD.InsertCommon(codesi, tnamei);

                        DataTable dtup = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicemaxgiduseecf";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtup);
                        if (dtup.Rows.Count > 0)
                        {
                            invoice_gid = Convert.ToString(dtup.Rows[0]["invoice_gid"].ToString());
                        }

                        GetConnection();
                        DataSet dt = new DataSet();
                        cmd = new SqlCommand("pr_eow_com_naturecatsupcat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@nature_gid", SqlDbType.VarChar).Value = err1.Rows[i]["NatureofExpenses"].ToString().Trim();
                        cmd.Parameters.Add("@cat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["MainCategory"].ToString().Trim();
                        cmd.Parameters.Add("@supcat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["SubCategory"].ToString().Trim();
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetmappedother";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dt);

                        if (dt.Tables[0].Rows.Count > 0)
                        {
                            Emp_Msg = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gl_no"].ToString());
                            Expenseid = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gid"].ToString());
                        }
                        if (dt.Tables[1].Rows.Count > 0)
                        {
                            SubCatid = Convert.ToString(dt.Tables[1].Rows[0]["expsubcat_gid"].ToString());
                        }
                        if (dt.Tables[2].Rows.Count > 0)
                        {
                            Natureid = Convert.ToString(dt.Tables[2].Rows[0]["expnature_gid"].ToString());
                        }
                        string distanceadd = "0";
                        string rateadd = "0";

                        string[,] codest = new string[,]
	               {
        {"ecftravel_ecf_gid",ecfgid },
	    {"ecftravel_invoice_gid", invoice_gid},
        {"ecftravel_expnature_gid",Natureid},
	    {"ecftravel_expcat_gid", Expenseid},
        {"ecftravel_expsubcat_gid",SubCatid },
	    {"ecftravel_employee_gid", Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString())},
        {"ecftravel_branch_gid", Convert.ToString(dtmode.Rows[0]["employee_branch_gid"].ToString())},

        {"ecftravel_type", "T"},
        {"ecftravel_gl_no", Emp_Msg},

        {"ecftravel_date_from",objCmnFunctions.convertoDateTimeString(err1.Rows[i]["DateFrom"].ToString().Trim()).ToString().Trim()},
	    {"ecftravel_date_to", objCmnFunctions.convertoDateTimeString(err1.Rows[i]["DateTo"].ToString().Trim()).ToString().Trim()},
        {"ecftravel_fc",err1.Rows[i]["emp_fccode"].ToString().Trim() },
	    {"ecftravel_cc", err1.Rows[i]["emp_cccode"].ToString().Trim()},
        {"ecftravel_product_code", err1.Rows[i]["emp_productcode"].ToString().Trim()},
        {"ecftravel_ou_code",err1.Rows[i]["emp_oucode"].ToString().Trim() },
        {"ecftravel_distance", distanceadd.ToString()},
        {"ecftravel_rate",rateadd.ToString()},
	    {"ecftravel_amount", err1.Rows[i]["Amount"].ToString().Trim()}       
                  };
                        string tnamet = "iem_trn_tecftravel";

                        string insertcommendt = objCommonIUD.InsertCommon(codest, tnamet);

                        string bankgid = "0";
                        string bankgnno = "123";
                        GetConnection();
                        DataTable dtpaybank = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString());
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dtmode.Rows[0]["emp_paymode"].ToString());
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtpaybank);
                        if (dtpaybank.Rows.Count > 0)
                        {
                            if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                            {
                                bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                            }
                            if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                            {
                                bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                            }
                        }

                        string[,] codesc = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoice_gid},
        {"ecfcreditline_pay_mode",Convert.ToString(dtmode.Rows[0]["emp_paymode"].ToString()) },
	    {"ecfcreditline_ref_no", Convert.ToString(dtmode.Rows[0]["employee_era_acc_no"].ToString())},
        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtmode.Rows[0]["employee_name"].ToString())) },
	    {"ecfcreditline_bank_gid",bankgid},
        {"ecfcreditline_ifsc_code",Convert.ToString(dtmode.Rows[0]["employee_era_ifsc_code"].ToString())},
	    {"ecfcreditline_gl_no", bankgnno},
        {"ecfcreditline_desc", Convert.ToString(dtmode.Rows[0]["emp_paymodedesc"].ToString())},
        {"ecfcreditline_amount", err1.Rows[i]["Amount"].ToString().Trim() }      
                  };

                        string tnamec = "iem_trn_tecfcreditline";

                        string insertcommendc = objCommonIUD.InsertCommon(codesc, tnamec);
                    }

                    DataTable uniqueemp = new DataTable();
                    uploadTable.DefaultView.RowFilter = "Convert([Employee ID], 'System.String') ='" + err1.Rows[i]["EmployeeID"].ToString().Trim() + "'";
                    uniqueemp = uploadTable.DefaultView.ToTable();
                    string maxtravelgid = "0";
                    DataTable dtnewd = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoice_gid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getmaxtravelgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtnewd);
                    if (dtnewd.Rows.Count > 0)
                    {
                        maxtravelgid = Convert.ToString(dtnewd.Rows[0]["ecftravel_gid"].ToString());
                    }

                    string exceltext = "";

                    for (int trcol = 0; trcol < uniqueemp.Rows.Count; trcol++)
                    {
                        exceltext = uniqueemp.Rows[trcol]["Date"].ToString().Trim();
                        string[] splitsdate = exceltext.Split('-');
                        string[] splitsdatesec = exceltext.Split('/');
                        if (splitsdate.Length > 1)
                        {
                            exceltext = exceltext.ToString();
                        }
                        else if (splitsdatesec.Length > 1)
                        {
                            exceltext = exceltext.ToString();
                        }
                        else
                        {
                            double d = double.Parse(exceltext);
                            DateTime conv = DateTime.FromOADate(d);
                            exceltext = conv.ToString();
                        }

                        DataTable dtnewmode = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_transportdetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@transport_gid", SqlDbType.VarChar).Value = uniqueemp.Rows[trcol]["Travel Mode"].ToString().Trim();
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "transportdetails";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtnewmode);
                        if (dtnewmode.Rows.Count > 0)
                        {
                            TravelModeid = Convert.ToString(dtnewmode.Rows[0]["transport_gid"].ToString());
                        }

                        string[,] codest = new string[,]
	               {
        {"ecftravellocal_ecftravel_gid",maxtravelgid },
        {"ecftravellocal_ecf_gid",ecfgid },
	    {"ecftravellocal_invoice_gid", invoice_gid},
        {"ecftravellocal_expnature_gid",Natureid},
	    {"ecftravellocal_expcat_gid", Expenseid},
        {"ecftravellocal_expsubcat_gid",SubCatid },
	    {"ecftravellocal_employee_gid", Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString())},
        {"ecftravellocal_branch_gid", Convert.ToString(dtmode.Rows[0]["employee_branch_gid"].ToString())},

        {"ecftravellocal_type", "T"},
        {"ecftravellocal_transport_gid", TravelModeid},  
        {"ecftravellocal_gl_no", Emp_Msg},

        {"ecftravellocal_city_from",uniqueemp.Rows[trcol]["Place From"].ToString().Trim().Length > 64 ?  uniqueemp.Rows[trcol]["Place From"].ToString().Trim().Substring(0,63) : uniqueemp.Rows[trcol]["Place From"].ToString().Trim() },
	    {"ecftravellocal_city_to", uniqueemp.Rows[trcol]["Place To"].ToString().Trim().Length > 64 ?  uniqueemp.Rows[trcol]["Place To"].ToString().Trim().Substring(0,63) : uniqueemp.Rows[trcol]["Place To"].ToString().Trim()},

        {"ecftravellocal_date_from",objCmnFunctions.convertoDateTimeString(exceltext).ToString().Trim()},
        {"ecftravellocal_fc",err1.Rows[i]["emp_fccode"].ToString().Trim() },
	    {"ecftravellocal_cc", err1.Rows[i]["emp_cccode"].ToString().Trim()},
        {"ecftravellocal_product_code", err1.Rows[i]["emp_productcode"].ToString().Trim()},
        {"ecftravellocal_ou_code",err1.Rows[i]["emp_oucode"].ToString().Trim() },
        {"ecftravellocal_distance", uniqueemp.Rows[trcol]["Distance"].ToString().Trim()},
        {"ecftravellocal_rate",uniqueemp.Rows[trcol]["Rate"].ToString().Trim()},
	    {"ecftravellocal_amount", uniqueemp.Rows[trcol]["Amount"].ToString().Trim()}       
                  };
                        string tnamet = "iem_trn_tecftravellocallocal";

                        string insertcommendt = objCommonIUD.InsertCommon(codest, tnamet);
                    }
                }
                result = "Sucess";
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "Error";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return result;
        }
        public IEnumerable<EOW_Payment> GetEmployeeePaymentlocal(DataTable DataTable, string ecfgid, string ecfdate)
        {
            List<EOW_Payment> objNatureofExpenses = new List<EOW_Payment>();
            try
            {
                string invoice_gid = "";
                string Emp_Msg = "";
                string Natureid = "";
                string Expenseid = "";
                string SubCatid = "";
                string TravelModeid = "";

                EOW_Payment objModel;
                DataTable err1 = new DataTable();
                err1 = (DataTable)DataTable;

                for (int i = 0; i < err1.Rows.Count; i++)
                {
                    objModel = new EOW_Payment();

                    objModel.Employeecode = err1.Rows[i]["Employee ID"].ToString().Trim();
                    objModel.Employeename = err1.Rows[i]["Employee Name"].ToString().Trim();
                    objModel.PaymentAmount = err1.Rows[i]["Amount"].ToString().Trim();
                    DataTable dtmode = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_empdetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_code", SqlDbType.VarChar).Value = err1.Rows[i]["Employee ID"].ToString().Trim();
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetailscode";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtmode);
                    if (dtmode.Rows.Count > 0)
                    {
                        objModel.PaymentModeName = "ERA";
                        objModel.RefNoName = Convert.ToString(dtmode.Rows[0]["employee_era_acc_no"].ToString());
                        objModel.Description = Convert.ToString(dtmode.Rows[0]["employee_era_bank_code"].ToString());
                        objModel.Beneficiary = Convert.ToString(dtmode.Rows[0]["employee_name"].ToString());

                        objNatureofExpenses.Add(objModel);

                        string[,] codes = new string[,]
	               {
        {"ecfperson_ecf_gid",ecfgid },
	    {"ecfperson_employee_gid", Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString()) },
        {"ecfperson_branch_gid",Convert.ToString(dtmode.Rows[0]["employee_branch_gid"].ToString())},
	    {"ecfperson_fc_code", err1.Rows[i]["Function Code"].ToString().Trim() },
        {"ecfperson_cc_code",err1.Rows[i]["Cost Code"].ToString().Trim()  }
                  };
                        string tname = "iem_trn_tecfperson";
                        string insertcommend = objCommonIUD.InsertCommon(codes, tname);


                        string[,] codesi = new string[,]
	               {
        {"invoice_ecf_gid",ecfgid},
	    {"invoice_employee_gid", Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString()) },
        {"invoice_type","E" },
	    {"invoice_date", objCmnFunctions.convertoDateTimeString(ecfdate).ToString()},
        {"invoice_service_month",objCmnFunctions.convertoDateTimeString(ecfdate).ToString()},
	    {"invoice_amount", err1.Rows[i]["Amount"].ToString().Trim()},
        {"invoice_wotax_amount", err1.Rows[i]["Amount"].ToString().Trim() },
	    {"invoice_dedup_no", "0"},
        {"invoice_no", "0"},
        {"invoice_provision_flag", "N"},
        {"invoice_dedup_status","0" }    
                  };
                        string tnamei = "iem_trn_tinvoice";

                        string insertcommendi = objCommonIUD.InsertCommon(codesi, tnamei);


                        GetConnection();
                        DataTable dtup = new DataTable();
                        cmd = new SqlCommand("select MAX(invoice_gid) as invoice_gid from iem_trn_tinvoice  where invoice_ecf_gid='" + ecfgid + "' and invoice_isremoved='N'", con);
                        cmd.CommandType = CommandType.Text;
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtup);
                        if (dtup.Rows.Count > 0)
                        {
                            invoice_gid = Convert.ToString(dtup.Rows[0]["invoice_gid"].ToString());
                        }
                        DataSet dt = new DataSet();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_naturecatsupcat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@nature_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Nature of Expenses"].ToString().Trim();
                        cmd.Parameters.Add("@cat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Main Category"].ToString().Trim();
                        cmd.Parameters.Add("@supcat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Sub Category"].ToString().Trim();
                        cmd.Parameters.Add("@transport_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Travel Mode"].ToString().Trim();
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetdescription";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dt);
                        if (dt.Tables[0].Rows.Count > 0)
                        {
                            Emp_Msg = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gl_no"].ToString());
                            Expenseid = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gid"].ToString());
                        }
                        if (dt.Tables[1].Rows.Count > 0)
                        {
                            SubCatid = Convert.ToString(dt.Tables[1].Rows[0]["expsubcat_gid"].ToString());
                        }
                        if (dt.Tables[2].Rows.Count > 0)
                        {
                            Natureid = Convert.ToString(dt.Tables[2].Rows[0]["expnature_gid"].ToString());
                        }
                        if (dt.Tables[3].Rows.Count > 0)
                        {
                            TravelModeid = Convert.ToString(dt.Tables[3].Rows[0]["transport_gid"].ToString());
                        }

                        string distanceadd = err1.Rows[i]["Distance"].ToString().Trim();
                        if (distanceadd == "")
                        {
                            distanceadd = "0";
                        }
                        string rateadd = err1.Rows[i]["Rate"].ToString().Trim();
                        if (rateadd == "")
                        {
                            rateadd = "0";
                        }

                        string[,] codest = new string[,]
	               {
        {"ecftravel_ecf_gid",ecfgid },
	    {"ecftravel_invoice_gid", invoice_gid},
        {"ecftravel_expnature_gid",Natureid},
	    {"ecftravel_expcat_gid", Expenseid},
        {"ecftravel_expsubcat_gid",SubCatid },
	    {"ecftravel_employee_gid", Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString())},
        {"ecftravel_branch_gid", Convert.ToString(dtmode.Rows[0]["employee_branch_gid"].ToString())},

        {"ecftravel_type", "T"},
        {"ecftravel_transport_gid", TravelModeid},    
        {"ecftravel_gl_no", Emp_Msg},

        {"ecftravel_date_from",objCmnFunctions.convertoDateTimeString(err1.Rows[i]["From Date"].ToString().Trim()).ToString().Trim()},
	    {"ecftravel_date_to", objCmnFunctions.convertoDateTimeString(err1.Rows[i]["To Date"].ToString().Trim()).ToString().Trim()},
        {"ecftravel_fc",err1.Rows[i]["Function Code"].ToString().Trim() },
	    {"ecftravel_cc", err1.Rows[i]["Cost Code"].ToString().Trim()},
        {"ecftravel_product_code", err1.Rows[i]["Product Code"].ToString().Trim()},
        {"ecftravel_ou_code",err1.Rows[i]["OU Code"].ToString().Trim() },
        {"ecftravel_distance", distanceadd.ToString()},
        {"ecftravel_rate",rateadd.ToString()},
	    {"ecftravel_amount", err1.Rows[i]["Amount"].ToString().Trim()}       
                  };
                        string tnamet = "iem_trn_tecftravel";

                        string insertcommendt = objCommonIUD.InsertCommon(codest, tnamet);

                        string bankgid = "0";
                        string bankgnno = "123";
                        GetConnection();
                        DataTable dtpaybank = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Convert.ToString(dtmode.Rows[0]["employee_gid"].ToString());
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = "ERA";
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtpaybank);
                        if (dtpaybank.Rows.Count > 0)
                        {
                            if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                            {
                                bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                            }
                            if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                            {
                                bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                            }
                        }

                        string[,] codesc = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoice_gid},
        {"ecfcreditline_pay_mode","ERA" },
	    {"ecfcreditline_ref_no", Convert.ToString(dtmode.Rows[0]["employee_era_acc_no"].ToString())},
        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtmode.Rows[0]["employee_name"].ToString())) },
	    {"ecfcreditline_bank_gid", bankgid},
        {"ecfcreditline_ifsc_code",Convert.ToString(dtmode.Rows[0]["employee_era_ifsc_code"].ToString())},
	    {"ecfcreditline_gl_no", bankgnno},
        {"ecfcreditline_desc", "Employee Salary Account"},
        {"ecfcreditline_amount", err1.Rows[i]["Amount"].ToString().Trim() }      
                  };

                        string tnamec = "iem_trn_tecfcreditline";

                        string insertcommendc = objCommonIUD.InsertCommon(codesc, tnamec);
                    }
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetLocalexpdatapopup(string ecfid, string traveltypeid)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@traveltypegid", SqlDbType.VarChar).Value = traveltypeid;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetLocalexpdata";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecftravellocal_gid"].ToString());
                    objModel.PlaceFrom = Convert.ToString(dt.Rows[i]["ecftravellocal_city_from"].ToString());
                    objModel.PlaceTo = Convert.ToString(dt.Rows[i]["ecftravellocal_city_to"].ToString());
                    objModel.ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecftravellocal_date_from"].ToString());
                    objModel.TravelModeName = Convert.ToString(dt.Rows[i]["transport_name"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecftravellocal_fc"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecftravellocal_cc"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecftravellocal_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecftravellocal_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravellocal_amount"].ToString());
                    objModel.Distance = Convert.ToString(dt.Rows[i]["ecftravellocal_distance"].ToString());
                    objModel.Rate = Convert.ToString(dt.Rows[i]["ecftravellocal_rate"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetLocalexpdata(string ecfid, string traveltype)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = traveltype;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localcovydebitdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecftravel_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.PlaceFrom = Convert.ToString(dt.Rows[i]["ecftravel_city_from"].ToString());
                    objModel.ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecfdebitline_period_from"].ToString());
                    objModel.ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecfdebitline_period_to"].ToString());
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecftravel_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecftravel_fc"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecftravel_cc"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecftravel_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecftravel_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.Distance = Convert.ToString(dt.Rows[i]["ecftravel_distance"].ToString());
                    objModel.Rate = Convert.ToString(dt.Rows[i]["ecftravel_rate"].ToString());

                    objModel.raisermodeId = Convert.ToString(dt.Rows[i]["employee_code"].ToString());
                    objModel.raisermodeName = Convert.ToString(dt.Rows[i]["employee_name"].ToString());
                    objModel.Branch = Convert.ToString(dt.Rows[i]["branch_name"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        //Ramya
        public IEnumerable<EOW_Payment> GetLocalPayment(string ecfgid, string invoicegid)
        {
            List<EOW_Payment> objExpense = new List<EOW_Payment>();
            try
            {

                EOW_Payment objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "suppliercreditdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_Payment();
                        objModel.Paymentgid = Convert.ToInt32(dt.Rows[i]["ecfcreditline_gid"].ToString());
                        objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["ecfcreditline_pay_mode"].ToString());
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecfcreditline_ref_no"].ToString());
                        objModel.Beneficiary = Convert.ToString(dt.Rows[i]["ecfcreditline_beneficiary"].ToString());
                        objModel.Description = Convert.ToString(dt.Rows[i]["ecfcreditline_desc"].ToString());
                        objModel.PaymentAmount = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                        objModel.Employeecode = Convert.ToString(dt.Rows[i]["employee_code"].ToString());
                        objModel.Employeename = Convert.ToString(dt.Rows[i]["employee_name"].ToString());
                        objExpense.Add(objModel);
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Doctype> GetMDoctype()
        {
            List<EOW_Doctype> objparenttax = new List<EOW_Doctype>();
            try
            {

                objparenttax.Add(new EOW_Doctype { DocId = "0", DocName = "-- Select --", });
                objparenttax.Add(new EOW_Doctype { DocId = "3", DocName = "Non PO/WO", });
                objparenttax.Add(new EOW_Doctype { DocId = "4", DocName = "Utility", });
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_Doctype> GetDoctype()
        {
            List<EOW_Doctype> objparenttax = new List<EOW_Doctype>();
            try
            {

                objparenttax.Add(new EOW_Doctype { DocId = "0", DocName = "-- Select --", });
                objparenttax.Add(new EOW_Doctype { DocId = "1", DocName = "PO", });
                objparenttax.Add(new EOW_Doctype { DocId = "2", DocName = "WO(With PAR)", });
                objparenttax.Add(new EOW_Doctype { DocId = "5", DocName = "WO(WithOut PAR)", }); // Muthu added on 25-MAY-2022
                objparenttax.Add(new EOW_Doctype { DocId = "3", DocName = "Non PO/WO", });
                objparenttax.Add(new EOW_Doctype { DocId = "4", DocName = "Utility", });
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Currency> GetCurrency()
        {
            List<EOW_Currency> objNatureofExpenses = new List<EOW_Currency>();
            try
            {

                EOW_Currency objModel;
                objNatureofExpenses.Add(new EOW_Currency { CurrencyId = "0", CurrencyName = "-- Select --", });
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getcurrencys";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_Currency();
                    objModel.CurrencyId = Convert.ToString(dt.Rows[i]["currency_gid"].ToString());
                    objModel.CurrencyName = Convert.ToString(dt.Rows[i]["currency_code"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string InsertEmployeeeBasicupdatesup(EOW_Supplierinvoice EmployeeeExpense, string eMP_Gid, string EmployeeeGid, string proxy, string id)
        {
            string Emp_MsgDoc = "";
            string insertcommend = "";
            string Emp_Msg = "";
            string empecfdesction = "";
            string empamortdesction = "";
            string Emp_Msgamort = "";
            string ecfremarks = "";
            try
            {
                if (EmployeeeExpense.ecfremark != null)
                {
                    ecfremarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfremark);
                }
                if (EmployeeeExpense.DocId.ToString() == "1")
                {
                    Emp_MsgDoc = "P";
                }
                else if (EmployeeeExpense.DocId.ToString() == "2")
                {
                    Emp_MsgDoc = "W";
                }
                else if (EmployeeeExpense.DocId.ToString() == "3")
                {
                    Emp_MsgDoc = "N";
                }
                else if (EmployeeeExpense.DocId.ToString() == "4")
                {
                    Emp_MsgDoc = "U";
                }
                else if (EmployeeeExpense.DocId.ToString() == "5") // Muthu Added on 26-MAY-2022
                {
                    Emp_MsgDoc = "O";
                }
                if (EmployeeeExpense.ecfdescription != "" && EmployeeeExpense.ecfdescription != null)
                {
                    empecfdesction = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfdescription);
                }
                if (EmployeeeExpense.amortdec != "" && EmployeeeExpense.amortdec != null)
                {
                    empamortdesction = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.amortdec);
                }

                //        if (EmployeeeExpense.amort.ToString() == "No")
                //        {
                //            Emp_Msgamort = "N";
                //            string[,] codes = new string[,]
                //           {
                //{"ecf_supplier_employee","S"},
                //{"ecf_supplier_gid", EmployeeeGid},
                //{"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString() },
                //{"ecf_create_mode", EmployeeeExpense.raisermodeId},
                //{"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.ECF_Date).ToString()},
                //{"ecf_currency_gid",EmployeeeExpense.CurrencyId},
                //{"ecf_currency_code",EmployeeeExpense.CurrencyName },
                //{"ecf_currency_rate", EmployeeeExpense.Exrate},
                //{"ecf_amount", EmployeeeExpense.ECF_Amount},
                //{"ecf_po_type", Emp_MsgDoc},
                //{"ecf_description", empecfdesction},
                //{"ecf_delmat_amount",EmployeeeExpense.ECF_Amount },
                //{"ecf_currency_amount", EmployeeeExpense.ECF_Amount},
                //{"ecf_status","0" },
                //{"ecf_all_status","0" },        
                //{"ecf_urgent_flag","N"},
                //{"ecf_insert_by",objCmnFunctions.GetLoginUserGid().ToString() },
                //{"ecf_insert_date", "sysdatetime()"},
                //{"ecf_raiser",eMP_Gid },
                //{"ecf_remark", ecfremarks}
                //          };
                //            string[,] whcosup = new string[,]
                //           {       
                //{"ecf_gid", id}
                //          };
                //            string tname = "iem_trn_tecf";
                //            insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                //        }
                //        else
                //        {
                //            Emp_Msgamort = "Y";
                //            string[,] codes = new string[,]
                //           {
                //{"ecf_supplier_employee","S"},
                //{"ecf_supplier_gid", EmployeeeGid},
                //{"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString() },
                //{"ecf_create_mode", EmployeeeExpense.raisermodeId},
                //{"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.ECF_Date).ToString()},
                //{"ecf_currency_gid",EmployeeeExpense.CurrencyId},
                //{"ecf_currency_code",EmployeeeExpense.CurrencyName },
                //{"ecf_currency_rate", EmployeeeExpense.Exrate},
                //{"ecf_amount", EmployeeeExpense.ECF_Amount},
                //{"ecf_description", empecfdesction},
                // {"ecf_amort_flag", Emp_Msgamort},
                // {"ecf_amort_from", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.from).ToString()},
                // {"ecf_amort_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpense.to).ToString()},
                // {"ecf_amort_desc", empamortdesction},
                // {"ecf_po_type", Emp_MsgDoc},

                //{"ecf_delmat_amount",EmployeeeExpense.ECF_Amount },
                //{"ecf_currency_amount", EmployeeeExpense.ECF_Amount},
                //{"ecf_status","0" },
                //{"ecf_all_status","0" },        
                //{"ecf_urgent_flag","N"},
                //{"ecf_insert_by",objCmnFunctions.GetLoginUserGid().ToString() },
                //{"ecf_insert_date", "sysdatetime()"},
                //{"ecf_raiser",eMP_Gid },
                //{"ecf_remark", ecfremarks}
                //          };
                //            string[,] whcosup = new string[,]
                //           {

                //{"ecf_gid", id}
                //          };
                //            string tname = "iem_trn_tecf";
                //            insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                //        }
                //Emp_Msg = insertcommend.ToString();


                //Pandiaraj 29-09-2018 
                GetConnection();
                cmd = new SqlCommand("pr_eow_getecf", con);
                cmd.CommandType = CommandType.StoredProcedure;
                Emp_Msgamort = "N";
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = Convert.ToInt32(id);
                cmd.Parameters.Add("@ecf_supplier_gid", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeGid);
                cmd.Parameters.Add("@ecf_date", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString();
                cmd.Parameters.Add("@ecf_create_mode", SqlDbType.VarChar).Value = EmployeeeExpense.raisermodeId;
                cmd.Parameters.Add("@ecf_claim_month", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString();
                cmd.Parameters.Add("@ecf_currency_gid", SqlDbType.VarChar).Value = EmployeeeExpense.CurrencyId;
                cmd.Parameters.Add("@ecf_currency_code", SqlDbType.VarChar).Value = EmployeeeExpense.CurrencyName;
                cmd.Parameters.Add("@ecf_currency_rate", SqlDbType.VarChar).Value = EmployeeeExpense.Exrate;
                cmd.Parameters.Add("@ecf_amount", SqlDbType.VarChar).Value = EmployeeeExpense.ECF_Amount;
                cmd.Parameters.Add("@ecf_po_type", SqlDbType.VarChar).Value = Emp_MsgDoc;
                cmd.Parameters.Add("@ecf_description", SqlDbType.VarChar).Value = empecfdesction;
                cmd.Parameters.Add("@ecf_delmat_amount", SqlDbType.VarChar).Value = EmployeeeExpense.ECF_Amount;
                cmd.Parameters.Add("@ecf_currency_amount", SqlDbType.VarChar).Value = EmployeeeExpense.ECF_Amount;
                cmd.Parameters.Add("@ecf_amort_flag", SqlDbType.Char).Value = EmployeeeExpense.amort;
                cmd.Parameters.Add("@ecf_amort_from", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.from).ToString();
                cmd.Parameters.Add("@ecf_amort_to", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.to).ToString();
                cmd.Parameters.Add("@ecf_amort_desc", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(empamortdesction.Trim());
                cmd.Parameters.Add("@ecf_insert_by", SqlDbType.Int).Value = objCmnFunctions.GetLoginUserGid();
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = eMP_Gid;
                cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(ecfremarks.Trim());
                cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                Emp_Msg = Convert.ToString(cmd.Parameters["@MSG"].Value);
                //Pandiaraj 29-09-2018
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string InsertEmployeeeBasicsup(EOW_Supplierinvoice EmployeeeExpense, string eMP_Gid, string EmployeeeGid, string clmtype)
        {
            int Empgid = 0;
            string insertcommend = "";
            string Emp_Msgamort = "";
            string Emp_MsgDoc = "";
            string Emp_Msg = "";
            string Emp_brnchgid = "";
            string empecfdesction = "";
            string empamortdesction = "";
            string ecfremarks = "";
            try
            {
                if (EmployeeeExpense.ecfremark != null)
                {
                    ecfremarks = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfremark);
                }
                DataSet dtmodec = new DataSet();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = eMP_Gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtmodec);
                if (dtmodec.Tables[0].Rows.Count > 0)
                {
                    Emp_brnchgid = Convert.ToString(dtmodec.Tables[0].Rows[0]["employee_branch_gid"].ToString());
                }
                else
                {
                    Emp_brnchgid = "0";
                }

                if (clmtype == "S")
                {
                    Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfSupplierInvoice"].ToString());
                }
                else if(clmtype=="DI") // ramya added on 03 Mar 22 for DSA CR
                {
                    Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfDSAInvoice"].ToString());
                }
                if (EmployeeeExpense.DocId.ToString() == "1")
                {
                    Emp_MsgDoc = "P";
                }
                else if (EmployeeeExpense.DocId.ToString() == "2")
                {
                    Emp_MsgDoc = "W";
                }
                else if (EmployeeeExpense.DocId.ToString() == "3")
                {
                    Emp_MsgDoc = "N";
                }
                else if (EmployeeeExpense.DocId.ToString() == "4")
                {
                    Emp_MsgDoc = "U";
                }
                else if (EmployeeeExpense.DocId.ToString() == "5") // ramya added on 04 jun 22
                {
                    Emp_MsgDoc = "O";
                }
                if (EmployeeeExpense.ecfdescription != "" && EmployeeeExpense.ecfdescription != null)
                {
                    empecfdesction = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfdescription);
                }
                if (EmployeeeExpense.amortdec != "" && EmployeeeExpense.amortdec != null)
                {
                    empamortdesction = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.amortdec);
                }
                if (EmployeeeExpense.amort.ToString() == "No")
                {
                    Emp_Msgamort = "N";
                    string[,] codes = new string[,]
	               {
        {"ecf_supplier_employee","S"},
	    {"ecf_supplier_gid", EmployeeeGid},
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpense.raisermodeId},
        {"ecf_raiser",eMP_Gid },
        {"ecf_description", empecfdesction},
	    {"ecf_doctype_gid", "3"},
        {"ecf_branch_gid", Emp_brnchgid},
        {"ecf_docsubtype_gid",Empgid.ToString() },
	    {"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.ECF_Date).ToString()},
        {"ecf_currency_gid",EmployeeeExpense.CurrencyId.ToString()},
        {"ecf_currency_code",EmployeeeExpense.CurrencyName },
	    {"ecf_currency_rate", EmployeeeExpense.Exrate},
        {"ecf_amount", EmployeeeExpense.ECF_Amount},
        {"ecf_po_type", Emp_MsgDoc},
        {"ecf_delmat_amount",EmployeeeExpense.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpense.ECF_Amount},
        {"ecf_status","0" },
        {"ecf_all_status","0" },        
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",objCmnFunctions.GetLoginUserGid().ToString() },
	    {"ecf_insert_date", "sysdatetime()"},
        {"ecf_remark", ecfremarks}
                  };
                    string tname = "iem_trn_tecf";
                    insertcommend = objCommonIUD.InsertCommon(codes, tname);
                }
                else
                {
                    Emp_Msgamort = "Y";
                    string[,] codes = new string[,]
	               {
        {"ecf_supplier_employee","S"},
	    {"ecf_supplier_gid", EmployeeeGid},
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpense.raisermodeId},
        {"ecf_raiser",eMP_Gid },
	    {"ecf_doctype_gid", "3"},
        {"ecf_description", empecfdesction},
        {"ecf_branch_gid", Emp_brnchgid},
        {"ecf_docsubtype_gid",Empgid.ToString() },
	    {"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.ECF_Date).ToString()},
        {"ecf_currency_gid",EmployeeeExpense.CurrencyId.ToString()},
        {"ecf_currency_code",EmployeeeExpense.CurrencyName },
	    {"ecf_currency_rate", EmployeeeExpense.Exrate},
        {"ecf_amount", EmployeeeExpense.ECF_Amount},
        {"ecf_amort_flag", Emp_Msgamort},
        {"ecf_amort_from",objCmnFunctions.convertoDateTimeString(  EmployeeeExpense.from).ToString()},
        {"ecf_amort_to", objCmnFunctions.convertoDateTimeString( EmployeeeExpense.to).ToString()},
        {"ecf_amort_desc", empamortdesction},
        {"ecf_po_type", Emp_MsgDoc},
        {"ecf_delmat_amount",EmployeeeExpense.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpense.ECF_Amount},
        {"ecf_status","0" },
        {"ecf_all_status","0" },        
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",objCmnFunctions.GetLoginUserGid().ToString() },
	    {"ecf_insert_date", "sysdatetime()"},
        {"ecf_remark", ecfremarks}
                  };
                    string tname = "iem_trn_tecf";

                    insertcommend = objCommonIUD.InsertCommon(codes, tname);
                }
                Emp_Msg = insertcommend.ToString();

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_SupplierModelgrid> GetSupplierdata(string ecfid, string invoiceid, string traveltype)
        {
            List<EOW_SupplierModelgrid> objExpense = new List<EOW_SupplierModelgrid>();
            try
            {

                EOW_SupplierModelgrid objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_type", SqlDbType.VarChar).Value = traveltype;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoiceecfbase";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_SupplierModelgrid();
                    objModel.Invoicegid = Convert.ToInt32(dt.Rows[i]["invoice_gid"].ToString());
                    objModel.InvoiceDate = Convert.ToString(dt.Rows[i]["invoice_date"].ToString());
                    objModel.InvoiceNo = Convert.ToString(dt.Rows[i]["invoice_no"].ToString());
                    objModel.Description = Convert.ToString(dt.Rows[i]["invoice_desc"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["invoice_amount"].ToString());
                    string Provision = Convert.ToString(dt.Rows[i]["invoice_provision_flag"].ToString());
                    if (Provision == "N")
                    {
                        Provision = "No";
                    }
                    if (Provision == "Y")
                    {
                        Provision = "Yes";
                    }
                    objModel.Provision = Provision;
                    objModel.InvoiceReceiptDate = Convert.ToString(dt.Rows[i]["invoice_receipt_date"].ToString());
                    objModel.ReasonForDelay = Convert.ToString(dt.Rows[i]["invoice_reasonfordelay"].ToString());
                    objModel.FunctionalHeadApproval = Convert.ToString(dt.Rows[i]["invoice_FH_gid"].ToString()); // ramya added on 12 Apr 22
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_SupplierModelgrid> GetSuppliersingledata(string ecfid, string traveltype, int id)
        {
            List<EOW_SupplierModelgrid> objExpense = new List<EOW_SupplierModelgrid>();
            try
            {
                EOW_SupplierModelgrid objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = id.ToString();
                cmd.Parameters.Add("@invoice_type", SqlDbType.VarChar).Value = traveltype.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicedatas";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_SupplierModelgrid();
                    objModel.Invoicegid = Convert.ToInt32(dt.Rows[i]["invoice_gid"].ToString());
                    objModel.InvoiceDate = Convert.ToString(dt.Rows[i]["invoice_date"].ToString());
                    objModel.InvoiceNo = Convert.ToString(dt.Rows[i]["invoice_no"].ToString());
                    objModel.Description = Convert.ToString(dt.Rows[i]["invoice_desc"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["invoice_amount"].ToString());
                    objModel.Provision = Convert.ToString(dt.Rows[i]["invoice_provision_flag"].ToString());
                    objModel.TaxableAmount = Convert.ToString(dt.Rows[i]["invoice_wotax_amount"].ToString());
                    objModel.SerMonth = Convert.ToString(dt.Rows[i]["invoice_service_month"].ToString());
                    objModel.Retensionflg = Convert.ToString(dt.Rows[i]["invoice_retention_flag"].ToString());
                    objModel.Retensionper = Convert.ToString(dt.Rows[i]["invoice_retention_rate"].ToString());
                    objModel.Retensionamount = Convert.ToString(dt.Rows[i]["invoice_retention_amount"].ToString());
                    objModel.Retensionrelse = Convert.ToString(dt.Rows[i]["invoice_retention_releaseon"].ToString());
                    objModel.GstCharged = Convert.ToString(dt.Rows[i]["invoice_gst_charged"].ToString());
                    objModel.ProviderLocation = Convert.ToString(dt.Rows[i]["invoice_provider_location"].ToString());
                    objModel.ReceiverLocation = Convert.ToString(dt.Rows[i]["invoice_receiver_location"].ToString());
                    objModel.GstinVendor = Convert.ToString(dt.Rows[i]["invoice_gstin_vendor"].ToString());
                    objModel.GstinFiccl = Convert.ToString(dt.Rows[i]["invoice_gstin_ficcl"].ToString());
                    objModel.invoice_Cygnet_Gid = dt.Rows[i]["invoice_Cygnet_Gid"].ToString();
                    objModel.InvoiceReceiptDate = Convert.ToString(dt.Rows[i]["invoice_receipt_date"].ToString());
                    objModel.ReasonForDelay = Convert.ToString(dt.Rows[i]["reason_for_delay"].ToString());
                    objModel.FunctionalHeadApproval = Convert.ToString(dt.Rows[i]["invoice_FH_gid"].ToString()); // ramya added on 12 Apr 22
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_SupplierModelgrid> GetINSSuppliersingledata(string ecfid, string traveltype, int id)
        {
            List<EOW_SupplierModelgrid> objExpense = new List<EOW_SupplierModelgrid>();
            try
            {
                EOW_SupplierModelgrid objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = id.ToString();
                cmd.Parameters.Add("@invoice_type", SqlDbType.VarChar).Value = traveltype.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicedatas";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_SupplierModelgrid();
                    objModel.Invoicegid = Convert.ToInt32(dt.Rows[i]["invoice_gid"].ToString());
                    objModel.InvoiceDate = Convert.ToString(dt.Rows[i]["invoice_date"].ToString());
                    objModel.InvoiceNo = Convert.ToString(dt.Rows[i]["invoice_no"].ToString());
                    objModel.Description = Convert.ToString(dt.Rows[i]["invoice_desc"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["invoice_amount"].ToString());
                    objModel.TaxableAmount = Convert.ToString(dt.Rows[i]["invoice_wotax_amount"]);
                    objModel.Provision = Convert.ToString(dt.Rows[i]["invoice_provision_flag"].ToString());

                    objModel.SerMonth = Convert.ToString(dt.Rows[i]["invoice_service_month"].ToString());
                    objModel.Retensionflg = Convert.ToString(dt.Rows[i]["invoice_retention_flag"].ToString());
                    objModel.Retensionper = Convert.ToString(dt.Rows[i]["invoice_retention_rate"].ToString());
                    objModel.Retensionamount = Convert.ToString(dt.Rows[i]["invoice_retention_amount"].ToString());
                    objModel.Retensionrelse = Convert.ToString(dt.Rows[i]["invoice_retention_releaseon"].ToString());
                    objModel.GstCharged = dt.Rows[i]["invoice_gst_charged"].ToString();
                    objModel.ProviderLocation = dt.Rows[i]["invoice_provider_location"].ToString();
                    objModel.GstinVendor = dt.Rows[i]["invoice_gstin_vendor"].ToString();
                    objModel.ReceiverLocation = dt.Rows[i]["invoice_receiver_location"].ToString();
                    objModel.GstinFiccl = dt.Rows[i]["invoice_gstin_ficcl"].ToString();
                    objModel.InvoiceReceiptDate = Convert.ToString(dt.Rows[i]["invoice_receipt_date"].ToString());
                    objModel.ReasonForDelay = Convert.ToString(dt.Rows[i]["reason_for_delay"].ToString());
                    objModel.FunctionalHeadApproval = Convert.ToString(dt.Rows[i]["invoice_FH_gid"].ToString()); // ramya added on 12 Apr 22

                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Getcurrencydata(EOW_Currency data)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@currency_gid", SqlDbType.VarChar).Value = data.CurrencyName;
                cmd.Parameters.Add("@taxdate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(data.Currencyrate);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getratevalue";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["currencyrate_value"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertsupplierCreate(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid)
        {
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string Emp_Msg = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                string FcOUcode;
                DataTable DtOUcode = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@BranchCode", SqlDbType.VarChar).Value = oussp[0].ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getbussinesssegment";
                da = new SqlDataAdapter(cmd);
                da.Fill(DtOUcode);
                if (DtOUcode.Rows.Count > 0)
                {
                    FcOUcode = DtOUcode.Rows[0]["branch_businesssegement"].ToString();
                }
                else
                {
                    FcOUcode = EmployeeeExpense.FC;
                }
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getglno";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }
                else
                {
                    Emp_Msgretn = "Invalid GL Code";
                    return Emp_Msgretn;
                }

                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }


                if (EmployeeeExpense.SubCategoryName != "0")
                {
                    DataTable dtgsttax = new DataTable();
                    DataTable dtdebit = new DataTable();

                    cmd = new SqlCommand("pr_eow_supplierdebitline", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    //cmd.Parameters.AddWithValue("@debitline_ecf_gid",ecfgid);
                    cmd.Parameters.Add("@debitline_ecf_gid", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@debitline_invoice_gid", SqlDbType.Int).Value = invoicegid;
                    cmd.Parameters.Add("@debitline_expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@debitline_expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@debitline_expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@debitline_gl_no", SqlDbType.VarChar).Value = Emp_Msg;
                    cmd.Parameters.Add("@debitline_period_from", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(EmployeeeExpense.ClaimMonth));
                    cmd.Parameters.Add("@debitline_fc_code", SqlDbType.VarChar).Value = FcOUcode;
                    cmd.Parameters.Add("@debitline_cc_code", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@debitline_product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@debitline_ou_code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@debitline_desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@debitline_amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@debitline_Hsn_gid", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.TravelHsnid).ToString();
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    cmd.Parameters.Add("@empid", SqlDbType.Int).Value = Convert.ToInt32(empgid);
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "insert";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdebit);
                    if (dtdebit.Rows.Count > 0)
                    {
                        Emp_Msg = dtdebit.Rows[0]["Msg"].ToString();

                        string clear = dtdebit.Rows[0]["Clear"].ToString();
                        if (Emp_Msg.ToLower() == "success" && clear.ToUpper() == "TRUE")
                        {
                            Emp_Msgretn = "Success";
                            try
                            {
                                //Split Amount update - GST_Phase3_2 - Ramya
                                GetConnection();
                                DataTable dtSplit = new DataTable();
                                cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtSplit);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                        else
                        {
                            Emp_Msgretn = Emp_Msg;
                        }

                    }

                    // dtgsttax = GstTaxInsertnew(Convert.ToInt32(invoicegid), Convert.ToInt32(EmployeeeExpense.ExpenseCategoryName), Convert.ToInt32(EmployeeeExpense.SubCategoryName), Convert.ToInt32(empgid), EmployeeeExpense.TravelHsnid.ToString());

                    //            if (dtgsttax.Rows.Count > 0)
                    //            {
                    //                Emp_Msgretn = Convert.ToString(dtgsttax.Rows[0]["Message"]);
                    //                if (Emp_Msgretn.ToUpper() == "SUCCESS")
                    //                {

                    //                    string[,] codes = new string[,]
                    //           {
                    //{"ecfdebitline_ecf_gid",ecfgid },
                    //{"ecfdebitline_invoice_gid", invoicegid},
                    //{"ecfdebitline_expnature_gid",EmployeeeExpense.NatureofExpensesName },
                    //{"ecfdebitline_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
                    //{"ecfdebitline_expsubcat_gid",EmployeeeExpense.SubCategoryName },
                    //{"ecfdebitline_gl_no", Emp_Msg}, 
                    //{"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(EmployeeeExpense.ClaimMonth))},   
                    //{"ecfdebitline_fc_code",FcOUcode },
                    //{"ecfdebitline_cc_code", EmployeeeExpense.CC},
                    //{"ecfdebitline_product_code", Productsp[0].ToString()},
                    //{"ecfdebitline_ou_code",oussp[0].ToString() },
                    //{"ecfdebitline_desc",Emp_Msgdesc},        
                    //{"ecfdebitline_amount", EmployeeeExpense.Amount},
                    //{"ecfdebitline_Hsn_gid",Convert.ToInt32(EmployeeeExpense.TravelHsnid).ToString() }           
                    //          };
                    //                    string tname = "iem_trn_tecfdebitline";

                    //                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                    //                    Emp_Msg = insertcommend.ToString();
                    //                    if (Emp_Msg == "success")
                    //                    {
                    //                        Emp_Msgretn = "Success";
                    //                    }
                    //                    else
                    //                    {
                    //                        Emp_Msgretn = Emp_Msg;
                    //                    }
                    //                }

                    //     }
                }
                else
                {
                    Emp_Msgretn = "Sub category id not passed";
                }


                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public DataTable GstTaxInsert(int InvId, int Expcatgid, int Expsubcatgid, int Employeegid)
        {
            GetConnection();
            DataTable dt = new DataTable();
            cmd = new SqlCommand("pr_gsttax_insert", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = InvId;
            cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = Expcatgid;
            cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = Expsubcatgid;
            cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = Employeegid;
            da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {


            }
            return dt;
        }


        public DataTable GstTaxInsertnew(int InvId, int Expcatgid, int Expsubcatgid, int Employeegid, string hsngid)
        {
            GetConnection();
            DataTable dt = new DataTable();
            cmd = new SqlCommand("pr_gsttax_insert", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = InvId;
            cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = Expcatgid;
            cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = Expsubcatgid;
            cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = Employeegid;
            cmd.Parameters.Add("@Hsngid", SqlDbType.Int).Value = hsngid;
            da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            if (dt.Rows.Count > 0)
            {


            }
            return dt;
        }

       /* public IEnumerable<EOW_TravelClaim> GetSuppliserDedit(string ecfid, string invoiceid, string traveltype)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                LocalConveyanceNewController locals = new LocalConveyanceNewController();
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdebitdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.invoicepoitem_GID = Convert.ToString(dt.Rows[i]["ecfdebitline_invoicepoitem_gid"].ToString());
                    if (Convert.ToString(dt.Rows[i]["ecfdebitline_category_type"].ToString()) == "A")
                    {
                        objModel.NatureofExpensesName = "";
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["assetcategory_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["asset_description"].ToString());
                    }
                    else
                    {
                        objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    }


                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.Branch = Convert.ToString(dt.Rows[i]["ecfdebitline_ref_gid"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["HsnId"].ToString());
                    objModel.TravelHsnCode = dt.Rows[i]["HsnCode"].ToString();
                    objModel.TravelHsnDesc = dt.Rows[i]["HsnDesc"].ToString();
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }*/

        public IEnumerable<EOW_TravelClaim> GetSuppliserDedit(string ecfid, string invoiceid, string traveltype)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                LocalConveyanceNewController locals = new LocalConveyanceNewController();
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdebitdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.invoicepoitem_GID = Convert.ToString(dt.Rows[i]["ecfdebitline_invoicepoitem_gid"].ToString());
                    if (Convert.ToString(dt.Rows[i]["ecfdebitline_category_type"].ToString()) == "A")
                    {
                        objModel.NatureofExpensesName = "";
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["assetcategory_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["asset_description"].ToString());
                    }
                    else
                    {
                        objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    }


                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.Branch = Convert.ToString(dt.Rows[i]["ecfdebitline_ref_gid"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["HsnId"].ToString());
                    objModel.TravelHsnCode = dt.Rows[i]["HsnCode"].ToString();
                    objModel.TravelHsnDesc = dt.Rows[i]["HsnDesc"].ToString();
                    objExpense.Add(objModel);
                }
                //ramya modified on 02 Nov 21
                DataTable dt1 = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "DebitAmount";
                da1 = new SqlDataAdapter(cmd);
                da1.Fill(dt1);
                HttpContext.Current.Session["invoiceDebitamnt"] = 0;
                if (dt1.Rows.Count > 0)
                {
                    HttpContext.Current.Session["invoiceDebitamnt"] = Convert.ToDecimal(dt1.Rows[0]["Total"].ToString());
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string DeleteSupplideExpense(int EmployeeeExpenseGID, string ecfgid, string invoicegid)
        {
            string delant = "0";
            try
            {
                GetConnection();
                DataTable dtdebit = new DataTable();
                cmd = new SqlCommand("pr_eowfs_set_DeleteDebitline", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@debitline_gid", SqlDbType.VarChar).Value = EmployeeeExpenseGID.ToString();
                cmd.Parameters.Add("@module", SqlDbType.VarChar).Value = "eow";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdebit);

                try
                {
                    //Split Amount update - GST_Phase3_2 - Ramya
                    GetConnection();
                    DataTable dtSplit = new DataTable();
                    cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtSplit);
                }
                catch (Exception ex)
                {

                    //string insertcommend2 = objCommonIUD.UpdateCommon(codes2, whcos2, tname2);

                    //---------------Pandiaraj 19-07-19
                }
                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public IEnumerable<EOW_TravelClaim> GetSupplierDebitsingle(string ecfid, string invoiceid, string traveltype, int id)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getsupdebitline";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expnature_gid"].ToString());
                    objModel.ExpenseCategoryId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expcat_gid"].ToString());
                    objModel.SubCategoryId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expsubcat_gid"].ToString());

                    objModel.travelDescription = Convert.ToString(dt.Rows[i]["ecfdebitline_desc"].ToString());

                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecfdebitline_amount"].ToString());

                    objModel.AssetCatId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_assetcategory_gid"].ToString());
                    objModel.AssetSubCatId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_assetsubcategory_gid"].ToString());
                    objModel.ProdServCategory = Convert.ToString(dt.Rows[i]["productservcategory"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["HsnId"].ToString());
                    objModel.TravelHsnCode = dt.Rows[i]["HsnCode"].ToString();
                    objModel.TravelHsnDesc = dt.Rows[i]["HsnDesc"].ToString();
                    objModel.RCMFlag = dt.Rows[i]["ecfdebitline_rcmflag"].ToString();
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetSupplierINSDebitsingle(string ecfid, string invoiceid, string traveltype, int id)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getsupdebitline";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.NatureofExpensesId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expnature_gid"].ToString());
                    objModel.ExpenseCategoryId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expcat_gid"].ToString());
                    objModel.SubCategoryId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_expsubcat_gid"].ToString());

                    objModel.travelDescription = Convert.ToString(dt.Rows[i]["ecfdebitline_desc"].ToString());

                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecfdebitline_amount"].ToString());

                    objModel.AssetCatId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_assetcategory_gid"].ToString());
                    objModel.AssetSubCatId = Convert.ToInt32(dt.Rows[i]["ecfdebitline_assetsubcategory_gid"].ToString());
                    objModel.ProdServCategory = Convert.ToString(dt.Rows[i]["productservcategory"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["HsnId"].ToString());
                    objModel.TravelHsnCode = dt.Rows[i]["HsnCode"].ToString();
                    objModel.TravelHsnDesc = dt.Rows[i]["HsnDesc"].ToString();
                    objModel.RCMFlag = dt.Rows[i]["ecfdebitline_rcmflag"].ToString();
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string UpdateSupplierDebit(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string rowid)
        {
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string Emp_Msg = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                if (EmployeeeExpense.ProdServCategory == "A")
                {
                    Emp_Msg = selectcentralglcodeassetcat(EmployeeeExpense.AssetCatId.ToString());
                    if (Emp_Msg == "")
                    {
                        Emp_Msg = "0";
                    }
                }
                else
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getglno";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);

                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                    }
                    else
                    {
                        Emp_Msgretn = "Invalid GL Code";
                        return Emp_Msgretn;
                    }
                }


                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                //Ramya Commentted
                //if (EmployeeeExpense.SubCategoryName != "0")
                //{
                DataTable dtdebit = new DataTable();

                cmd = new SqlCommand("pr_eow_supplierdebitline", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@debitline_ecf_gid",ecfgid);
                cmd.Parameters.Add("@debitlinegid", SqlDbType.Int).Value = rowid;
                cmd.Parameters.Add("@debitline_ecf_gid", SqlDbType.Int).Value = ecfgid;
                cmd.Parameters.Add("@debitline_invoice_gid", SqlDbType.Int).Value = invoicegid;
                cmd.Parameters.Add("@debitline_expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                cmd.Parameters.Add("@debitline_expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@debitline_expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                cmd.Parameters.Add("@debitline_assetcat_gid", SqlDbType.Int).Value = EmployeeeExpense.AssetCatId;
                cmd.Parameters.Add("@debitline_assetsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.AssetSubCatId;
                cmd.Parameters.Add("@debitline_gl_no", SqlDbType.VarChar).Value = Emp_Msg;
                cmd.Parameters.Add("@debitline_period_from", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(EmployeeeExpense.ClaimMonth));
                cmd.Parameters.Add("@debitline_fc_code", SqlDbType.VarChar).Value = EmployeeeExpense.FC;
                cmd.Parameters.Add("@debitline_cc_code", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                cmd.Parameters.Add("@debitline_product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                cmd.Parameters.Add("@debitline_ou_code", SqlDbType.VarChar).Value = oussp[0].ToString();
                cmd.Parameters.Add("@debitline_desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                cmd.Parameters.Add("@debitline_amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                cmd.Parameters.Add("@debitline_Hsn_gid", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.TravelHsnid).ToString();
                cmd.Parameters.Add("@empid", SqlDbType.Int).Value = Convert.ToInt32(empgid);
                cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "update";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdebit);
                if (dtdebit.Rows.Count > 0)
                {
                    Emp_Msg = dtdebit.Rows[0]["Msg"].ToString();

                    string clear = dtdebit.Rows[0]["Clear"].ToString();
                    if (Emp_Msg.ToLower() == "success" && clear.ToUpper() == "TRUE")
                    {
                        Emp_Msgretn = "Success";
                        try
                        {
                            //Split Amount update - GST_Phase3_2 - Ramya
                            GetConnection();
                            DataTable dtSplit = new DataTable();
                            cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtSplit);
                        }
                        catch (Exception ex)
                        {

                        }

                    }
                    else
                    {
                        Emp_Msgretn = Emp_Msg;
                    }

                }

                //}
                //else
                //{
                //    Emp_Msgretn = "sub category not found";
                //}

                //        string[,] codes = new string[,]
                //           {      
                //{"ecfdebitline_expnature_gid",EmployeeeExpense.NatureofExpensesName },
                //{"ecfdebitline_expcat_gid", EmployeeeExpense.ExpenseCategoryName},
                //{"ecfdebitline_expsubcat_gid",EmployeeeExpense.SubCategoryName }, 
                //{"ecfdebitline_assetcategory_gid", EmployeeeExpense.AssetCatId.ToString()},
                //{"ecfdebitline_assetsubcategory_gid",EmployeeeExpense.AssetSubCatId.ToString() }, 
                //{"ecfdebitline_desc", Emp_Msgdesc},
                //{"ecfdebitline_gl_no", Emp_Msg},
                //{"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(EmployeeeExpense.ClaimMonth))}, 
                //{"ecfdebitline_fc_code",EmployeeeExpense.FC },
                //{"ecfdebitline_cc_code", EmployeeeExpense.CC},
                //{"ecfdebitline_product_code", Productsp[0].ToString()},
                //{"ecfdebitline_ou_code",oussp[0].ToString() },
                //{"ecfdebitline_amount", EmployeeeExpense.Amount},
                //{"ecfdebitline_Hsn_gid",Convert.ToInt32(EmployeeeExpense.TravelHsnid).ToString()}       
                //          };

                //        string[,] whcosup = new string[,]
                //           {
                //{"ecfdebitline_ecf_gid",ecfgid },
                //{"ecfdebitline_invoice_gid", invoicegid},
                // {"ecfdebitline_gid",rowid }
                //          };

                //        string tname = "iem_trn_tecfdebitline";

                //        string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                //        Emp_Msg = insertcommend.ToString();
                //if (Emp_Msg == "Success")
                //{
                //    if (EmployeeeExpense.SubCategoryName != "0")
                //    {

                //        DataTable dtgsttax = GstTaxInsert(Convert.ToInt32(invoicegid), Convert.ToInt32(EmployeeeExpense.ExpenseCategoryName), Convert.ToInt32(EmployeeeExpense.SubCategoryName), Convert.ToInt32(empgid));
                //        //Emp_Msgretn = "Success";
                //        if (dtgsttax.Rows.Count > 0)
                //        {
                //            Emp_Msgretn = Convert.ToString(dtgsttax.Rows[0]["Message"]);
                //            if (Emp_Msgretn.ToUpper() == "SUCCESS")
                //            {
                //                Emp_Msgretn = "Success";
                //            }

                //        }
                //    }
                //    else
                //    {
                //        Emp_Msgretn = "Success";
                //    }
                //}

                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertSupplierPayment(EOW_Payment EmployeeeExpense, string ecfgid, string invoicegid, string suppliergid, string rempayam)
        {
            string status = "";
            string bankgid = "0";
            string Exceptions = "0";
            string Emp_Msg = "";
            string invnetamtbal = "0";
            string crnamount = "";
            string crninvamount = "";
            string arf_gid = "";
            string Emp_MsgDescription = "";
            string Emp_MsgRefNoName = "";
            decimal tolinvecrtamt = 0;
            string Emp_Msgbeni = "";
            string Emp_IFSCCode = "";
            decimal recupdateamt = 0;
            try
            {
                if (EmployeeeExpense.Description == null)
                {
                    Emp_MsgDescription = "";
                }
                else
                {
                    Emp_MsgDescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Description);
                }
                if (EmployeeeExpense.RefNoName == null)
                {
                    Emp_MsgRefNoName = "";
                }
                else
                {
                    Emp_MsgRefNoName = EmployeeeExpense.RefNoName;
                }
                if (EmployeeeExpense.Beneficiary == null)
                {
                    Emp_Msgbeni = "";
                }
                else
                {
                    Emp_Msgbeni = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Beneficiary);
                }
                if (EmployeeeExpense.Ifsccode == null)
                {
                    Emp_IFSCCode = "";
                }
                else
                {
                    Emp_IFSCCode = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Ifsccode);
                }
                decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                //kavitha payment getting double
                // Ramya added on 18 Dec 21
                GetConnection();
                DataSet dscredit = new DataSet(); 
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = Emp_Msgbeni;
                cmd.Parameters.Add("@traveltypegid", SqlDbType.VarChar).Value = Emp_MsgRefNoName;
                cmd.Parameters.Add("@paymodetype", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetCreditlineAmount";
                da = new SqlDataAdapter(cmd);
                da.Fill(dscredit);
                decimal prvcreditamt = 0;
                decimal invamt = 0;
                if (dscredit.Tables[0].Rows.Count > 0)
                {
                    prvcreditamt = Convert.ToDecimal(dscredit.Tables[0].Rows[0]["ecfcreditline_amount"]);
                    prvcreditamt = prvcreditamt + mainamt;
                    if (dscredit.Tables[1].Rows.Count > 0)
                    {
                        invamt = Convert.ToDecimal(dscredit.Tables[1].Rows[0]["invoice_amount"]);
                    }
                    if (prvcreditamt > invamt)
                    {
                        return "Payment Amount should not be greater than Invoice Amount!";
                    }
                    
                }
                // ramya modified the verification here on 09 Dec 21
                string ecfDebitLineGid = string.Empty;
                if (EmployeeeExpense.PaymentModeName == "CHQ" || EmployeeeExpense.PaymentModeName == "EFT")
                {
                    GetConnection();
                    DataTable dtChqEctCheck = new DataTable();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = Emp_Msgbeni;
                    cmd.Parameters.Add("@paymodetype", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                    cmd.Parameters.Add("@accno", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetChqEftDetail";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtChqEctCheck);
                    if (dtChqEctCheck.Rows.Count > 0)
                    {
                        ecfDebitLineGid = Convert.ToString(dtChqEctCheck.Rows[0]["ecfcreditline_gid"].ToString());
                        return "Duplicate";
                    }
                }
                else
                {
                    GetConnection();
                    DataTable dtRefnoCheck = new DataTable();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = Emp_Msgbeni;
                    cmd.Parameters.Add("@traveltypegid", SqlDbType.VarChar).Value = Emp_MsgRefNoName;
                    cmd.Parameters.Add("@paymodetype", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetOtherDetail";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtRefnoCheck);
                    if (dtRefnoCheck.Rows.Count > 0)
                    {
                        ecfDebitLineGid = Convert.ToString(dtRefnoCheck.Rows[0]["ecfcreditline_gid"].ToString());
                        return "DuplicateRef";
                    }
                }
                if (EmployeeeExpense.PaymentModeName == "PPX")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["ecfarf_dr_gl_no"].ToString());
                        arf_gid = Convert.ToString(dt.Rows[0]["ecfarf_gid"].ToString());
                        Exceptions = Convert.ToString(dt.Rows[0]["ecfarf_exception"].ToString());
                    }
                    
                    decimal exption = Convert.ToDecimal(Exceptions);

                    decimal final = 0;
                    final = exption - mainamt;
                    if (final < 0) // ramya added on 14 Dec 21
                    {
                        crnamount = "Entered Amount should not be greater than Invoice Amount!";
                        return crnamount;
                    }
                    string[,] codesupA = new string[,]
	               {
                       {"ecfarf_exception",final.ToString() }
                  };
                    string[,] whcosA = new string[,]
	               {
	                  {"ecfarf_gid", arf_gid},
                  };
                    string tnameupA = "iem_trn_tecfarf";

                    string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);

                    string[,] codesarft = new string[,]
	               {
                        {"arftran_invoice_gid",invoicegid},
                        {"arftran_ecf_gid",ecfgid },
	                    {"arftran_date", "sysdatetime()"},
                        {"arftran_gl_no",Emp_Msg },
	                    {"arftran_desc", Emp_MsgDescription},
                        {"arftran_amount",EmployeeeExpense.PaymentAmount },
                        {"arftran_mult", "-1"},
	                    {"arftran_ref_flag", "1"},
                        {"arftran_ref_gid",arf_gid}            
                  };
                    string tnamearft = "iem_trn_tarftran";

                    string insertcommendarft = objCommonIUD.InsertCommon(codesarft, tnamearft);
                }
                else if (EmployeeeExpense.PaymentModeName == "REC")
                {
                    DataSet ds = new DataSet();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@invoice_type", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SUMOFOTHERPAYMENTREC";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(ds);
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        crnamount = Convert.ToString(ds.Tables[0].Rows[0]["ecfcreditline_amount"].ToString());
                        crninvamount = Convert.ToString(ds.Tables[1].Rows[0]["invoice_amount"].ToString());
                        if (crnamount == "")
                        {
                            crnamount = "0";
                        }
                        tolinvecrtamt = Convert.ToDecimal(crninvamount) - Convert.ToDecimal(crnamount);

                        if (tolinvecrtamt != 0)
                        {
                            if (Convert.ToDecimal(EmployeeeExpense.PaymentAmount) > tolinvecrtamt)
                            {
                                crnamount = " Please enter Amount less than or equal to " + tolinvecrtamt;
                                return crnamount;
                            }
                            else
                            {
                                invnetamtbal = crnamount;
                            }
                        }
                        else
                        {
                            crnamount = "Total Invoice Amount already used in another Invoice";
                            return crnamount;
                        }
                    }

                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetRecoveryException";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        arf_gid = Convert.ToString(dt.Rows[0]["recovery_gid"].ToString());
                        Exceptions = Convert.ToString(dt.Rows[0]["recovery_exception"].ToString());
                        Emp_Msg = dt.Rows[0]["Recovery_dr_gl_no"].ToString();
                    }
                    //decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                    decimal exption = Convert.ToDecimal(Exceptions);

                    decimal final = 0;
                    final = exption - mainamt;
                    if (final < 0)
                    {
                        crnamount = " Payment Amount should not exceed Recovery Exception Amount!";
                        return crnamount;
                    }
                    string[,] codesupA = new string[,]
	               {
                       {"recovery_exception",final.ToString() }
                  };
                    string[,] whcosA = new string[,]
	               {
	                  {"recovery_gid", arf_gid},
                  };
                    string tnameupA = "iem_trn_trecovery";

                    string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);

                }
                else if (EmployeeeExpense.PaymentModeName == "CRN")
                {
                    DataSet dt = new DataSet();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@invoice_type", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid; 
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SUMOFOTHERPAYMENTCRN";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Tables[1].Rows.Count > 0)
                    {
                        crnamount = Convert.ToString(dt.Tables[0].Rows[0]["ecfcreditline_amount"].ToString());
                        crninvamount = Convert.ToString(dt.Tables[1].Rows[0]["invoice_amount"].ToString());
                        if (crnamount == "")
                        {
                            crnamount = "0";
                        }
                        tolinvecrtamt = Convert.ToDecimal(crninvamount) - Convert.ToDecimal(crnamount);

                        if (tolinvecrtamt != 0)
                        {
                            if (Convert.ToDecimal(EmployeeeExpense.PaymentAmount) > tolinvecrtamt)
                            {
                                crnamount = " Please Enter Amount Less Than or Equal to " + tolinvecrtamt;
                                return crnamount;
                            }
                            else
                            {
                                invnetamtbal = crnamount;
                            }
                        }
                        else
                        {
                            crnamount = "Total Invoice Amount Already used in other Invoice";
                            return crnamount;
                        }
                    }
                }
                else if (EmployeeeExpense.PaymentModeName == "SUS")
                {
                    string glnosplit = Emp_MsgRefNoName.ToString();
                    string[] glnosp = glnosplit.Split('-');
                    status = GetStatusexcel(glnosp[0].ToString(), "", "", "GLCode");
                    if (status == "notexists")
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                    else
                    {
                        Emp_MsgRefNoName = glnosp[0].ToString();
                        Emp_Msg = glnosp[0].ToString();
                    }
                    DataSet dt = new DataSet();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SUMOFOTHERPAYMENTSUS";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Tables[1].Rows.Count > 0)
                    {
                        crnamount = Convert.ToString(dt.Tables[0].Rows[0]["ecfcreditline_amount"].ToString());
                        crninvamount = Convert.ToString(dt.Tables[1].Rows[0]["invoice_amount"].ToString());
                        if (crnamount == "")
                        {
                            crnamount = "0";
                        }
                        tolinvecrtamt = Convert.ToDecimal(crninvamount) - Convert.ToDecimal(crnamount);

                        if (tolinvecrtamt != 0)
                        {
                            if (Convert.ToDecimal(EmployeeeExpense.PaymentAmount) > tolinvecrtamt)
                            {
                                crnamount = " Please Enter Amount Less Than or Equal to " + tolinvecrtamt;
                                return crnamount;
                            }
                            else
                            {
                                invnetamtbal = crnamount;
                            }
                        }
                        else
                        {
                            crnamount = "Total Invoice Amount Already used in other Invoice";
                            return crnamount;
                        }
                    }
                }
                else if (EmployeeeExpense.PaymentModeName == "EFT")
                {

                }
                else
                {
                    Emp_Msg = "";
                }

                GetConnection();
                DataTable dtpaybank = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = suppliergid.ToString();
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtpaybank);
                if (dtpaybank.Rows.Count > 0)
                {
                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                    {
                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                    }
                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                    {
                        if (EmployeeeExpense.PaymentModeName != "PPX" && EmployeeeExpense.PaymentModeName != "SUS" && EmployeeeExpense.PaymentModeName != "REC")
                        {
                            Emp_Msg = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                        }
                    }
                }
                string insertcommend = string.Empty;
                string ifscCode = string.Empty;
                //string ecfDebitLineGid = string.Empty;
                string ecfDefaultFlag = "Y";
                //kavitha payment getting double
                if (EmployeeeExpense.PaymentModeName == "CHQ" || EmployeeeExpense.PaymentModeName == "EFT")
                {
                    GetConnection();
                    DataTable dtChqEctCheck = new DataTable();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = Emp_Msgbeni;
                    cmd.Parameters.Add("@paymodetype", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                    cmd.Parameters.Add("@accno", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetChqEftDetail";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtChqEctCheck);
                    if (dtChqEctCheck.Rows.Count > 0)
                    {
                        ecfDebitLineGid = Convert.ToString(dtChqEctCheck.Rows[0]["ecfcreditline_gid"].ToString());
                        return "Duplicate";
                    }
                }
                else
                {
                    GetConnection();
                    DataTable dtRefnoCheck = new DataTable();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = Emp_Msgbeni;
                    cmd.Parameters.Add("@traveltypegid", SqlDbType.VarChar).Value = Emp_MsgRefNoName;
                    cmd.Parameters.Add("@paymodetype", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetOtherDetail";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtRefnoCheck);
                    if (dtRefnoCheck.Rows.Count > 0)
                    {
                        ecfDebitLineGid = Convert.ToString(dtRefnoCheck.Rows[0]["ecfcreditline_gid"].ToString());
                        return "DuplicateRef";
                    }
                }
                decimal tolamt = Convert.ToDecimal(HttpContext.Current.Session["Ecfamountpaymentfirst"]);
                decimal PaymentAmount = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);

                if (tolamt == 0)
                {
                    return "InvalidEntry";
                }

                GetConnection();
                DataTable dtDefaultFlag = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@paymodetype", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetChqEftDetailFlag";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtDefaultFlag);
                if (dtDefaultFlag.Rows.Count > 0)
                {
                    ecfDefaultFlag = Convert.ToString(dtDefaultFlag.Rows[0]["ecfcreditline_defaultacc"].ToString());
                }

                if ((EmployeeeExpense.PaymentModeName == "CHQ" || EmployeeeExpense.PaymentModeName == "EFT") && ecfDefaultFlag == "N")
                {
                    DataTable dtdatdsifsc = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdatdsifsc);
                    if (dtdatdsifsc.Rows.Count > 0)
                    {
                        ifscCode = Convert.ToString(dtdatdsifsc.Rows[0]["payment_ifsccode"].ToString());
                    }
                    else
                    {
                        DataTable dtdatdother = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdatdother);
                        if (dtdatdother.Rows.Count > 0)
                        {
                            ifscCode = Convert.ToString(dtdatdother.Rows[0]["payment_ifsccode"].ToString());
                        }
                    }

                    string[,] codesupeft = new string[,]
	                        {
                               {"ecfcreditline_ifsc_code",Emp_IFSCCode},
                               {"ecfcreditline_ref_no", Emp_MsgRefNoName},
                               {"ecfcreditline_desc",Emp_MsgDescription},
                               {"ecfcreditline_beneficiary",Emp_Msgbeni}
                            };
                    string[,] whcoseft = new string[,]
	                        {
                               {"ecfcreditline_ecf_gid",ecfgid },
	                           {"ecfcreditline_invoice_gid", invoicegid},
                               {"ecfcreditline_pay_mode",EmployeeeExpense.PaymentModeName.ToString() }
                            };
                    string tnameupeft = "iem_trn_tecfcreditline";

                    insertcommend = objCommonIUD.UpdateCommon(codesupeft, whcoseft, tnameupeft);
                    return "ok";
                }
                else
                {
                    string[,] codes = new string[,]
	               {
        {"ecfcreditline_ecf_gid",ecfgid },
	    {"ecfcreditline_invoice_gid", invoicegid},
        {"ecfcreditline_pay_mode",EmployeeeExpense.PaymentModeName },
	    {"ecfcreditline_ref_no", Emp_MsgRefNoName},
        {"ecfcreditline_beneficiary",Emp_Msgbeni},
	    {"ecfcreditline_gl_no", Emp_Msg},
        {"ecfcreditline_bank_gid",bankgid},
        {"ecfcreditline_desc",Emp_MsgDescription},
        {"ecfcreditline_defaultacc","Y"},
	    {"ecfcreditline_amount", EmployeeeExpense.PaymentAmount}   
                  };
                    string tname = "iem_trn_tecfcreditline";

                    insertcommend = objCommonIUD.InsertCommon(codes, tname);
                }

                if (insertcommend == "success" || insertcommend == "Success")
                {
                    DataTable dtdatds = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdatds);
                    if (dtdatds.Rows.Count > 0)
                    {
                        string paymode = Convert.ToString(dtdatds.Rows[0]["paymode_code"].ToString());

                        GetConnection();
                        DataTable dtupdate = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                        cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = paymode;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtupdate);
                        if (dtupdate.Rows.Count > 0)
                        {
                            decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString());
                            decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());
                            decimal tol = atmts - mainamt2;

                            if(tol<0)
                            {
                                return "Payment Amount should not be less than zero!";
                            }
                            string[,] codesup = new string[,]
	                        {
                               {"ecfcreditline_amount",tol.ToString() }
                            };
                            string[,] whcos = new string[,]
	                        {
                               {"ecfcreditline_ecf_gid",ecfgid },
	                           {"ecfcreditline_invoice_gid", invoicegid},
                               {"ecfcreditline_defaultacc","N"},
                               {"ecfcreditline_isremoved","N"},
                               {"ecfcreditline_pay_mode",paymode.ToString() }
                            };
                            string tnameup = "iem_trn_tecfcreditline";

                            string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);


                            string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                            string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                            string tnamenews = "iem_trn_tinvoice";

                            string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                        }
                    }
                    else
                    {
                        DataTable dtdatd = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdatd);
                        if (dtdatd.Rows.Count > 0)
                        {
                            string paymode = Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString());

                            GetConnection();
                            DataTable dtupdate = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                            cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = paymode;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtupdate);
                            if (dtupdate.Rows.Count > 0)
                            {
                                decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString());
                                decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());
                                decimal tol = atmts - mainamt2;
                                if(tol<0)
                                {
                                    return "Payment Amount should not be less than zero!";
                                }
                                string[,] codesup = new string[,]
	                        {
                               {"ecfcreditline_amount",tol.ToString() }
                            };
                                string[,] whcos = new string[,]
	                        {
                               {"ecfcreditline_ecf_gid",ecfgid },
	                           {"ecfcreditline_invoice_gid", invoicegid},
                               {"ecfcreditline_defaultacc","N"},
                               {"ecfcreditline_isremoved","N"},
                               {"ecfcreditline_pay_mode",paymode.ToString() }
                            };
                                string tnameup = "iem_trn_tecfcreditline";

                                string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);


                                string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                                string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                                string tnamenews = "iem_trn_tinvoice";

                                string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                            }
                        }
                        else
                        {
                            string paymode = "CHQ";
                            GetConnection();
                            DataTable dtupdate = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                            cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = paymode;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtupdate);
                            if (dtupdate.Rows.Count > 0)
                            {
                                decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString());
                                decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());
                                decimal tol = atmts - mainamt2;
                                if (tol < 0)
                                {
                                    return "Payment Amount should not be less than zero!";
                                }
                                string[,] codesup = new string[,]
	                        {
                               {"ecfcreditline_amount",tol.ToString() }
                            };
                                string[,] whcos = new string[,]
	                        {
                               {"ecfcreditline_ecf_gid",ecfgid },
	                           {"ecfcreditline_invoice_gid", invoicegid},
                               {"ecfcreditline_defaultacc","N"},
                               {"ecfcreditline_isremoved","N"},
                               {"ecfcreditline_pay_mode",paymode.ToString() }
                            };
                                string tnameup = "iem_trn_tecfcreditline";

                                string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);


                                string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                                string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                                string tnamenews = "iem_trn_tinvoice";

                                string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                            }

                        }
                    }
                    try
                    {
                        //Split Amount update - GST_Phase3_2 - Ramya
                        GetConnection();
                        DataTable dtSplit = new DataTable();
                        cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtSplit);
                    }
                    catch (Exception ex)
                    {

                    }
                }
                return Emp_Msg = "ok";
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return Emp_Msg = "ok";
        }
        public string DeleteSupplierPayment(int EmployeeePaymentGID, string ecfgid, string invoicegid, string rempayam, string suppliergid)
        {
            string delant = "0";
            string Emp_Msgexp = "0";
            string arf_gid = "0";
            try
            {
                string[,] codes = new string[,]
	               {
        {"ecfcreditline_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"ecfcreditline_gid",EmployeeePaymentGID.ToString() },
        {"ecfcreditline_ecf_gid",ecfgid },
        {"ecfcreditline_invoice_gid",invoicegid }
                  };
                string tname = "iem_trn_tecfcreditline";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);


                decimal mainamt1 = Convert.ToDecimal(rempayam.ToString());

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = EmployeeePaymentGID;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidY";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    string atmt = Convert.ToString(dt.Rows[0]["ecfcreditline_amount"].ToString());
                    string paymode = Convert.ToString(dt.Rows[0]["ecfcreditline_pay_mode"].ToString());
                    decimal mainamt2 = Convert.ToDecimal(atmt.ToString()) + Convert.ToDecimal(dt.Rows[0]["Split_PaymentAmt"].ToString()); //ramya added

                    if (paymode == "PPX")
                    {
                        string Refno = Convert.ToString(dt.Rows[0]["ecfcreditline_ref_no"].ToString());

                        GetConnection();
                        DataTable dtexp = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Refno;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtexp);
                        if (dtexp.Rows.Count > 0)
                        {
                            Emp_Msgexp = Convert.ToString(dtexp.Rows[0]["ecfarf_exception"].ToString());
                            arf_gid = Convert.ToString(dtexp.Rows[0]["ecfarf_gid"].ToString());

                            decimal exption = Convert.ToDecimal(Emp_Msgexp);
                            decimal arfexpamt = mainamt2 + exption;

                            string[,] codesupA = new string[,]
	                     {
                              {"ecfarf_exception",arfexpamt.ToString() }
                         };
                            string[,] whcosA = new string[,]
	                    {
	                          {"ecfarf_gid", arf_gid},
                         };
                            string tnameupA = "iem_trn_tecfarf";

                            string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);

                            string[,] codesupAtr = new string[,]
	                         {                     
	                           {"arftran_isremoved", "Y"},                         
                             };
                            string[,] whcosAtr = new string[,]
	                            {
                                  {"arftran_ecf_gid",ecfgid },
	                              {"arftran_ref_gid",arf_gid},
                                  {"arftran_invoice_gid",invoicegid} 
                                };
                            string tnameupAtr = "iem_trn_tarftran";

                            string insertcommendupwtr = objCommonIUD.UpdateCommon(codesupAtr, whcosAtr, tnameupAtr);
                        }
                    }
                    else if (paymode == "REC")
                    {
                        string Refno = Convert.ToString(dt.Rows[0]["ecfcreditline_ref_no"].ToString());

                        GetConnection();
                        DataTable dtexp = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Refno;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetRecoveryException";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtexp);
                        if (dtexp.Rows.Count > 0)
                        {
                            Emp_Msgexp = Convert.ToString(dtexp.Rows[0]["recovery_exception"].ToString());
                            arf_gid = Convert.ToString(dtexp.Rows[0]["recovery_gid"].ToString());

                            decimal exption = Convert.ToDecimal(Emp_Msgexp);
                            decimal arfexpamt = mainamt2 + exption;

                            string[,] codesupA = new string[,]
	                     {
                              {"recovery_exception",arfexpamt.ToString() }
                         };
                            string[,] whcosA = new string[,]
	                    {
	                          {"recovery_gid", arf_gid},
                         };
                            string tnameupA = "iem_trn_trecovery";

                            string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);
                        }
                    }
                    DataTable dtdatds = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdatds);
                    if (dtdatds.Rows.Count > 0)
                    {
                        string paymodes = Convert.ToString(dtdatds.Rows[0]["paymode_code"].ToString());

                        GetConnection();
                        DataTable dtupdate = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                        cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = paymodes;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtupdate);
                        if (dtupdate.Rows.Count > 0)
                        {
                            decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString());
                            decimal tol = atmts + mainamt2;
                            if (tol < 0)
                            {
                                return "Payment Amount should not be less than zero!";
                            }
                            string[,] codesupc = new string[,]
	                {
                       {"ecfcreditline_amount",tol.ToString() }
                    };
                            string[,] whcosc = new string[,]
	                {
                       {"ecfcreditline_ecf_gid",ecfgid },
	                   {"ecfcreditline_invoice_gid", invoicegid},
                       {"ecfcreditline_defaultacc", "N"},
                       {"ecfcreditline_pay_mode",paymodes.ToString() }
                    };
                            string tnameupc = "iem_trn_tecfcreditline";

                            string insertcommendup = objCommonIUD.UpdateCommon(codesupc, whcosc, tnameupc);

                            string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                            string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                            string tnamenews = "iem_trn_tinvoice";

                            string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                        }
                    }
                    else
                    {
                        DataTable dtdatd = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdatd);
                        if (dtdatd.Rows.Count > 0)
                        {
                            string paymodes = Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString());

                            GetConnection();
                            DataTable dtupdate = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                            cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = paymodes;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtupdate);
                            if (dtupdate.Rows.Count > 0)
                            {
                                decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString()) + Convert.ToDecimal(dtupdate.Rows[0]["Split_PaymentAmt"].ToString());
                                decimal tol = atmts + mainamt2;
                                if (tol < 0)
                                {
                                    return "Payment Amount should not be less than zero!";
                                }
                                string[,] codesupc = new string[,]
	                {
                       {"ecfcreditline_amount",tol.ToString() }
                    };
                                string[,] whcosc = new string[,]
	                {
                       {"ecfcreditline_ecf_gid",ecfgid },
	                   {"ecfcreditline_invoice_gid", invoicegid},
                       {"ecfcreditline_defaultacc", "N"},
                       {"ecfcreditline_pay_mode",paymodes.ToString() }
                    };
                                string tnameupc = "iem_trn_tecfcreditline";

                                string insertcommendup = objCommonIUD.UpdateCommon(codesupc, whcosc, tnameupc);

                                string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                                string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                                string tnamenews = "iem_trn_tinvoice";

                                string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                            }
                        }
                        else
                        {
                            string paymodes = "CHQ";
                            GetConnection();
                            DataTable dtupdate = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                            cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = paymodes;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtupdate);
                            if (dtupdate.Rows.Count > 0)
                            {
                                decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString()) + Convert.ToDecimal(dtupdate.Rows[0]["Split_PaymentAmt"].ToString()); //ramya added on 18 Dec 21
                                decimal tol = atmts + mainamt2;
                                if (tol < 0)
                                {
                                    return "Payment Amount should not be less than zero!";
                                }
                                string[,] codesupc = new string[,]
	                {
                       {"ecfcreditline_amount",tol.ToString() }
                    };
                                string[,] whcosc = new string[,]
	                {
                       {"ecfcreditline_ecf_gid",ecfgid },
	                   {"ecfcreditline_invoice_gid", invoicegid},
                       {"ecfcreditline_defaultacc", "N"},
                       {"ecfcreditline_pay_mode",paymodes.ToString() }
                    };
                                string tnameupc = "iem_trn_tecfcreditline";

                                string insertcommendup = objCommonIUD.UpdateCommon(codesupc, whcosc, tnameupc);

                                string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                                string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                                string tnamenews = "iem_trn_tinvoice";

                                string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                            }
                        }
                    }
                    try
                    {
                        //Split Amount update - GST_Phase3_2 - Ramya
                        GetConnection();
                        DataTable dtSplit = new DataTable();
                        cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtSplit);
                    }
                    catch (Exception ex)
                    {

                    }
                }
                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string UpdateSupplierPayment(EOW_Payment EmployeeeExpense, string ecfgid, string invoicegid, string payactiverowid, string eraamt, string beforeamt, string supgid)
        {
            string bankgid = "";
            string status = "";
            string invnetamtbal = "0";
            string crnamount = "";
            string crninvamount = "";
            decimal tolinvecrtamt = 0;
            string Emp_Msg = "";
            string Emp_paymode = "";
            string Emp_MsgDescription = "";
            string Emp_MsgRefNoName = "";
            string arf_gid = "";
            string Ifsc_code = "";
            try
            {
                if (EmployeeeExpense.Description == null)
                {
                    Emp_MsgDescription = "";
                }
                else
                {
                    Emp_MsgDescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Description);
                }
                if (EmployeeeExpense.RefNoName == null)
                {
                    Emp_MsgRefNoName = "";
                }
                else
                {
                    Emp_MsgRefNoName = EmployeeeExpense.RefNoName;
                }
                if (EmployeeeExpense.Ifsccode == null)
                {
                    Ifsc_code = "";
                }
                else
                {
                    Ifsc_code = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Ifsccode);
                }
                if (EmployeeeExpense.Ifsccode == null)
                {
                    Ifsc_code = "";
                }
                else
                {
                    Ifsc_code = EmployeeeExpense.Ifsccode;
                }
                if (EmployeeeExpense.PaymentModeName == "PPX")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["ecfarf_dr_gl_no"].ToString());
                        arf_gid = Convert.ToString(dt.Rows[0]["ecfarf_gid"].ToString());
                    }
                    /*decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                    decimal exption = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowExceptions"]);
                    decimal beforeamta = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowbefore"]);
                    decimal final = 0;
                    if (beforeamta >= mainamt)
                    {
                        final = beforeamta - mainamt;
                        final = final + exption;
                    }
                    if (beforeamta < mainamt)
                    {
                        final = mainamt - beforeamta;
                        final = exption - final;
                    }


                    string[,] codesupA = new string[,]
	               {
                       {"ecfarf_exception",final.ToString() }
                  };
                    string[,] whcosA = new string[,]
	               {
	                  {"ecfarf_gid", arf_gid},
                  };
                    string tnameupA = "iem_trn_tecfarf";

                    string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);
                    */
                    string[,] codesupAtr = new string[,]
	               {                     
	                    {"arftran_date", "sysdatetime()"},
                        {"arftran_gl_no",Emp_Msg },
	                    {"arftran_desc", Emp_MsgDescription},
                        {"arftran_amount",EmployeeeExpense.PaymentAmount },
                        {"arftran_mult", "-1"},
	                    {"arftran_ref_flag", "1"},                           
                  };
                    string[,] whcosAtr = new string[,]
	               {
                      {"arftran_ecf_gid",ecfgid },
	                  {"arftran_ref_gid",arf_gid},
                      {"arftran_invoice_gid",invoicegid},
                      {"arftran_isremoved", "N"},
                  };
                    string tnameupAtr = "iem_trn_tarftran";

                    string insertcommendupwtr = objCommonIUD.UpdateCommon(codesupAtr, whcosAtr, tnameupAtr);

                }
                else if (EmployeeeExpense.PaymentModeName == "REC")
                {
                    DataSet ds = new DataSet();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SUMOFOTHERPAYMENTREC";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(ds);
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        crnamount = Convert.ToString(ds.Tables[0].Rows[0]["ecfcreditline_amount"].ToString());
                        crninvamount = Convert.ToString(ds.Tables[1].Rows[0]["invoice_amount"].ToString());
                        if (crnamount == "")
                        {
                            crnamount = "0";
                        }
                        tolinvecrtamt = Convert.ToDecimal(crninvamount) - Convert.ToDecimal(crnamount);

                        if (tolinvecrtamt != 0)
                        {
                            if (Convert.ToDecimal(EmployeeeExpense.PaymentAmount) > tolinvecrtamt)
                            {
                                crnamount = " Please enter Amount less than or equal to " + tolinvecrtamt;
                                return crnamount;
                            }
                            else
                            {
                                invnetamtbal = crnamount;
                            }
                        }
                        else
                        {
                            crnamount = "Total Invoice Amount already used in another Invoice";
                            return crnamount;
                        }
                    }

                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetRecoveryException";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        arf_gid = Convert.ToString(dt.Rows[0]["recovery_gid"].ToString());
                        Emp_Msg = dt.Rows[0]["Recovery_dr_gl_no"].ToString();
                    }
                    decimal mainamt = Convert.ToDecimal(EmployeeeExpense.PaymentAmount);
                    decimal exption = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowExceptions"]);
                    decimal beforeamta = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowbefore"]);
                    
                    decimal final = 0;
                    if (beforeamta >= mainamt)
                    {
                        final = beforeamta - mainamt;

                        final = final + exption;
                    }
                    if (beforeamta < mainamt)
                    {
                        final = mainamt - beforeamta;
                        final = exption - final;
                    }
                    if(final<0)
                    {
                        crnamount = " Payment Amount should not exceed Recovery Exception Amount!";
                        return crnamount;
                    }
                    string[,] codesupA = new string[,]
	               {
                       {"recovery_exception",final.ToString() }
                  };
                    string[,] whcosA = new string[,]
	               {
	                  {"recovery_gid", arf_gid},
                  };
                    string tnameupA = "iem_trn_trecovery";

                    string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);
                }
                else if (EmployeeeExpense.PaymentModeName == "CRN")
                {
                    DataSet dt = new DataSet();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                    cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = payactiverowid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SUMOFOTHERPAYMENTCRN";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Tables[1].Rows.Count > 0)
                    {
                        crnamount = Convert.ToString(dt.Tables[0].Rows[0]["ecfcreditline_amount"].ToString());
                        crninvamount = Convert.ToString(dt.Tables[1].Rows[0]["invoice_amount"].ToString());
                        if (crnamount == "")
                        {
                            crnamount = "0";
                        }
                        tolinvecrtamt = Convert.ToDecimal(crninvamount) - Convert.ToDecimal(crnamount);

                        if (tolinvecrtamt != 0)
                        {
                            if (Convert.ToDecimal(EmployeeeExpense.PaymentAmount) > tolinvecrtamt)
                            {
                                crnamount = " Please Enter Amount Less Than or Equal to " + tolinvecrtamt;
                                return crnamount;
                            }
                            else
                            {
                                invnetamtbal = crnamount;
                            }
                        }
                        else
                        {
                            crnamount = "Total Invoice Amount Already used Other Invoice";
                            return crnamount;
                        }
                    }
                }
                else if (EmployeeeExpense.PaymentModeName == "SUS")
                {
                    string glnosplit = Emp_MsgRefNoName.ToString();
                    string[] glnosp = glnosplit.Split('-');
                    status = GetStatusexcel(glnosp[0].ToString(), "", "", "GLCode");
                    if (status == "notexists")
                    {
                        Emp_Msg = "Invalid GL Code";
                        return Emp_Msg;
                    }
                    else
                    {
                        Emp_MsgRefNoName = glnosp[0].ToString();
                        Emp_Msg = glnosp[0].ToString();
                    }
                    DataSet dt = new DataSet();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = payactiverowid; // ramya added on 14 Dec 21
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SUMOFOTHERPAYMENTSUS";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Tables[1].Rows.Count > 0)
                    {
                        crnamount = Convert.ToString(dt.Tables[0].Rows[0]["ecfcreditline_amount"].ToString());
                        crninvamount = Convert.ToString(dt.Tables[1].Rows[0]["invoice_amount"].ToString());
                        if (crnamount == "")
                        {
                            crnamount = "0";
                        }
                        tolinvecrtamt = Convert.ToDecimal(crninvamount) - Convert.ToDecimal(crnamount);

                        if (tolinvecrtamt != 0)
                        {
                            if (Convert.ToDecimal(EmployeeeExpense.PaymentAmount) > tolinvecrtamt)
                            {
                                crnamount = " Please Enter Amount Less Than or Equal to " + tolinvecrtamt;
                                return crnamount;
                            }
                            else
                            {
                                invnetamtbal = crnamount;
                            }
                        }
                        else
                        {
                            crnamount = "Total Invoice Amount Already used in other Invoice";
                            return crnamount;
                        }
                    }
                }
                else if (EmployeeeExpense.PaymentModeName == "EFT")
                {

                }
                else
                {
                    Emp_Msg = "";
                }

                GetConnection();
                DataTable dtpaybank = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtpaybank);
                if (dtpaybank.Rows.Count > 0)
                {
                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                    {
                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                    }
                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                    {
                        if (EmployeeeExpense.PaymentModeName != "PPX" && EmployeeeExpense.PaymentModeName != "SUS" && EmployeeeExpense.PaymentModeName != "REC")
                        {
                            Emp_Msg = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                        }
                    }
                }

                //if (insertcommend == "Success")
                //{
                DataTable dtdatds = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdatds);
                if (dtdatds.Rows.Count > 0)
                {
                    Emp_paymode = Convert.ToString(dtdatds.Rows[0]["paymode_code"].ToString());
                    decimal tol = 0;
                    GetConnection();
                    DataTable dtupdate = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                    cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = Emp_paymode;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtupdate);
                    if (dtupdate.Rows.Count > 0)
                    {
                        decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString());
                        decimal mainbeforeamt = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowbefore"]);
                        decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());

                        if (mainbeforeamt >= mainamt2)
                        {
                            tol = mainbeforeamt - mainamt2;
                            tol = atmts + tol;
                        }
                        else
                        {
                            tol = mainamt2 - mainbeforeamt;
                            tol = atmts - tol;
                        }
                        if (tol < 0) // ramya added on 14 Dec 21
                        {
                            crnamount = "Entered Amount should not be greater than Invoice Amount!";
                            return crnamount;
                        }
                        string[,] codesup = new string[,]
	                       {
                {"ecfcreditline_amount",tol.ToString() }
                          };
                            string[,] whcos = new string[,]
	                       {
                {"ecfcreditline_ecf_gid",ecfgid },
                {"ecfcreditline_invoice_gid", invoicegid},
	            {"ecfcreditline_defaultacc", "N"},
                {"ecfcreditline_pay_mode",Emp_paymode }
                          };
                            string tnameup = "iem_trn_tecfcreditline";

                            string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);

                            string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                            string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                            string tnamenews = "iem_trn_tinvoice";

                            string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                        }
                    }
                    else
                    {
                        DataTable dtdatd = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supgid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdatd);
                        if (dtdatd.Rows.Count > 0)
                        {
                            Emp_paymode = Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString());
                            decimal tol = 0;
                            GetConnection();
                            DataTable dtupdate = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                            cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = Emp_paymode;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtupdate);
                            if (dtupdate.Rows.Count > 0)
                            {
                                decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString());
                                decimal mainbeforeamt = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowbefore"]);
                                decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());

                            if (mainbeforeamt >= mainamt2)
                            {
                                tol = mainbeforeamt - mainamt2;
                                tol = atmts + tol;
                            }
                            else
                            {
                                tol = mainamt2 - mainbeforeamt;
                                tol = atmts - tol;
                            }
                            if (tol < 0) // ramya added on 14 Dec 21
                            {
                                crnamount = "Entered Amount should not be greater than Invoice Amount!";
                                return crnamount;
                            }
                            string[,] codesup = new string[,]
	                       {
                {"ecfcreditline_amount",tol.ToString() }
                          };
                                string[,] whcos = new string[,]
	                       {
                {"ecfcreditline_ecf_gid",ecfgid },
	            {"ecfcreditline_invoice_gid", invoicegid},
                {"ecfcreditline_defaultacc", "N"},
                {"ecfcreditline_pay_mode",Emp_paymode }
                          };
                                string tnameup = "iem_trn_tecfcreditline";

                                string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);

                                string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                                string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                                string tnamenews = "iem_trn_tinvoice";

                                string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                            }
                        }
                        else
                        {
                            Emp_paymode = "CHQ";
                            decimal tol = 0;
                            GetConnection();
                            DataTable dtupdate = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoicegid;
                            cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = Emp_paymode;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentByidYamt";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtupdate);
                            if (dtupdate.Rows.Count > 0)
                            {
                                decimal atmts = Convert.ToDecimal(dtupdate.Rows[0]["ecfcreditline_amount"].ToString());
                                decimal mainbeforeamt = Convert.ToDecimal(HttpContext.Current.Session["EmpPaymentactiverowbefore"]);
                                decimal mainamt2 = Convert.ToDecimal(EmployeeeExpense.PaymentAmount.ToString());

                            if (mainbeforeamt >= mainamt2)
                            {
                                tol = mainbeforeamt - mainamt2;
                                tol = atmts + tol;
                            }
                            else
                            {
                                tol = mainamt2 - mainbeforeamt;
                                tol = atmts - tol;
                            }
                            if (tol < 0) // ramya added on 14 Dec 21
                            {
                                crnamount = "Entered Amount should not be greater than Invoice Amount!";
                                return crnamount;
                            }

                                string[,] codesup = new string[,]
	                       {
                {"ecfcreditline_amount",tol.ToString() }
                          };
                                string[,] whcos = new string[,]
	                       {
                {"ecfcreditline_ecf_gid",ecfgid },
	            {"ecfcreditline_invoice_gid", invoicegid},
                {"ecfcreditline_defaultacc", "N"},
                {"ecfcreditline_pay_mode",Emp_paymode }
                          };
                                string tnameup = "iem_trn_tecfcreditline";

                                string insertcommendup = objCommonIUD.UpdateCommon(codesup, whcos, tnameup);

                                string[,] codesnews = new string[,]
	                         {
                                {"invoice_netpayable_amount",tol.ToString()}

                              };
                                string[,] whorenews = new string[,]
	                         {
                                  {"invoice_ecf_gid",ecfgid},
                                  {"invoice_gid",invoicegid }    
                            };
                            string tnamenews = "iem_trn_tinvoice";

                            string insertcommendnews = objCommonIUD.UpdateCommon(codesnews, whorenews, tnamenews);
                        }
                    }
                }

                //Ramya added on 13 Dec 21 
                GetConnection();
                cmd = new SqlCommand("Pr_eow_Set_RevertPPXAmt", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@PCreditlineId", SqlDbType.VarChar).Value = payactiverowid;
                cmd.Parameters.Add("@PCurrentRefNo", SqlDbType.VarChar).Value = EmployeeeExpense.RefNoName;
                cmd.Parameters.Add("@PCurrentAmt", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentAmount;
                cmd.Parameters.Add("@PCurrentPaymode", SqlDbType.VarChar).Value = EmployeeeExpense.PaymentModeName;
                cmd.ExecuteNonQuery(); 
                //ramya modified on 14 Dec 21
                string[,] codes = new string[,]
	               {
                        {"ecfcreditline_pay_mode",EmployeeeExpense.PaymentModeName },
                        {"ecfcreditline_ref_no", Emp_MsgRefNoName},
                        {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Beneficiary) },
                        {"ecfcreditline_gl_no", Emp_Msg},
                        {"ecfcreditline_bank_gid", bankgid},
                        {"ecfcreditline_desc",Emp_MsgDescription},
                        {"ecfcreditline_amount", EmployeeeExpense.PaymentAmount} ,
                        {"ecfcreditline_ifsc_code", Ifsc_code}     
                                };
                            string[,] whcosup = new string[,]
	                            {
                        {"ecfcreditline_ecf_gid",ecfgid },
                        {"ecfcreditline_invoice_gid", invoicegid},
                        {"ecfcreditline_gid",payactiverowid }
                  };
                string tname = "iem_trn_tecfcreditline";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                try
                {
                    //Split Amount update - GST_Phase3_2 - Ramya
                    GetConnection();
                    DataTable dtSplit = new DataTable();
                    cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtSplit);
                }
                catch (Exception ex)
                {

                }
                //}
                return Emp_Msg = "ok";
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());

            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return Emp_Msg = "ok";
        }
        public string InsertSupplierinvoice(EOW_EmployeeeExpense EmployeeeExpense, string EmployeeeGid, string ECFGid, string clmtype)
        {
            string Emp_Msg = "";
            try
            {
                string[,] codes = new string[,]
	               {
        {"invoice_ecf_gid",ECFGid},
	    {"invoice_supplier_gid", EmployeeeGid},
        {"invoice_type","S" },	  
	    {"invoice_amount","0"},
        {"invoice_wotax_amount", "0"},
	    {"invoice_dedup_no", "0"},
        {"invoice_no", "0"},
        {"invoice_provision_flag", "N"},
        {"invoice_dedup_status","0" }    
                  };
                string tname = "iem_trn_tinvoice";

                string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                Emp_Msg = insertcommend.ToString();
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string updateinvoicepayment(EOW_SupplierModelgrid EmployeeeExpense, string EmployeeeGid, string ECFGid, string invoiceGid, string clam)
        {
            string bankgid = "0";
            string bankgnno = "123";
            string Emp_Msg = "";
            try
            {
                if (EmployeeeGid != "" && EmployeeeGid != null && invoiceGid != "" && invoiceGid != null)
                {
                    DataTable dtdatds = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = EmployeeeGid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdatds);
                    if (dtdatds.Rows.Count > 0)
                    {
                        decimal amount = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(EmployeeeExpense.Retensionamount);
                        if (amount.ToString() != "0.00")
                        {
                            GetConnection();
                            DataTable dtpaybank = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dtdatds.Rows[0]["paymode_code"].ToString());
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtpaybank);
                            if (dtpaybank.Rows.Count > 0)
                            {
                                if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                {
                                    bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                }
                                if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                {
                                    bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                }
                            }

                            string[,] codes = new string[,]
	                       {       
                            {"ecfcreditline_ecf_gid",ECFGid },
	                        {"ecfcreditline_invoice_gid", invoiceGid},
                            {"ecfcreditline_pay_mode",Convert.ToString(dtdatds.Rows[0]["paymode_code"].ToString())},    
	                        {"ecfcreditline_ref_no", Convert.ToString(dtdatds.Rows[0]["payment_accountno"].ToString())},
                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtdatds.Rows[0]["payment_beneficiaryname"].ToString()) )},
	                        {"ecfcreditline_bank_gid", bankgid},
                            {"ecfcreditline_ifsc_code",Convert.ToString(dtdatds.Rows[0]["payment_ifsccode"].ToString())},
	                        {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount",amount.ToString() }      
                          };

                            string tname = "iem_trn_tecfcreditline";

                            string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                        }
                    }
                    else
                    {
                        DataTable dtdatd = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = EmployeeeGid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdatd);
                        if (dtdatd.Rows.Count > 0)
                        {
                            decimal amount = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(EmployeeeExpense.Retensionamount);
                            if (amount.ToString() != "0.00")
                            {
                                GetConnection();
                                DataTable dtpaybank = new DataTable();
                                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString());
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtpaybank);
                                if (dtpaybank.Rows.Count > 0)
                                {
                                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                    {
                                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                    }
                                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                    {
                                        bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                    }
                                }

                                string[,] codes = new string[,]
	                       {       
                            {"ecfcreditline_ecf_gid",ECFGid },
	                        {"ecfcreditline_invoice_gid", invoiceGid},
                            {"ecfcreditline_pay_mode",Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString())},    
	                        {"ecfcreditline_ref_no", Convert.ToString(dtdatd.Rows[0]["payment_accountno"].ToString())},
                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtdatd.Rows[0]["payment_beneficiaryname"].ToString())) },
	                        {"ecfcreditline_bank_gid", bankgid},
                            {"ecfcreditline_ifsc_code",Convert.ToString(dtdatd.Rows[0]["payment_ifsccode"].ToString())},
	                        {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount",amount.ToString() }      
                          };

                                string tname = "iem_trn_tecfcreditline";

                                string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                            }
                        }
                        else
                        {
                            decimal amount = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(EmployeeeExpense.Retensionamount);
                            if (amount.ToString() != "0.00")
                            {
                                GetConnection();
                                DataTable dtpaybank = new DataTable();
                                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = "CHQ";
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtpaybank);
                                if (dtpaybank.Rows.Count > 0)
                                {
                                    if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                    {
                                        bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                    }
                                    if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                    {
                                        bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                    }
                                }

                                string[,] codesc = new string[,]
                                       {
                            {"ecfcreditline_ecf_gid",ECFGid },
                            {"ecfcreditline_invoice_gid", invoiceGid},
                            {"ecfcreditline_pay_mode","CHQ" },
                            {"ecfcreditline_ref_no", ""},
                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(HttpContext.Current.Session["SupplierGidname"].ToString()) },
                            {"ecfcreditline_bank_gid", bankgid},
                            {"ecfcreditline_ifsc_code",""},
                            {"ecfcreditline_gl_no",bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount", amount.ToString() }      
                                      };

                                string tnamec = "iem_trn_tecfcreditline";

                                string insertcommendc = objCommonIUD.InsertCommon(codesc, tnamec);
                            }
                        }
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string UpdateSupplierinvoice(EOW_SupplierModelgrid EmployeeeExpense, string EmployeeeGid, string invoiceGid, string ECFGid, string clmtype, string supname)
        {
            string bankgid = "0";
            string bankgnno = "123";
            string Emp_Msg = "";
            string Emp_Provision = "";
            string Emp_Retensionflg = "";
            string Retensionper = "";
            string Retensionamount = "";
            string Retensionrelse = "";
            string ecfdescriptions = "";
            string invnetamtbal = "0";
            try
            {
                if (EmployeeeExpense.Description != null)
                {
                    ecfdescriptions = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Description);
                }
                if (EmployeeeExpense.Provision == "No")
                {
                    Emp_Provision = "N";
                }
                else
                {
                    Emp_Provision = "Y";
                }
                if (EmployeeeExpense.Retensionflg == "No" || EmployeeeExpense.Retensionflg == "N")
                {
                    Emp_Retensionflg = "N";
                    Retensionper = "0";
                    Retensionamount = "0";
                    Retensionrelse = "";
                }
                else
                {
                    Emp_Retensionflg = "Y";
                    Retensionper = String.IsNullOrEmpty(EmployeeeExpense.Retensionper.ToString()) ? "0" : EmployeeeExpense.Retensionper;
                    Retensionamount = String.IsNullOrEmpty(EmployeeeExpense.Retensionamount) ? "0" : EmployeeeExpense.Retensionamount;
                    Retensionrelse = String.IsNullOrEmpty(EmployeeeExpense.Retensionrelse) ? "" : objCmnFunctions.convertoDateTimeString(EmployeeeExpense.Retensionrelse);
                }

                if (EmployeeeGid != "" && EmployeeeGid != null && invoiceGid != "" && invoiceGid != null)
                {
                    DataTable dt = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SUMOFOTHERPAYMENT";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["ecfcreditline_amount"].ToString());
                        if (Emp_Msg == "")
                        {
                            invnetamtbal = "0";
                        }
                        else if (Convert.ToDecimal(EmployeeeExpense.Amount) < Convert.ToDecimal(Emp_Msg))
                        {
                            Emp_Msg = "DuplicateInvoicecrid";
                            return Emp_Msg;
                        }
                        else
                        {
                            invnetamtbal = Emp_Msg;
                        }
                    }

                    //string[,] codesdnew = new string[,]
                    //    {
                    //    {"ecfcreditline_isremoved","Y" }
                    //    };
                    //string[,] whcosdnew = new string[,]
                    //    {        
                    //     {"ecfcreditline_ecf_gid",ECFGid },
                    //     {"ecfcreditline_invoice_gid",invoiceGid },
                    //   };
                    //string tnamednew = "iem_trn_tecfcreditline";

                    //string insertcommenddnew = objCommonIUD.UpdateCommon(codesdnew, whcosdnew, tnamednew);

                    DataTable dtdatdc = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = EmployeeeGid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdatdc);
                    if (dtdatdc.Rows.Count > 0)
                    {
                        decimal amount = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(Retensionamount);
                        amount = amount - Convert.ToDecimal(invnetamtbal);
                        //if (amount.ToString() != "0.00")
                        //{
                        GetConnection();
                        DataTable dtpaybank = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dtdatdc.Rows[0]["paymode_code"].ToString());
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtpaybank);
                        if (dtpaybank.Rows.Count > 0)
                        {
                            if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                            {
                                bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                            }
                            if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                            {
                                bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                            }
                        }

                        string[,] codes = new string[,]
	                       {         
                            {"ecfcreditline_isremoved","N" },
	                        {"ecfcreditline_ref_no", Convert.ToString(dtdatdc.Rows[0]["payment_accountno"].ToString())},
                            //{"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtdatdc.Rows[0]["payment_beneficiaryname"].ToString())) },
	                        {"ecfcreditline_bank_gid", bankgid},
                            {"ecfcreditline_ifsc_code",Convert.ToString(dtdatdc.Rows[0]["payment_ifsccode"].ToString())},
	                        {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount",amount.ToString() }      
                          };
                        string[,] codeswh = new string[,]
	                       {
                            {"ecfcreditline_ecf_gid",ECFGid },
	                        {"ecfcreditline_invoice_gid", invoiceGid},
                            {"ecfcreditline_pay_mode",Convert.ToString(dtdatdc.Rows[0]["paymode_code"].ToString())},    
                          };
                        string tname = "iem_trn_tecfcreditline";

                        string insertcommend = objCommonIUD.UpdateCommon(codes, codeswh, tname);
                        // }
                    }
                    else
                    {
                        DataTable dtdatd = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = EmployeeeGid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdatd);
                        if (dtdatd.Rows.Count > 0)
                        {
                            decimal amount = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(Retensionamount);
                            amount = amount - Convert.ToDecimal(invnetamtbal);

                            GetConnection();
                            DataTable dtpaybank = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString());
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtpaybank);
                            if (dtpaybank.Rows.Count > 0)
                            {
                                if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                {
                                    bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                }
                                if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                {
                                    bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                }
                            }

                            string[,] codes = new string[,]
	                       {     
                            {"ecfcreditline_isremoved","N" },
	                        {"ecfcreditline_ref_no", Convert.ToString(dtdatd.Rows[0]["payment_accountno"].ToString())},
                            //{"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtdatd.Rows[0]["payment_beneficiaryname"].ToString())) },
	                        {"ecfcreditline_bank_gid", bankgid},
                            {"ecfcreditline_ifsc_code",Convert.ToString(dtdatd.Rows[0]["payment_ifsccode"].ToString())},
	                        {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount",amount.ToString() }      
                          };
                            string[,] codeswh = new string[,]
	                       {
                            {"ecfcreditline_ecf_gid",ECFGid },
	                        {"ecfcreditline_invoice_gid", invoiceGid},
                            {"ecfcreditline_pay_mode",Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString())},    
                          };
                            string tname = "iem_trn_tecfcreditline";

                            string insertcommend = objCommonIUD.UpdateCommon(codes, codeswh, tname);

                        }
                        else
                        {
                            decimal amount = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(Retensionamount);
                            amount = amount - Convert.ToDecimal(invnetamtbal);

                            GetConnection();
                            DataTable dtpaybank = new DataTable();
                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                            cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = "CHQ";
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtpaybank);
                            if (dtpaybank.Rows.Count > 0)
                            {
                                if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                {
                                    bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                }
                                if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                {
                                    bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                }
                            }

                            string[,] codes = new string[,]
	                       {       
                            {"ecfcreditline_isremoved","N" },
	                        {"ecfcreditline_ref_no", "NA"},
                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(HttpContext.Current.Session["SupplierGidname"].ToString()) },
	                        {"ecfcreditline_bank_gid",bankgid},
                            {"ecfcreditline_ifsc_code",""},
                            {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount",amount.ToString() }      
                          };
                            string[,] codeswh = new string[,]
	                       {
                            {"ecfcreditline_ecf_gid",ECFGid },
	                        {"ecfcreditline_invoice_gid", invoiceGid},
                            {"ecfcreditline_pay_mode","CHQ"},    
                          };
                            string tname = "iem_trn_tecfcreditline";

                            string insertcommend = objCommonIUD.UpdateCommon(codes, codeswh, tname);
                        }
                    }
                }

                if (invoiceGid.ToString().Trim() != "")
                {
                    decimal amountnewup = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(Retensionamount);
                    amountnewup = amountnewup - Convert.ToDecimal(invnetamtbal);
                    string status = "";

                    //status = GetStatusexcel(EmployeeeExpense.InvoiceNo.ToString().Trim(), invoiceGid.ToString(), EmployeeeGid, "DuplicateInvoiceedit");

                    GetConnection();
                    cmd = new SqlCommand("pr_eow_trn_excelvalate", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@chkdata", SqlDbType.VarChar).Value = EmployeeeExpense.InvoiceNo.ToString();
                    cmd.Parameters.Add("@chkdata1", SqlDbType.VarChar).Value = invoiceGid.ToString();
                    cmd.Parameters.Add("@chkdata2", SqlDbType.VarChar).Value = EmployeeeGid.ToString();
                    cmd.Parameters.Add("@chkdata3", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.InvoiceDate);
                    cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "DuplicateInvoiceedit";
                    status = (string)cmd.ExecuteScalar();

                    if (status == "Exists")
                    {
                        Emp_Msg = "DuplicateInvoice";
                        return Emp_Msg;
                    }
                    else
                    {
                        //string GstinVendor = "";
                        //string GstinFiccl = "";
                        //if(EmployeeeExpense.GstinVendor!=null)
                        //{
                        //    GstinVendor = EmployeeeExpense.GstinVendor.ToString();

                        //}
                        //if(EmployeeeExpense.GstinFiccl!=null)
                        //{
                        //    GstinFiccl = EmployeeeExpense.GstinFiccl.ToString();
                        //}

                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ECFGid;
                        cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Checkinvoicedata";
                        cmd.Parameters.Add("@ploc", SqlDbType.VarChar).Value = string.IsNullOrEmpty(EmployeeeExpense.ProviderLocation) ? "" : EmployeeeExpense.ProviderLocation.ToString();
                        cmd.Parameters.Add("@rloc", SqlDbType.VarChar).Value = string.IsNullOrEmpty(EmployeeeExpense.ReceiverLocation) ? "" : EmployeeeExpense.ReceiverLocation.ToString();
                        int i = cmd.ExecuteNonQuery();

                        //GetConnection();
                        //cmd = new SqlCommand("pr_eow_set_UpdateRCMEnteries_ByInvoice", con);
                        //cmd.CommandType = CommandType.StoredProcedure;
                        //cmd.Parameters.Add("@EcfId", SqlDbType.Int).Value = string.IsNullOrEmpty(ECFGid) ? 0 : Convert.ToInt32(ECFGid);
                        //cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = string.IsNullOrEmpty(invoiceGid) ? 0 : Convert.ToInt32(invoiceGid); ;
                        //cmd.Parameters.Add("@UId", SqlDbType.Int).Value = objCmnFunctions.GetLoginUserGid().ToString();
                        //cmd.Parameters.Add("@ProviderLocation", SqlDbType.VarChar).Value = string.IsNullOrEmpty(EmployeeeExpense.ProviderLocation) ? "" : EmployeeeExpense.ProviderLocation.ToString();
                        //cmd.Parameters.Add("@ReceiverLocation", SqlDbType.VarChar).Value = string.IsNullOrEmpty(EmployeeeExpense.ReceiverLocation) ? "" : EmployeeeExpense.ReceiverLocation.ToString();
                        //cmd.Parameters.Add("@GstCharged", SqlDbType.Char).Value = EmployeeeExpense.GstCharged;
                        //int j = cmd.ExecuteNonQuery();

                        objCmnFunctions.ECFDebtDel(Convert.ToInt64(ECFGid), Convert.ToInt64(invoiceGid), Convert.ToInt64(EmployeeeExpense.ProviderLocation), Convert.ToInt64(EmployeeeExpense.ReceiverLocation));
                        string[,] codes = new string[,]
	               {
	    {"invoice_supplier_gid", EmployeeeGid},
        {"invoice_type","S" },	  
	    {"invoice_amount",EmployeeeExpense.Amount},
        {"invoice_netpayable_amount",amountnewup.ToString()},
        {"invoice_wotax_amount", EmployeeeExpense.TaxableAmount},
	    {"invoice_dedup_no", objCmnFunctions.Getspecialcharacters(EmployeeeExpense.InvoiceNo)},
        {"invoice_no", EmployeeeExpense.InvoiceNo},
        {"invoice_service_month", objCmnFunctions.convertoDateTimeString( EmployeeeExpense.SerMonth)},       
        {"invoice_desc", ecfdescriptions},
        {"invoice_date",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.InvoiceDate)},
        {"invoice_provision_flag", Emp_Provision},
        {"invoice_retention_flag", Emp_Retensionflg},
        {"invoice_retention_rate", Retensionper},
        {"invoice_retention_amount", Retensionamount},
        {"invoice_retention_exception", Retensionamount},  
        {"invoice_retention_releaseon",Retensionrelse}, 
        {"invoice_gst_charged",EmployeeeExpense.GstCharged},
        {"invoice_provider_location",EmployeeeExpense.ProviderLocation}, 
        {"invoice_gstin_vendor",string.IsNullOrEmpty(EmployeeeExpense.GstinVendor)?"":EmployeeeExpense.GstinVendor}, 
        {"invoice_receiver_location",EmployeeeExpense.ReceiverLocation}, 
        {"invoice_gstin_ficcl", string.IsNullOrEmpty(EmployeeeExpense.GstinFiccl)?"":EmployeeeExpense.GstinFiccl},
         //Prema added for MSME on 08-03-2022 start
          {"invoice_receipt_date",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.InvoiceReceiptDate)},
        {"invoice_reasonfordelay",string.IsNullOrEmpty(EmployeeeExpense.ReasonForDelay)?"":EmployeeeExpense.ReasonForDelay},
         {"invoice_FH_gid",string.IsNullOrEmpty(EmployeeeExpense.FunctionalHeadApproval)?"":EmployeeeExpense.FunctionalHeadApproval},
          //Prema changes End
                   };
                        string[,] whore = new string[,]
	               {
        {"invoice_ecf_gid",ECFGid},
        {"invoice_gid",invoiceGid }    
                  };
                        string tname = "iem_trn_tinvoice";

                        string insertcommend = objCommonIUD.UpdateCommon(codes, whore, tname);
                        Emp_Msg = insertcommend.ToString();

                        try
                        {
                            DataTable dtecf = new DataTable();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_UpdateSplitPayment", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ECFGid;
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtecf);
                        }
                        catch (Exception e)
                        { }

                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ECFGid;
                        cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "deleteinvoicepodetails";
                        int res = cmd.ExecuteNonQuery();


                        if (Emp_Retensionflg == "Y")
                        {
                            DataTable dt = new DataTable();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ECFGid;
                            cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierretpaymode";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dt);
                            if (dt.Rows.Count > 0)
                            {
                                string[,] codesd = new string[,]
	                    {
                         {"ecfcreditline_amount", Retensionamount} ,
                         {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(supname) }
                        };
                                string[,] whcosd = new string[,]
	                    {        
                         {"ecfcreditline_ecf_gid",ECFGid },
                         {"ecfcreditline_pay_mode","RET" },
                         {"ecfcreditline_invoice_gid",invoiceGid }
                       };
                                string tnamed = "iem_trn_tecfcreditline";

                                string insertcommendd = objCommonIUD.UpdateCommon(codesd, whcosd, tnamed);
                            }
                            else
                            {
                                int EcfRetension = Convert.ToInt32(ConfigurationManager.AppSettings["invoiceRetention"].ToString());

                                string[,] codesr = new string[,]
	                         {
                                {"ecfcreditline_ecf_gid",ECFGid },
                                {"ecfcreditline_invoice_gid", invoiceGid},
                                {"ecfcreditline_pay_mode","RET" },
                                {"ecfcreditline_ref_no", ""},
                                {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(supname) },
                                {"ecfcreditline_gl_no", EcfRetension.ToString()},
                                {"ecfcreditline_desc","Invoice Retension Amount"},
                                {"ecfcreditline_amount", Retensionamount}             
                            };
                                string tnamer = "iem_trn_tecfcreditline";

                                string insertcommendr = objCommonIUD.InsertCommon(codesr, tnamer);
                            }
                        }
                        else
                        {
                            string[,] codesd = new string[,]
	                    {
                        {"ecfcreditline_isremoved","Y" }
                        };
                            string[,] whcosd = new string[,]
	                    {
        
                         {"ecfcreditline_ecf_gid",ECFGid },
                         {"ecfcreditline_invoice_gid",invoiceGid },
                         {"ecfcreditline_pay_mode","RET" },
                       };
                            string tnamed = "iem_trn_tecfcreditline";

                            string insertcommendd = objCommonIUD.UpdateCommon(codesd, whcosd, tnamed);
                        }
                    }
                }
                else
                {
                    decimal amountnewup = Convert.ToDecimal(EmployeeeExpense.Amount) - Convert.ToDecimal(Retensionamount);
                    amountnewup = amountnewup - Convert.ToDecimal(invnetamtbal);
                    string status = "";

                    //status = GetStatusexcel(EmployeeeExpense.InvoiceNo.ToString().Trim(), EmployeeeGid, "", "DuplicateInvoice");

                    GetConnection();
                    cmd = new SqlCommand("pr_eow_trn_excelvalate", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@chkdata", SqlDbType.VarChar).Value = EmployeeeExpense.InvoiceNo.ToString();
                    cmd.Parameters.Add("@chkdata1", SqlDbType.VarChar).Value = EmployeeeGid.ToString();
                    //cmd.Parameters.Add("@chkdata2", SqlDbType.VarChar).Value = EmployeeeGid.ToString();
                    cmd.Parameters.Add("@chkdata3", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.InvoiceDate);
                    cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "DuplicateInvoice";
                    status = (string)cmd.ExecuteScalar();

                    if (status == "Exists")
                    {
                        Emp_Msg = "DuplicateInvoice";
                        return Emp_Msg;
                    }
                    else
                    {
                        string[,] codes = new string[,]
	                    {
                            {"invoice_ecf_gid",ECFGid},
                            {"invoice_supplier_gid", EmployeeeGid},
                            {"invoice_type","S" },	  
	                        {"invoice_amount",EmployeeeExpense.Amount},
                            {"invoice_netpayable_amount",amountnewup.ToString()},
                            {"invoice_wotax_amount", EmployeeeExpense.TaxableAmount},
	                        {"invoice_dedup_no", objCmnFunctions.Getspecialcharacters(EmployeeeExpense.InvoiceNo)},
                            {"invoice_no", EmployeeeExpense.InvoiceNo},
                            {"invoice_service_month", objCmnFunctions.convertoDateTimeString( EmployeeeExpense.SerMonth)},       
                            {"invoice_desc", ecfdescriptions},
                            {"invoice_date",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.InvoiceDate)},
                            {"invoice_provision_flag", Emp_Provision},
                            {"invoice_retention_flag", Emp_Retensionflg},
                            {"invoice_retention_rate", Retensionper},
                            {"invoice_retention_amount", Retensionamount},
                            {"invoice_retention_exception", Retensionamount},  
                            {"invoice_retention_releaseon",Retensionrelse}, 
                            {"invoice_dedup_status","0" },
                            {"invoice_gst_charged",string.IsNullOrEmpty(EmployeeeExpense.GstCharged)?"N":(EmployeeeExpense.GstCharged)},
                            {"invoice_provider_location",EmployeeeExpense.ProviderLocation}, 
                            {"invoice_gstin_vendor",string.IsNullOrEmpty(EmployeeeExpense.GstinVendor)?"":EmployeeeExpense.GstinVendor}, 
                            {"invoice_receiver_location",EmployeeeExpense.ReceiverLocation}, 
                            {"invoice_gstin_ficcl",string.IsNullOrEmpty(EmployeeeExpense.GstinFiccl)?"":EmployeeeExpense.GstinFiccl },
                             //Prema added for MSME on 08-03-2022 start
                              {"invoice_receipt_date",objCmnFunctions.convertoDateTimeString( EmployeeeExpense.InvoiceReceiptDate)},
        {"invoice_reasonfordelay",string.IsNullOrEmpty(EmployeeeExpense.ReasonForDelay)?"":EmployeeeExpense.ReasonForDelay},
           {"invoice_FH_gid",string.IsNullOrEmpty(EmployeeeExpense.FunctionalHeadApproval)?"":EmployeeeExpense.FunctionalHeadApproval},
             //Prema changes End
                        };
                        string tname = "iem_trn_tinvoice";

                        string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                        Emp_Msg = insertcommend.ToString();

                        try
                        {
                            DataTable dtecf = new DataTable();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_UpdateSplitPayment", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ECFGid;
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtecf);
                        }
                        catch (Exception e)
                        { }
                        //GstPhase3_1
                        DataTable dtattachment = new DataTable();
                        string id = string.Empty;
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_checkinginvoiceattachment_invoicesave", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = ECFGid;
                        cmd.Parameters.Add("@Inovice_no", SqlDbType.VarChar).Value = EmployeeeExpense.InvoiceNo;
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtattachment);
                        //if (dtattachment.Rows.Count > 0)
                        //{
                        //    id = Convert.ToString(dtattachment.Rows[0]["invoice_gid"].ToString());
                        //}


                        string Emp_Msgigid = "";
                        DataTable dt = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ECFGid;
                        cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = EmployeeeGid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicemaxgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dt);
                        if (dt.Rows.Count > 0)
                        {
                            Emp_Msgigid = Convert.ToString(dt.Rows[0]["invoice_gid"].ToString());
                        }
                        if (Emp_Retensionflg == "Y")
                        {

                            string message = updateinvoicepayment(EmployeeeExpense, EmployeeeGid.ToString(), ECFGid.ToString(), Emp_Msgigid.ToString(), "S");

                            int EcfRetension = Convert.ToInt32(ConfigurationManager.AppSettings["invoiceRetention"].ToString());
                            string[,] codesr = new string[,]
	                         {
                                {"ecfcreditline_ecf_gid",ECFGid },
                                {"ecfcreditline_invoice_gid", Emp_Msgigid},
                                {"ecfcreditline_pay_mode","RET" },
                                {"ecfcreditline_ref_no", ""},
                                {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(supname) },
                                {"ecfcreditline_gl_no", EcfRetension.ToString()},
                                {"ecfcreditline_desc","Invoice Retension Amount"},
                                {"ecfcreditline_amount", Retensionamount}             
                            };
                            string tnamer = "iem_trn_tecfcreditline";

                            string insertcommendr = objCommonIUD.InsertCommon(codesr, tnamer);
                        }
                        else
                        {
                            string message = updateinvoicepayment(EmployeeeExpense, EmployeeeGid.ToString(), ECFGid.ToString(), Emp_Msgigid.ToString(), "S");
                        }
                    }
                }
                try
                {
                    //Split Amount update - GST_Phase3_2 - Ramya
                    GetConnection();
                    DataTable dtSplit = new DataTable();
                    cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoiceGid;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtSplit);
                }
                catch (Exception ex)
                {

                }                
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        //Update invoice id in attachment table

        public string updateinvoiceidattachment(string ECFGid, string invoiceGid)
        {
            string Emp_Msg = "";
            try
            {

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }




        public string UpdateSupplierinvoicemanual(EOW_Supplierinvoice EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
        {

            string Emp_Msgcurit = "";
            string Emp_Msgcurcode = "";
            string Emp_Msg = "";
            string Emp_Msgecfremark = "";
            string insertcommend = "";
            string Emp_Msgsuper = "";
            string queue_gid = "";
            try
            {
                if (EmployeeeExpenseModel.ecfremark == null)
                {
                    Emp_Msgecfremark = "";
                }
                else
                {
                    Emp_Msgecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());
                }

                int EcfApproved = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());

                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_tecf", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = Emp_Msgecfremark;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "edit";
                int data = cmd.ExecuteNonQuery();
                insertcommend = "Success";
                if (insertcommend == "Success")
                {
                    DataTable dt = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfno";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_no"].ToString());
                        Emp_Msg = "Your ECF Number is : " + Emp_Msg;
                    }

                }

                string[,] codes = new string[,]
	               {
         {"queue_date","sysdatetime()"},
	     {"queue_ref_flag", "1"},
         {"queue_ref_gid",ecfgid },
	     {"queue_ref_status", "64"},
         {"queue_from",objCmnFunctions.GetLoginUserGid().ToString() },
	     {"queue_to_type","U"},
         {"queue_to", "43"},
	     {"queue_action_for", "A"}, 
         {"Additional_flag", "N"}, 
         {"queue_prev_gid", "0"}
                  };

                string tname = "iem_trn_tqueue";

                string insertcommendecf = objCommonIUD.InsertCommon(codes, tname);

                GetConnection();
                cmd = new SqlCommand("pr_eow_com_eowtofsmoveddata", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "INSETINTO";
                int i = cmd.ExecuteNonQuery();

                if (insertcommendecf == "success")
                {
                    DataSet dtempsupnew = new DataSet();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                    cmd.Parameters.Add("@Currency_gid", SqlDbType.VarChar).Value = EmployeeeExpenseModel.CurrencyId;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queuemaxgidcurrency";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtempsupnew);
                    if (dtempsupnew.Tables[0].Rows.Count > 0)
                    {
                        queue_gid = Convert.ToString(dtempsupnew.Tables[0].Rows[0]["queue_gid"].ToString());
                    }
                    if (dtempsupnew.Tables[1].Rows.Count > 0)
                    {
                        Emp_Msgcurcode = Convert.ToString(dtempsupnew.Tables[1].Rows[0]["currency_code"].ToString());
                        Emp_Msgcurit = Convert.ToString(dtempsupnew.Tables[1].Rows[0]["currencyrate_value"].ToString());
                    }
                    string ecfdesition = "";
                    if (queue_gid != "")
                    {
                        if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                        {
                            ecfdesition = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                        }

                        string[,] codesUP = new string[,]
	               {
        {"ecf_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_delmat_amount",EmployeeeExpenseModel.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpenseModel.Currencyamount},
        {"ecf_remark", Emp_Msgecfremark.ToString()},
	    {"ecf_queue_gid", queue_gid},
        {"ecf_queue_to_type","U" },
	    {"ecf_queue_to", "43"},
        {"ecf_status",EcfApproved.ToString() },
        {"ecf_all_status",EcfApproved.ToString() },
	    {"ecf_urgent_flag","N"},
        {"ecf_action_by",objCmnFunctions.GetLoginUserGid().ToString() },
        {"ecf_description",ecfdesition.ToString() },
	    {"ecf_action_date","sysdatetime()"}
                  };
                        string[,] whcosup = new string[,]
	               {
	    {"ecf_gid", ecfgid}
                  };
                        string tnameUP = "iem_trn_tecf";

                        string insertcommendUP = objCommonIUD.UpdateCommon(codesUP, whcosup, tnameUP);

                        string mail = queue_gid.ToString();
                        GetConnection();
                        DataTable dtdoctype = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdoctype);
                        if (dtdoctype.Rows.Count > 0)
                        {
                            string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                            doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                            mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                        }

                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        /*public string UpdateSupplierinvoicefinal(EOW_Supplierinvoice EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
        {

            string Emp_Msgcurit = "";
            string Emp_Msgcurcode = "";
            string Emp_Msg = "";
            string Emp_Msgecfremark = "";
            string insertcommend = "";
            string Emp_Msgsuper = "";
            string queue_gid = "";
            try
            {

                //ecf date update
                GetConnection();
                DataTable dt1 = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetECFNo";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt1);
                if (dt1.Rows.Count > 0)
                {
                    ecf_no1 = dt1.Rows[0][0].ToString();
                }
                if (string.IsNullOrEmpty(ecf_no1))
                {
                    string[,] codesUP1 = new string[,]
	                    {
	                        {"ecf_date", objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString()},
                            //{"ecf_insert_by", objCmnFunctions.GetLoginUserGid().ToString()}
                                     
                        };
                    string[,] whcosup1 = new string[,]
	                    {
                                      
	                        {"ecf_gid", ecfgid}
                        };
                    string tnameUP1 = "iem_trn_tecf";
                    string insertcommendUP1 = objCommonIUD.UpdateCommon(codesUP1, whcosup1, tnameUP1);
                }
                //
                DataTable dtempsup = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = eempid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtempsup);
                if (dtempsup.Rows.Count > 0)
                {
                    Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["employee_supervisor"].ToString());

                    GetConnection();
                    cmd = new SqlCommand("pr_ecfdelmat", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                    cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(Emp_Msgsuper.ToString());

                    cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                    cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                    cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                    cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;


                    cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                    cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                    cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                    cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;

                    cmd.ExecuteNonQuery();

                    var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                    var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                    var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                    var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                    var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                    var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);

                    if (demmatresult != "0" && demmatresult != "")
                    {
                        Emp_Msgsuper = result.ToString();
                    }
                    else
                    {
                        Flag = "E";
                        Emp_Msg = sqlerrors;
                        return Emp_Msg;
                    }

                    if (EmployeeeExpenseModel.ecfremark == null)
                    {
                        Emp_Msgecfremark = "";
                    }
                    else
                    {
                        Emp_Msgecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());

                    }
                    int ecf_statusaction = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
                    int ecf_status = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                    insertcommend = "Success";
                    if (insertcommend != "")
                    {
                        if (queid.ToString().Trim() != "")
                        {
                            string[,] codesq = new string[,]
	                           {
                      {"queue_isremoved","Y"},
                      {"queue_action_date","sysdatetime()"},
                      {"queue_action_by",eempid.ToString() },
                      {"queue_action_status",ecf_statusaction.ToString() },
                      {"queue_action_remark",Emp_Msgecfremark.ToString() },
                   
                              };
                            string[,] whreq = new string[,]
	                           {
                    {"queue_gid",queid.ToString() }
                              };
                            string tnameq = "iem_trn_tqueue";
                            string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);

                            DataTable dt = new DataTable();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfno";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dt);
                            if (dt.Rows.Count > 0)
                            {
                                Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_no"].ToString());
                            }
                        }
                        else
                        {
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_trn_tecf", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                            cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = Emp_Msgecfremark;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "edit";
                            int data = cmd.ExecuteNonQuery();
                            insertcommend = "Success";
                            if (insertcommend == "Success")
                            {
                                DataTable dt = new DataTable();
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfno";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dt);
                                if (dt.Rows.Count > 0)
                                {
                                    Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_no"].ToString());
                                    Emp_Msg = "Your ECF Number is : " + Emp_Msg;
                                }
                            }
                        }


                        string[,] codes = new string[,]
	               {
        {"queue_date","sysdatetime()"},
	    {"queue_ref_flag", "1"},
        {"queue_ref_gid",ecfgid },
	    {"queue_ref_status", ecf_status.ToString()},
        {"queue_from",eempid },
	    {"queue_to_type", Flag.ToString()},
        {"queue_to",Emp_Msgsuper.ToString()},
	    {"queue_action_for", "A"},    
        {"queue_prev_gid", queid},
        {"Additional_flag", Additionalflagnew.ToString()}
                  };

                        string tname = "iem_trn_tqueue";

                        string insertcommendecf = objCommonIUD.InsertCommon(codes, tname);

                        if (insertcommendecf == "success")
                        {
                            DataSet dtempsupnew = new DataSet();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = ecfgid;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = eempid;
                            cmd.Parameters.Add("@Currency_gid", SqlDbType.VarChar).Value = EmployeeeExpenseModel.CurrencyId;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queuemaxgidcurrency";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtempsupnew);
                            if (dtempsupnew.Tables[0].Rows.Count > 0)
                            {
                                queue_gid = Convert.ToString(dtempsupnew.Tables[0].Rows[0]["queue_gid"].ToString());
                            }
                            if (dtempsupnew.Tables[1].Rows.Count > 0)
                            {
                                Emp_Msgcurcode = Convert.ToString(dtempsupnew.Tables[1].Rows[0]["currency_code"].ToString());
                                Emp_Msgcurit = Convert.ToString(dtempsupnew.Tables[1].Rows[0]["currencyrate_value"].ToString());
                            }
                            string ecfdesition = "";
                            if (queue_gid != "")
                            {
                                if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                                {
                                    ecfdesition = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                                }

                                string[,] codesUP = new string[,]
	               {
        {"ecf_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_delmat_amount",EmployeeeExpenseModel.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpenseModel.Currencyamount},
        {"ecf_remark", Emp_Msgecfremark.ToString()},
	    {"ecf_queue_gid", queue_gid},
        {"ecf_queue_to_type","E" },
	    {"ecf_queue_to", Emp_Msgsuper},
        {"ecf_status",ecf_status.ToString() },
        {"ecf_all_status",ecf_status.ToString() },
	    {"ecf_urgent_flag","N"},
        {"ecf_action_by",eempid },
        {"ecf_description",ecfdesition.ToString() },
	    {"ecf_action_date","sysdatetime()"}
                  };
                                string[,] whcosup = new string[,]
	               {
        {"ecf_raiser",eempid },
	    {"ecf_gid", ecfgid}
                  };
                                string tnameUP = "iem_trn_tecf";

                                string insertcommendUP = objCommonIUD.UpdateCommon(codesUP, whcosup, tnameUP);

                                string mail = queue_gid.ToString();
                                GetConnection();
                                DataTable dtdoctype = new DataTable();
                                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtdoctype);
                                if (dtdoctype.Rows.Count > 0)
                                {
                                    string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                    doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                    mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                                }

                            }
                        }

                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ex.Message.ToString();
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }*/


        /*public string UpdateSupplierinvoicefinal(EOW_Supplierinvoice EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
        {
            try
            {



                string ecfdate = "";
                string ecfdescription = "";
                string errormsg = "";
                if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                {
                    ecfdescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                }
                GetConnection();
                cmd = new SqlCommand("UpdateSupplierinvoicefinal", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                //   cmd.Parameters.Add("@invoiceGid", SqlDbType.Int).Value = Convert.ToInt32(invoiceGid);
                cmd.Parameters.Add("@eempid", SqlDbType.Int).Value = Convert.ToInt32(eempid);
                cmd.Parameters.Add("@queid", SqlDbType.VarChar).Value = Convert.ToString(queid);
                if (!string.IsNullOrEmpty(EmployeeeExpenseModel.ECF_Date))
                {
                    ecfdate = objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString();
                }
                cmd.Parameters.Add("@ecfdate", SqlDbType.VarChar).Value = ecfdate;
                cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Convert.ToString(EmployeeeExpenseModel.ecfremark));
                cmd.Parameters.Add("@ecf_statusaction", SqlDbType.Int).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"]);
                cmd.Parameters.Add("@ecf_status", SqlDbType.VarChar).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"]);
                cmd.Parameters.Add("@ecfdescription", SqlDbType.VarChar).Value = ecfdescription;

                cmd.Parameters.Add("@ecf_currency_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Currencyamount.ToString();
                cmd.Parameters.Add("@ecf_amount", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.ECF_Amount);
                cmd.Parameters.Add("@ecf_delmat_amount", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.ECF_Amount);
                cmd.Parameters.Add("@Currency_gid", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.CurrencyId);


                cmd.Parameters.Add("@queue_gid", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@errormsg", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecfoutput", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@docsubtype_gid", SqlDbType.VarChar, 50).Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();

                var errormsgs = Convert.ToString(cmd.Parameters["@errormsg"].Value);
                errormsg = Convert.ToString(errormsgs);
                if (errormsg == "")
                {
                    errormsgs = Convert.ToString(cmd.Parameters["@ecfoutput"].Value);
                    errormsg = "ECF Number is : " + errormsgs.ToString();

                    var queue_gid = Convert.ToString(cmd.Parameters["@queue_gid"].Value);
                    string mail = queue_gid.ToString();
                    var doctype = Convert.ToString(cmd.Parameters["@docsubtype_gid"].Value);
                    string doctypeid = doctype.ToString();
                    mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                }
                return errormsg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }*/

        public string UpdateSupplierinvoicefinal(EOW_Supplierinvoice EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
        {
            try
            {
                string ecfdate = "";
                string ecfdescription = "";
                string errormsg = "";
                if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                {
                    ecfdescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                }
                GetConnection();
                cmd = new SqlCommand("UpdateSupplierinvoicefinal", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);

                cmd.Parameters.Add("@eempid", SqlDbType.Int).Value = Convert.ToInt32(eempid);
                cmd.Parameters.Add("@queid", SqlDbType.VarChar).Value = Convert.ToString(queid);
                if (!string.IsNullOrEmpty(EmployeeeExpenseModel.ECF_Date))
                {
                    ecfdate = objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString();
                }
                cmd.Parameters.Add("@ecfdate", SqlDbType.VarChar).Value = ecfdate;
                cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = objCmnFunctions.Getreplacesinglequotes(Convert.ToString(EmployeeeExpenseModel.ecfremark));
                cmd.Parameters.Add("@ecf_statusaction", SqlDbType.Int).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"]);
                cmd.Parameters.Add("@ecf_status", SqlDbType.VarChar).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"]);
                cmd.Parameters.Add("@ecfdescription", SqlDbType.VarChar).Value = ecfdescription;

                cmd.Parameters.Add("@ecf_currency_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Currencyamount.ToString();
                cmd.Parameters.Add("@ecf_amount", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.ECF_Amount);
                cmd.Parameters.Add("@ecf_delmat_amount", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.ECF_Amount);
                cmd.Parameters.Add("@Currency_gid", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.CurrencyId);


                cmd.Parameters.Add("@queue_gid", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@errormsg", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecfoutput", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@docsubtype_gid", SqlDbType.VarChar, 50).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@clear", SqlDbType.VarChar, 50).Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();

                var errormsgs = Convert.ToString(cmd.Parameters["@errormsg"].Value);
                var clear = Convert.ToString(cmd.Parameters["@clear"].Value);
                errormsg = errormsgs.ToString();
                if (clear == "1")
                {
                    errormsgs = Convert.ToString(cmd.Parameters["@ecfoutput"].Value);
                    errormsg = "ECF Number is : " + errormsgs.ToString();
                }
                else
                {
                    errormsg = errormsgs.ToString();
                }

                var queue_gid = Convert.ToString(cmd.Parameters["@queue_gid"].Value);
                string doctypeid = "0";
                string mail = queue_gid.ToString();
                GetConnection();
                DataSet dats = new DataSet();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                da = new SqlDataAdapter(cmd);
                da.Fill(dats);
                if (dats.Tables[0].Rows.Count > 0)
                {
                    doctypeid = Convert.ToString(dats.Tables[0].Rows[0]["docsubtype_gid"].ToString());
                    doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                   // mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                    //vadivu add
                    int PrGid = 0; string pogid = "pogid"; string cbfgid = "cbfgid"; int WoGid = 0;
                    string EcfGid = ecfgid;

                    mailsender.sendusermailEOW("EOW", doctypeid, mail, "S", "0", EcfGid, PrGid, pogid, cbfgid, WoGid);
                  

                }

                if (dats.Tables[1].Rows.Count > 0)
                {
                    for (int i = 0; i < dats.Tables[1].Rows.Count; i++)
                    {
                        string queueidformail = Convert.ToString(dats.Tables[1].Rows[0]["queue_gid"].ToString());
                        mailsender.sendusermail("EOW", doctypeid, queueidformail, "A", "0");
                    }
                }
                return errormsg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string DeleteSuppliernewlst(string invoice, string ecfgid)
        {
            try
            {

                //        string[,] codes = new string[,]
                //           {
                //{"invoice_isremoved","Y" }
                //          };
                //        string[,] whcos = new string[,]
                //           {
                //{"invoice_ecf_gid",invoice.ToString() },
                //{"invoice_gid",ecfgid },
                //          };
                //        string tname = "iem_trn_tinvoice";

                //        string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                //        string[,] codesc = new string[,]
                //           {
                //{"ecfcreditline_isremoved","Y" }
                //          };
                //        string[,] whcosc = new string[,]
                //           {
                //{"ecfcreditline_invoice_gid",invoice.ToString() },
                //{"ecfcreditline_ecf_gid",ecfgid },
                //          };
                //        string tnamec = "iem_trn_tecfcreditline";

                //        string insertcommendc = objCommonIUD.UpdateCommon(codesc, whcosc, tnamec);

                //        string[,] codesd = new string[,]
                //           {
                //{"ecfdebitline_isremoved","Y" }
                //          };
                //        string[,] whcosd = new string[,]
                //           {
                //{"ecfdebitline_ecf_gid",invoice.ToString() },
                //{"ecfdebitline_invoice_gid",ecfgid },
                //          };
                //        string tnamed = "iem_trn_tecfdebitline";

                //        string insertcommendd = objCommonIUD.UpdateCommon(codesd, whcosd, tnamed);

                GetConnection();
                //string str = " delete from  iem_trn_tinvoice  where invoice_ecf_gid='" + ecfgid + "' and invoice_gid='" + invoice + "'";
                //cmd = new SqlCommand(str, con);
                //cmd.CommandType = CommandType.Text;
                //cmd.ExecuteNonQuery();
                //GetConnection();
                //string strd = " delete from   iem_trn_tecfdebitline  where ecfdebitline_ecf_gid='" + ecfgid + "' and ecfdebitline_invoice_gid='" + invoice + "'";
                //cmd = new SqlCommand(strd, con);
                //cmd.CommandType = CommandType.Text;
                //cmd.ExecuteNonQuery();
                //GetConnection();
                //string strc = " delete from   iem_trn_tecfcreditline  where ecfcreditline_ecf_gid='" + ecfgid + "' and ecfcreditline_invoice_gid='" + invoice + "'";
                //cmd = new SqlCommand(strc, con);
                //cmd.CommandType = CommandType.Text;
                //cmd.ExecuteNonQuery();

                //string strcpo = " delete from   iem_trn_tinvoicepo  where  invoicepo_invoice_gid='" + invoice + "'";
                //cmd = new SqlCommand(strc, con);
                //cmd.CommandType = CommandType.Text;
                //cmd.ExecuteNonQuery();

                //string strcpoitem = " delete from   iem_trn_tinvoicepoitem  where  invoicepoitem_invoice_gid='" + invoice + "'";
                //cmd = new SqlCommand(strcpoitem, con);
                //cmd.CommandType = CommandType.Text;
                //cmd.ExecuteNonQuery();

                string insertcommendd = "Success";
                return insertcommendd;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetSupplierGID(string Suppliercode)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_supplierdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = Suppliercode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdetailsbycode";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["supplierheader_name"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }



        public string GetPoMappingExists(string ecfgid)
        {
            string Emp_Msg = "Y";
            int pocount;
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKPO";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        pocount = Convert.ToInt32(dt.Rows[0]["pocount"].ToString());

                        if (pocount == 0)
                        {
                            Emp_Msg = "N";
                            i = dt.Rows.Count + 1;
                        }
                    }


                }
                //else
                //{
                //    Emp_Msg = "N";
                //}
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }


        public string Getbebitlineamt(string ecfgid, string invoicegid)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKDEBITAMT";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["ecfdebitline_amount"].ToString());
                    if (Emp_Msg == "")
                    {
                        Emp_Msg = "0";
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Getinvtaxamt(string ecfgid, string invoicegid)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKTAXAMT";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["invoicetax_amount"].ToString());
                    if (Emp_Msg == "")
                    {
                        Emp_Msg = "0";
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Getpomappedamt(string ecfgid, string invoicegid)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKPOMAPEDAMT";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["invoicepo_mapped_amount"].ToString());
                    if (Emp_Msg == "")
                    {
                        Emp_Msg = "0";
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Gettaxmapedamt(string ecfgid, string invoicegid)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKTAXEDAMT";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["invoicetax_amount"].ToString());
                    if (Emp_Msg == "")
                    {
                        Emp_Msg = "0";
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Getemployeebrach(string empgid)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = empgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["employee_branch_gid"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        //public string DeleteSupppers(int id, string ecfgid)
        //{
        //    string Emp_Msg = "";
        //    try
        //    {
        //        string[,] codes = new string[,]
        //                   {
        //        {"invoice_isremoved","Y" }
        //                  };
        //        string[,] whcos = new string[,]
        //                   {
        //        {"invoice_ecf_gid",ecfgid.ToString() },
        //        {"invoice_gid",id.ToString() },
        //                  };
        //        string tname = "iem_trn_tinvoice";

        //        string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

        //        string[,] codes1 = new string[,]
        //                   {
        //        {"ecfdebitline_isremoved","Y" }
        //                  };
        //        string[,] whcos1 = new string[,]
        //                   {
        //        {"ecfdebitline_ecf_gid",ecfgid.ToString() },
        //        {"ecfdebitline_invoice_gid",id.ToString() },
        //                  };
        //        string tname1 = "iem_trn_tecfdebitline";

        //        string insertcommendRCM = objCommonIUD.UpdateCommon(codes1, whcos1, tname1);

        //        string[,] codesRCM = new string[,]
        //                   {
        //        {"debitrcm_isremoved","Y" }
        //                  };
        //        string[,] whcosRCM = new string[,]
        //                   {
        //        {"debitrcm_ecf_gid",ecfgid.ToString() },
        //        {"debitrcm_invoice_gid",id.ToString() },
        //                  };
        //        string tnameRCM = "iem_trn_tecfdebitlinercm";

        //        string insertcommend1 = objCommonIUD.UpdateCommon(codesRCM, whcosRCM, tnameRCM);

        //        string[,] codes2 = new string[,]
        //                   {
        //        {"ecfcreditline_isremoved","Y" }
        //                  };
        //        string[,] whcos2 = new string[,]
        //                   {
        //        {"ecfcreditline_ecf_gid",ecfgid.ToString() },
        //        {"ecfcreditline_invoice_gid",id.ToString() },
        //                  };
        //        string tname2 = "iem_trn_tecfcreditline";

        //        insertcommend1 = objCommonIUD.UpdateCommon(codes2, whcos2, tname2);


        //        string[,] codes3 = new string[,]
        //                   {
        //        {"invoicepo_isremoved","Y" }
        //                  };
        //        string[,] whcos3 = new string[,]
        //                   {
        //        {"invoicepo_invoice_gid",id.ToString() },
        //                  };
        //        string tname3 = "iem_trn_tinvoicepo";

        //        insertcommend1 = objCommonIUD.UpdateCommon(codes3, whcos3, tname3);

        //        string[,] codes4 = new string[,]
        //                   {
        //        {"invoicepoitem_isremoved","Y" }
        //                  };
        //        string[,] whcos4 = new string[,]
        //                   {
        //        {"invoicepoitem_invoice_gid",id.ToString() },
        //                  };
        //        string tname4 = "iem_trn_tinvoicepoitem";

        //        insertcommend1 = objCommonIUD.UpdateCommon(codes4, whcos4, tname4);

        //        string[,] codesinvatt = new string[,]
        //                   {
        //        {"attachment_isremoved","Y" }
        //                  };
        //        string[,] whcosinvatt = new string[,]
        //                   {
        //        {"attachment_ref_gid",ecfgid.ToString() },
        //        {"attachment_invoice_gid",id.ToString() },
        //        {"attachment_ref_flag","1"},
        //                  };
        //        string tnameinvatt = "iem_trn_tattachment";

        //        string insertcommendinvatt = objCommonIUD.UpdateCommon(codesinvatt, whcosinvatt, tnameinvatt);

        //        string[,] codes55 = new string[,]
        //                   {
        //        {"invoicepogrn_isremoved","Y" }
        //                  };
        //        string[,] whcos55 = new string[,]
        //                   {
        //        {"invoicepogrn_invoice_gid",id.ToString() },
        //                  };
        //        string tname55 = "iem_trn_tinvoicepogrn";

        //        insertcommend1 = objCommonIUD.UpdateCommon(codes55, whcos55, tname55);


        //        string[,] codestax = new string[,]
        //           {
        //{"invoicetax_isremoved", "Y"}
        //           };
        //        string[,] whoretax = new string[,]
        //           {
        //{"invoicetax_invoice_gid",id.ToString() }    
        //           };
        //        string tnametax = "iem_trn_tinvoicetaxtemp";

        //        string insertcommendtax = objCommonIUD.UpdateCommon(codestax, whoretax, tnametax);


        //        return Emp_Msg;
        //    }
        //    catch (Exception ex)
        //    {
        //        objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
        //        return "";
        //    }
        //    finally
        //    {
        //        con.Close();
        //        da.Dispose();
        //    }
        //}

        public string DeleteSupppers(int id, string ecfgid)
        {
            string Emp_Msg = "";
            try
            {

                DataTable dtdebit = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_set_deleteinvoice", con); //Ramya created SP - converted inline to SP
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = id.ToString();
                cmd.Parameters.Add("@module", SqlDbType.VarChar).Value = "eow";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdebit);
                if (dtdebit.Rows.Count > 0)
                {
                    Emp_Msg = dtdebit.Rows[0]["Msg"].ToString();

                    string clear = dtdebit.Rows[0]["Clear"].ToString();
                    if (Emp_Msg.ToLower() == "success" && clear.ToUpper() == "TRUE")
                    {
                        Emp_Msg = "Success";
                    }
                }

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string ExcelSupplierPayment(DataTable DataTable, string ecfgid, string invoicegid)
        {
            try
            {
                string Emp_Msg = "", HSN_GID = "";
                string Natureid = "";
                string Expenseid = "";
                string SubCatid = "";
                DataTable err1 = new DataTable();
                err1 = (DataTable)DataTable;
                for (int i = 0; i < err1.Rows.Count; i++)
                {
                    if (err1.Rows[i]["Amount"].ToString() != "")
                    {
                        DataSet dt = new DataSet();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_naturecatsupcat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@nature_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Nature of Expenses"].ToString();
                        cmd.Parameters.Add("@cat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Main Category"].ToString();
                        cmd.Parameters.Add("@supcat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Sub Category"].ToString();
                        cmd.Parameters.Add("@HSNCode", SqlDbType.VarChar).Value = err1.Rows[i]["HSN Code"].ToString();
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetdescriptioncode";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dt);
                        if (dt.Tables[0].Rows.Count > 0)
                        {
                            Emp_Msg = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gl_no"].ToString());
                            Expenseid = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gid"].ToString());
                        }
                        if (dt.Tables[1].Rows.Count > 0)
                        {
                            SubCatid = Convert.ToString(dt.Tables[1].Rows[0]["expsubcat_gid"].ToString());
                        }
                        if (dt.Tables[2].Rows.Count > 0)
                        {
                            Natureid = Convert.ToString(dt.Tables[2].Rows[0]["expnature_gid"].ToString());
                        }
                        //Ramya
                        if (dt.Tables[4].Rows.Count > 0)
                        {
                            HSN_GID = Convert.ToString(dt.Tables[4].Rows[0]["hsn_gid"].ToString());
                        }
                        //Ramya Commentted

                        //                string[,] codest = new string[,]
                        //           {
                        //{"ecfdebitline_ecf_gid",ecfgid },
                        //{"ecfdebitline_invoice_gid", invoicegid},
                        //{"ecfdebitline_expnature_gid",Natureid},
                        //{"ecfdebitline_expcat_gid", Expenseid},
                        //{"ecfdebitline_expsubcat_gid",SubCatid },   
                        //{"ecfdebitline_gl_no", Emp_Msg},
                        //{"ecfdebitline_desc",objCmnFunctions.Getreplacesinglequotes(err1.Rows[i]["Description"].ToString().ToString())},       
                        //{"ecfdebitline_fc_code",err1.Rows[i]["Function Code"].ToString() },
                        //{"ecfdebitline_cc_code", err1.Rows[i]["Cost Code"].ToString()},
                        //{"ecfdebitline_product_code", err1.Rows[i]["Product Code"].ToString()},
                        //{"ecfdebitline_ou_code",err1.Rows[i]["OU Code"].ToString() },
                        //{"ecfdebitline_amount", err1.Rows[i]["Amount"].ToString()}       
                        //          };
                        //                string tnamet = "iem_trn_tecfdebitline";

                        //                string insertcommendt = objCommonIUD.InsertCommon(codest, tnamet);
                        //            }
                        //        }
                        //        Emp_Msg = "Success";
                        //        return Emp_Msg;

                        //Ramya Added  
                        DataTable dtdebit = new DataTable();

                        cmd = new SqlCommand("pr_eow_supplierdebitline", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        //cmd.Parameters.AddWithValue("@debitline_ecf_gid",ecfgid);
                        cmd.Parameters.Add("@debitline_ecf_gid", SqlDbType.Int).Value = ecfgid;
                        cmd.Parameters.Add("@debitline_invoice_gid", SqlDbType.Int).Value = invoicegid;
                        cmd.Parameters.Add("@debitline_expnature_gid", SqlDbType.Int).Value = Natureid;
                        cmd.Parameters.Add("@debitline_expcat_gid", SqlDbType.Int).Value = Expenseid;
                        cmd.Parameters.Add("@debitline_expsubcat_gid", SqlDbType.Int).Value = SubCatid;
                        cmd.Parameters.Add("@debitline_gl_no", SqlDbType.VarChar).Value = Emp_Msg;
                        //cmd.Parameters.Add("@debitline_period_from", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(EmployeeeExpense.ClaimMonth));
                        cmd.Parameters.Add("@debitline_fc_code", SqlDbType.VarChar).Value = err1.Rows[i]["Function Code"].ToString();
                        cmd.Parameters.Add("@debitline_cc_code", SqlDbType.VarChar).Value = err1.Rows[i]["Cost Code"].ToString();
                        cmd.Parameters.Add("@debitline_product_code", SqlDbType.VarChar).Value = err1.Rows[i]["Product Code"].ToString();
                        cmd.Parameters.Add("@debitline_ou_code", SqlDbType.VarChar).Value = err1.Rows[i]["OU Code"].ToString();
                        cmd.Parameters.Add("@debitline_desc", SqlDbType.VarChar).Value = "";
                        cmd.Parameters.Add("@debitline_amount", SqlDbType.Decimal).Value = err1.Rows[i]["Amount"].ToString();
                        cmd.Parameters.Add("@debitline_Hsn_gid", SqlDbType.Int).Value = Convert.ToInt32(HSN_GID);
                        cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = "";
                        //cmd.Parameters.Add("@empid", SqlDbType.Int).Value = Convert.ToInt32(empgid);
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "insert";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdebit);
                        if (dtdebit.Rows.Count > 0)
                        {
                            Emp_Msg = dtdebit.Rows[0]["Msg"].ToString();

                            string clear = dtdebit.Rows[0]["Clear"].ToString();
                            if (Emp_Msg.ToLower() == "success" && clear.ToUpper() == "TRUE")
                            {
                                Emp_Msg = "Success";
                            }

                            try
                            {
                                //Split Amount update - GST_Phase3_2 - Ramya
                                GetConnection();
                                DataTable dtSplit = new DataTable();
                                cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtSplit);
                            }
                            catch (Exception ex)
                            {

                            }

                        }
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<Tax> GetTax()
        {
            List<Tax> objNatureofExpenses = new List<Tax>();
            try
            {
                Tax objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxs";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                objNatureofExpenses.Add(new Tax { TaxId = 0, TaxName = "-- Select --", });
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new Tax();
                    objModel.TaxId = Convert.ToInt32(dt.Rows[i]["tax_gid"].ToString());
                    objModel.TaxName = Convert.ToString(dt.Rows[i]["tax_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<Taxsubtype> Gettaxsubtype(sinvotax taxid)
        {
            List<Taxsubtype> objparenttax = new List<Taxsubtype>();
            try
            {
                Taxsubtype objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = taxid.Intax_Rate;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxsubtype";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                objparenttax.Add(new Taxsubtype { TaxsubtypeId = 0, TaxsubtypeName = "-- Select --", });
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new Taxsubtype();
                    objModel.TaxsubtypeId = Convert.ToInt32(dt.Rows[i]["taxsubtype_gid"].ToString());
                    objModel.TaxsubtypeName = Convert.ToString(dt.Rows[i]["taxsubtype_name"].ToString());
                    objparenttax.Add(objModel);
                }
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<sinvotax> GetRate(sinvotax taxid)
        {
            List<sinvotax> objparenttax = new List<sinvotax>();
            try
            {
                sinvotax objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@taxdate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(taxid.Intax_Tax);
                cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = taxid.Intax_Rate;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxrates";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new sinvotax();
                    objModel.Intax_Rate = Convert.ToString(dt.Rows[i]["taxrate_rate"].ToString());
                    objModel.Intax_Tax = Convert.ToString(dt.Rows[i]["taxrate_change_flag"].ToString());
                    objparenttax.Add(objModel);
                }
                return objparenttax;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objparenttax;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<sinvotax> GetSupplierTax(string invoicegid)
        {
            List<sinvotax> objExpense = new List<sinvotax>();
            try
            {
                sinvotax objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicetax";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new sinvotax();
                        objModel.TaxgId = Convert.ToInt32(dt.Rows[i]["invoicetax_gid"].ToString());
                        //   objModel.TaxSubTypeID = Convert.ToInt32(dt.Rows[i]["taxsubtype_gid"].ToString());
                        objModel.TaxSubTypeName = string.IsNullOrEmpty(dt.Rows[i]["taxsubtype_name"].ToString()) ? "" : dt.Rows[i]["taxsubtype_name"].ToString();
                        objModel.Intax_Tax = string.IsNullOrEmpty(dt.Rows[i]["tax_name"].ToString()) ? "" : dt.Rows[i]["tax_name"].ToString();
                        objModel.Intax_Rate = Convert.ToString(dt.Rows[i]["invoicetax_rate"].ToString());
                        objModel.Intax_Taxableamt = Convert.ToString(dt.Rows[i]["invoicetax_taxable_amount"].ToString());
                        objModel.Intax_Taxamt = Convert.ToString(dt.Rows[i]["invoicetax_amount"].ToString());
                        objExpense.Add(objModel);
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Gettaxaval(string taxgidname, string taxgid, string supgid)
        {
            string Emp_Msg = "";
            string Servicetax = Convert.ToString(ConfigurationManager.AppSettings["Servicetax"].ToString());
            try
            {
                if (taxgidname.ToString() == Servicetax)
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = supgid;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = taxgid.ToString();
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getsuppiertaxreg";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = "Yes";
                    }
                    else
                    {
                        Emp_Msg = "No";
                    }
                }
                else
                {
                    Emp_Msg = "Yes";
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertsupplierTaxCreate(sinvotax EmployeeeExpense, string invoicegid, string empgid, string supgid)
        {
            string Emp_nature = "0";
            string Emp_cat = "0";
            string Emp_subcat = "0";

            string Emp_Msg = "";
            string Emp_Msgl = "0";
            string ecfgid = HttpContext.Current.Session["EcfGid"].ToString();
            string Servicetax = Convert.ToString(ConfigurationManager.AppSettings["Servicetax"].ToString());
            try
            {
                if (EmployeeeExpense.Intax_Taxid.ToString() == Servicetax)
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = supgid;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = EmployeeeExpense.Intax_Tax.ToString();
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getsuppiertaxreg";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count == 0)
                    {
                        Emp_Msg = "Regno";
                        return Emp_Msg;
                    }
                }

                GetConnection();
                DataSet dtgl = new DataSet();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = EmployeeeExpense.TaxSubTypeID.ToString();
                cmd.Parameters.Add("@currency_gid", SqlDbType.VarChar).Value = empgid.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxdebitadd";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtgl);
                if (dtgl.Tables[0].Rows.Count > 0)
                {
                    Emp_Msgl = dtgl.Tables[0].Rows[0]["taxrate_gl_no"].ToString();
                    if (Emp_Msgl == "")
                    {
                        Emp_Msgl = "123456";
                    }

                    //else
                    //{
                    //    Emp_Msgl = "123456";
                    //}
                    if (dtgl.Tables[2].Rows.Count >= 0)
                    {
                        Emp_nature = dtgl.Tables[2].Rows[0]["taxsubtype_expnature_gid"].ToString();
                        Emp_cat = dtgl.Tables[2].Rows[0]["taxsubtype_expcat_gid"].ToString();
                        Emp_subcat = dtgl.Tables[2].Rows[0]["taxsubtype_expsubcat_gid"].ToString();
                    }


                    string[,] codes = new string[,]
	               {
	    {"invoicetax_invoice_gid", invoicegid},
        {"invoicetax_tax_gid",EmployeeeExpense.Intax_Tax.ToString() },
	    {"invoicetax_taxsubtype_gid", EmployeeeExpense.TaxSubTypeID.ToString()},
        {"invoicetax_gl_no",Emp_Msgl },
	    {"invoicetax_rate_change", EmployeeeExpense.Intax_Change.ToString()},       
        {"invoicetax_rate",EmployeeeExpense.Intax_Rate.ToString() },
	    {"invoicetax_taxable_amount", EmployeeeExpense.Intax_Taxableamt.ToString()},
        {"invoicetax_amount", EmployeeeExpense.Intax_Taxamt.ToString()}
            
                  };
                    string tname = "iem_trn_tinvoicetax";

                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                    Emp_Msg = "Sucess";
                    return Emp_Msg;
                }
                else
                {
                    Emp_Msg = "Tax details GLNO not valid!";
                    return Emp_Msg;
                }

                //        if (insertcommend == "success")
                //        {
                //            string Emp_Msgid = "";
                //            GetConnection();
                //            DataSet dtglautoid = new DataSet();
                //            cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                //            cmd.CommandType = CommandType.StoredProcedure;
                //            cmd.Parameters.Add("@Invoice_gid", SqlDbType.VarChar).Value = invoicegid.ToString();
                //            cmd.Parameters.Add("@taxsub_gid", SqlDbType.VarChar).Value = EmployeeeExpense.TaxSubTypeID.ToString();
                //            cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = EmployeeeExpense.Intax_Tax.ToString();
                //            cmd.Parameters.Add("@currency_gid", SqlDbType.VarChar).Value = EmployeeeExpense.Intax_Taxamt.ToString();
                //            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxinvgis";
                //            da = new SqlDataAdapter(cmd);
                //            da.Fill(dtglautoid);
                //            if (dtglautoid.Tables[0].Rows.Count >= 0)
                //            {
                //                int Invoicesertaxgid = Convert.ToInt32(ConfigurationManager.AppSettings["Invoicesertaxgid"].ToString());
                //                string Emp_Msglgid = dtglautoid.Tables[0].Rows[0]["invoicetax_gid"].ToString();

                //                string[,] codest = new string[,]
                //           {
                //{"ecfdebitline_ecf_gid",ecfgid },
                //{"ecfdebitline_invoice_gid", invoicegid},
                //{"ecfdebitline_expnature_gid",Emp_nature},
                //{"ecfdebitline_expcat_gid", Emp_cat},
                //{"ecfdebitline_expsubcat_gid",Emp_subcat },
                //{"ecfdebitline_gl_no", Emp_Msgl },

                //{"ecfdebitline_ref_gid", Emp_Msglgid },
                //{"ecfdebitline_ref_Rid", Invoicesertaxgid.ToString() },

                //{"ecfdebitline_desc",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Intax_Taxid.ToString())},
                //{"ecfdebitline_fc_code",dtgl.Tables[1].Rows[0]["employee_fc_code"].ToString() },
                //{"ecfdebitline_cc_code", dtgl.Tables[1].Rows[0]["employee_cc_code"].ToString()},
                //{"ecfdebitline_product_code", dtgl.Tables[1].Rows[0]["employee_product_code"].ToString()},
                //{"ecfdebitline_ou_code",dtgl.Tables[1].Rows[0]["employee_ou_code"].ToString()},
                //{"ecfdebitline_amount", EmployeeeExpense.Intax_Taxamt.ToString()}       
                //          };
                //                string tnamet = "iem_trn_tecfdebitline";

                //                string insertcommendt = objCommonIUD.InsertCommon(codest, tnamet);
                //            }
                //        }

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string DeleteSupplideTax(int EmployeeeExpenseGID, string invoicegid)
        {
            string delant = "0";
            string Emp_Msgl = "0";
            string Emp_Msgltaxid = "0";
            string Emp_Msglsubtypeid = "0";
            try
            {

                string[,] codes = new string[,]
	               {
        {"invoicetax_isremoved","Y" }
                  };
                string[,] whcos = new string[,]
	               {
        {"invoicetax_gid",EmployeeeExpenseGID.ToString() },
        {"invoicetax_invoice_gid",invoicegid }
                  };
                string tname = "iem_trn_tinvoicetax";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                GetConnection();
                DataSet dtgl = new DataSet();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = EmployeeeExpenseGID.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxdebitadddeletenew";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtgl);
                if (dtgl.Tables[0].Rows.Count >= 0)
                {
                    Emp_Msgl = dtgl.Tables[0].Rows[0]["taxrate_gl_no"].ToString();

                    if (Emp_Msgl != "")
                    {
                        string[,] codesu = new string[,]
	               {
                    {"ecfdebitline_isremoved","Y" }
                              };
                        string[,] whcosu = new string[,]
	                           {
                    {"ecfdebitline_ecf_gid",HttpContext.Current.Session["EcfGid"].ToString().Trim() },
                    {"ecfdebitline_invoice_gid",HttpContext.Current.Session["invoiceGid"].ToString().Trim() },
                    {"ecfdebitline_gl_no",Emp_Msgl.ToString() }
                  };
                        string tnameu = "iem_trn_tecfdebitline";

                        insertcommend = objCommonIUD.UpdateCommon(codesu, whcosu, tnameu);
                    }
                }

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public IEnumerable<sinvotax> SelectSuppliertaxid(string invoiceid, int id)
        {
            List<sinvotax> objExpense = new List<sinvotax>();
            try
            {

                sinvotax objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicetaxbyid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new sinvotax();
                    objModel.Intax_Tax = Convert.ToString(string.IsNullOrEmpty(dt.Rows[i]["invoicetax_tax_gid"].ToString()) ? "0" : dt.Rows[i]["invoicetax_tax_gid"].ToString());
                    objModel.TaxSubTypeID = Convert.ToInt32(string.IsNullOrEmpty(dt.Rows[i]["invoicetax_taxsubtype_gid"].ToString()) ? "0" : dt.Rows[i]["invoicetax_taxsubtype_gid"].ToString());
                    objModel.Intax_Rate = Convert.ToString(dt.Rows[i]["invoicetax_rate"].ToString());
                    objModel.Intax_Change = Convert.ToString(dt.Rows[i]["invoicetax_rate_change"].ToString());
                    objModel.Intax_Taxableamt = Convert.ToString(dt.Rows[i]["invoicetax_taxable_amount"].ToString());
                    objModel.Intax_Taxamt = Convert.ToString(dt.Rows[i]["invoicetax_amount"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string updatesupplierTaxCreate(sinvotax EmployeeeExpense, string invoicegid, string gid, string supgid)
        {
            string Emp_nature = "0";
            string Emp_cat = "0";
            string Emp_subcat = "0";
            string Emp_Msg = "";
            string Emp_Msgl = "0";
            string Servicetax = Convert.ToString(ConfigurationManager.AppSettings["Servicetax"].ToString());
            try
            {
                if (EmployeeeExpense.Intax_Taxid.ToString() == Servicetax)
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = supgid;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = EmployeeeExpense.Intax_Tax.ToString();
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getsuppiertaxreg";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count == 0)
                    {
                        Emp_Msg = "Regno";
                        return Emp_Msg;
                    }
                }

                GetConnection();
                DataSet dtgl = new DataSet();
                cmd = new SqlCommand("pr_eow_com_gettaxrate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@tax_gid", SqlDbType.VarChar).Value = EmployeeeExpense.TaxSubTypeID.ToString();
                cmd.Parameters.Add("@currency_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxdebitadd";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtgl);
                if (dtgl.Tables[0].Rows.Count >= 0)
                {
                    Emp_Msgl = dtgl.Tables[0].Rows[0]["taxrate_gl_no"].ToString();
                    if (Emp_Msgl == "")
                    {
                        Emp_Msgl = "123456";
                    }
                }
                else
                {
                    Emp_Msgl = "123456";
                }
                if (dtgl.Tables[2].Rows.Count >= 0)
                {
                    Emp_nature = dtgl.Tables[2].Rows[0]["taxsubtype_expnature_gid"].ToString();
                    Emp_cat = dtgl.Tables[2].Rows[0]["taxsubtype_expcat_gid"].ToString();
                    Emp_subcat = dtgl.Tables[2].Rows[0]["taxsubtype_expsubcat_gid"].ToString();
                }

                string[,] codes = new string[,]
	               {
        {"invoicetax_tax_gid",EmployeeeExpense.Intax_Tax.ToString() },
	    {"invoicetax_taxsubtype_gid", EmployeeeExpense.TaxSubTypeID.ToString() },
        {"invoicetax_gl_no",Emp_Msgl },
	    {"invoicetax_rate_change", EmployeeeExpense.Intax_Change.ToString()},       
        {"invoicetax_rate",EmployeeeExpense.Intax_Rate.ToString() },
	    {"invoicetax_taxable_amount", EmployeeeExpense.Intax_Taxableamt.ToString()},
        {"invoicetax_amount", EmployeeeExpense.Intax_Taxamt.ToString()}
            
                  };
                string[,] whore = new string[,]
	               {
	    {"invoicetax_invoice_gid", invoicegid},
        {"invoicetax_gid",gid.ToString() }                
                  };
                string tname = "iem_trn_tinvoicetax";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whore, tname);
                Emp_Msg = insertcommend.ToString();

                //string[,] codesu = new string[,]
                //   {
                //   {"ecfdebitline_amount",EmployeeeExpense.Intax_Taxamt.ToString()},
                //   {"ecfdebitline_expnature_gid",Emp_nature},
                //   {"ecfdebitline_expcat_gid", Emp_cat},
                //   {"ecfdebitline_expsubcat_gid",Emp_subcat },
                //   {"ecfdebitline_gl_no", Emp_Msgl },
                //   {"ecfdebitline_desc",objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.Intax_Taxid.ToString())}
                //  };
                //string[,] whcosu = new string[,]
                //               {
                //    {"ecfdebitline_ecf_gid",HttpContext.Current.Session["EcfGid"].ToString().Trim() },
                //    {"ecfdebitline_invoice_gid",HttpContext.Current.Session["invoiceGid"].ToString().Trim() },
                //    {"ecfdebitline_gl_no",Emp_Msgl.ToString() }
                //  };
                //string tnameu = "iem_trn_tecfdebitline";

                //insertcommend = objCommonIUD.UpdateCommon(codesu, whcosu, tnameu);

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string GetSupplieruploaadexcel(DataTable DataTable, string ecfgid, string ecfdate)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(con))
                {
                    bulkCopy.ColumnMappings.Add("SNo", "dsaexcelupload_sno");
                    bulkCopy.ColumnMappings.Add("ecfgid", "dsaexcelupload_ecf_gid");
                    bulkCopy.ColumnMappings.Add("[Supplier Code]", "dsaexcelupload_supplier_code");
                    bulkCopy.ColumnMappings.Add("[Supplier Name]", "dsaexcelupload_supplier_name");
                    bulkCopy.ColumnMappings.Add("InvoiceDatenew", "dsaexcelupload_invoice_date");
                    bulkCopy.ColumnMappings.Add("Description", "dsaexcelupload_description");
                    bulkCopy.ColumnMappings.Add("Amount", "dsaexcelupload_amount");
                    bulkCopy.ColumnMappings.Add("Provision", "dsaexcelupload_provision");
                    bulkCopy.ColumnMappings.Add("[Nature of Expenses]", "dsaexcelupload_natureofexpenses");
                    bulkCopy.ColumnMappings.Add("[Main Category]", "dsaexcelupload_main_category");
                    bulkCopy.ColumnMappings.Add("[Sub Category]", "dsaexcelupload_sub_category");
                    bulkCopy.ColumnMappings.Add("[Function Code]", "dsaexcelupload_function_code");
                    bulkCopy.ColumnMappings.Add("[Cost Code]", "dsaexcelupload_cost_code");
                    bulkCopy.ColumnMappings.Add("[Product Code]", "dsaexcelupload_product_code");
                    bulkCopy.ColumnMappings.Add("[OU Code]", "dsaexcelupload_ou_code");
                    //Ramya Added DSA GST & RCM 12 Nov 19
                    //bulkCopy.ColumnMappings.Add("[Invoice No]", "dsaexcelupload_sub_category");
                    bulkCopy.ColumnMappings.Add("[Provider Location]", "dsaexcelupload_invoice_provider_location");
                    bulkCopy.ColumnMappings.Add("[Receiver Location]", "dsaexcelupload_invoice_receiver_location");
                    bulkCopy.ColumnMappings.Add("[GST Y/N]", "dsaexcelupload_invoice_gst_charged");
                    bulkCopy.ColumnMappings.Add("[HSN Code]", "dsaexcelupload_hsn_code");
                    //bulkCopy.ColumnMappings.Add("[RCM Y/N]", "dsaexcelupload_debitline_rcmflag");
                    //Ramya

                    bulkCopy.BatchSize = 10000;
                    bulkCopy.BulkCopyTimeout = int.MaxValue;
                    bulkCopy.DestinationTableName = "iem_trn_tdsaexcelupload";
                    bulkCopy.WriteToServer(DataTable.CreateDataReader());
                }

                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_tdsauploadfile", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "FileUpload";
                int data = cmd.ExecuteNonQuery();
                Emp_Msg = "Success";

                return Emp_Msg;

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetSupplieruploaad(DataTable DataTable, string ecfgid, string ecfdate, Hashtable empchck, Hashtable empchckou)
        {
            try
            {
                string invoice_gid = "";
                string Emp_Msg = "";
                string Natureid = "";
                string Expenseid = "";
                string SubCatid = "";
                string Provision = "";
                string suppliergids = "";

                for (int tr = 0; tr < empchck.Count; tr++)
                {
                    for (int trou = 0; trou < empchckou.Count; trou++)
                    {
                        DataTable err1 = new DataTable();
                        err1 = (DataTable)DataTable;
                        decimal tolrowinvoiceamt = 0;
                        DataTable uniqueemp = new DataTable();
                        string supliercodf = empchck[tr].ToString();
                        string supliercodfou = empchckou[trou].ToString();
                        err1.DefaultView.RowFilter = "Convert([Supplier Code], 'System.String') ='" + supliercodf + "' and Convert([OU Code], 'System.String') ='" + supliercodfou + "'";
                        uniqueemp = err1.DefaultView.ToTable();

                        if (uniqueemp.Rows.Count > 0)
                        {
                            for (int i = 0; i < uniqueemp.Rows.Count; i++)
                            {
                                if (tolrowinvoiceamt == 0)
                                {
                                    tolrowinvoiceamt = Convert.ToDecimal(uniqueemp.Rows[i]["Amount"].ToString().Trim());
                                }
                                else
                                {
                                    tolrowinvoiceamt = tolrowinvoiceamt + Convert.ToDecimal(uniqueemp.Rows[i]["Amount"].ToString().Trim());
                                }
                            }

                            string supcoede = supliercodf.ToString();
                            string invoicedate = uniqueemp.Rows[0]["Invoice Date"].ToString().Trim();

                            string[] splitsdate = invoicedate.Split('-');
                            string[] splitsdatesec = invoicedate.Split('/');
                            if (splitsdate.Length > 1)
                            {
                                invoicedate = invoicedate.ToString();
                            }
                            else if (splitsdatesec.Length > 1)
                            {
                                invoicedate = invoicedate.ToString();
                            }
                            else
                            {
                                double d = double.Parse(invoicedate);
                                DateTime conv = DateTime.FromOADate(d);
                                invoicedate = conv.ToString();
                            }
                            DateTime invoiced = objCmnFunctions.convertoDateTime(invoicedate);
                            string invoicedno = supcoede + invoiced.ToString("MMM").ToUpper() + invoiced.ToString("yy");
                            DataTable dtmode = new DataTable();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_supplierdetails", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = empchck[tr].ToString().Trim();
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdetailsbyid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtmode);
                            if (dtmode.Rows.Count > 0)
                            {
                                suppliergids = Convert.ToString(dtmode.Rows[0]["supplierheader_gid"].ToString().Trim());
                                if (uniqueemp.Rows[0]["Provision"].ToString() == "No" || uniqueemp.Rows[0]["Provision"].ToString() == "N" || uniqueemp.Rows[0]["Provision"].ToString() == "no")
                                {
                                    Provision = "N";
                                }
                                if (uniqueemp.Rows[0]["Provision"].ToString() == "Yes" || uniqueemp.Rows[0]["Provision"].ToString() == "Y" || uniqueemp.Rows[0]["Provision"].ToString() == "yes")
                                {
                                    Provision = "Y";
                                }

                                string[,] codesi = new string[,]
	               {
        {"invoice_ecf_gid",ecfgid},
	    {"invoice_supplier_gid", Convert.ToString(dtmode.Rows[0]["supplierheader_gid"].ToString().Trim()) },
        {"invoice_type","S" },
	    {"invoice_date", objCmnFunctions.convertoDateTimeString(invoicedate).ToString()},
        {"invoice_service_month",objCmnFunctions.convertoDateTimeString(invoicedate).ToString()},
	    {"invoice_amount", tolrowinvoiceamt.ToString()},
        {"invoice_wotax_amount", tolrowinvoiceamt.ToString() },
	    {"invoice_dedup_no", objCmnFunctions.Getspecialcharacters(invoicedno)},
        {"invoice_desc", objCmnFunctions.Getreplacesinglequotes(uniqueemp.Rows[0]["Description"].ToString().Trim())},
        {"invoice_no", invoicedno},
        {"invoice_provision_flag", Provision.Trim()},
        {"invoice_dedup_status","0" }    
                  };
                                string tnamei = "iem_trn_tinvoice";

                                string insertcommendi = objCommonIUD.InsertCommon(codesi, tnamei);

                                DataTable dtup = new DataTable();
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicemaxgiduseecf";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtup);
                                if (dtup.Rows.Count > 0)
                                {
                                    invoice_gid = Convert.ToString(dtup.Rows[0]["invoice_gid"].ToString().Trim());
                                }

                                for (int trdbt = 0; trdbt < uniqueemp.Rows.Count; trdbt++)
                                {
                                    DataSet dt = new DataSet();
                                    GetConnection();
                                    cmd = new SqlCommand("pr_eow_com_naturecatsupcat", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@nature_gid", SqlDbType.VarChar).Value = uniqueemp.Rows[trdbt]["Nature of Expenses"].ToString().Trim();
                                    cmd.Parameters.Add("@cat_gid", SqlDbType.VarChar).Value = uniqueemp.Rows[trdbt]["Main Category"].ToString().Trim();
                                    cmd.Parameters.Add("@supcat_gid", SqlDbType.VarChar).Value = uniqueemp.Rows[trdbt]["Sub Category"].ToString().Trim();
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetdescriptioncode";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dt);
                                    if (dt.Tables[0].Rows.Count > 0)
                                    {
                                        Emp_Msg = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gl_no"].ToString().Trim());
                                        Expenseid = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gid"].ToString().Trim());
                                    }
                                    if (dt.Tables[1].Rows.Count > 0)
                                    {
                                        SubCatid = Convert.ToString(dt.Tables[1].Rows[0]["expsubcat_gid"].ToString().Trim());
                                    }
                                    if (dt.Tables[2].Rows.Count > 0)
                                    {
                                        Natureid = Convert.ToString(dt.Tables[2].Rows[0]["expnature_gid"].ToString().Trim());
                                    }

                                    string[,] codest = new string[,]
	               {
        {"ecfdebitline_ecf_gid",ecfgid },
	    {"ecfdebitline_invoice_gid", invoice_gid},
        {"ecfdebitline_expnature_gid",Natureid},
	    {"ecfdebitline_expcat_gid", Expenseid},
        {"ecfdebitline_expsubcat_gid",SubCatid },
 
        {"ecfdebitline_gl_no", Emp_Msg},

        {"ecfdebitline_desc",objCmnFunctions.Getreplacesinglequotes(uniqueemp.Rows[trdbt]["Description"].ToString().Trim())},
        {"ecfdebitline_fc_code",uniqueemp.Rows[trdbt]["Function Code"].ToString().Trim() },
	    {"ecfdebitline_cc_code", uniqueemp.Rows[trdbt]["Cost Code"].ToString().Trim()},
        {"ecfdebitline_product_code", uniqueemp.Rows[trdbt]["Product Code"].ToString().Trim()},
        {"ecfdebitline_ou_code",uniqueemp.Rows[trdbt]["OU Code"].ToString().Trim() },
	    {"ecfdebitline_amount", uniqueemp.Rows[trdbt]["Amount"].ToString().Trim()}       
                  };
                                    string tnamet = "iem_trn_tecfdebitline";

                                    string insertcommendt = objCommonIUD.InsertCommon(codest, tnamet);
                                }

                                string bankgid = "0";
                                string bankgnno = "123";
                                DataTable dtdatds = new DataTable();
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergids;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtdatds);
                                if (dtdatds.Rows.Count > 0)
                                {
                                    GetConnection();
                                    DataTable dtpaybank = new DataTable();
                                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = suppliergids;
                                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dtdatds.Rows[0]["paymode_code"].ToString());
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtpaybank);
                                    if (dtpaybank.Rows.Count > 0)
                                    {
                                        if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                        {
                                            bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                        }
                                        if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                        {
                                            bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                        }
                                    }

                                    string[,] codes = new string[,]
	                       {       
                            {"ecfcreditline_ecf_gid",ecfgid },
	                        {"ecfcreditline_invoice_gid", invoice_gid},
                            {"ecfcreditline_pay_mode",Convert.ToString(dtdatds.Rows[0]["paymode_code"].ToString())},    
	                        {"ecfcreditline_ref_no", Convert.ToString(dtdatds.Rows[0]["payment_accountno"].ToString())},
                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtdatds.Rows[0]["payment_beneficiaryname"].ToString())) },
	                        {"ecfcreditline_bank_gid", bankgid},
                            {"ecfcreditline_ifsc_code",Convert.ToString(dtdatds.Rows[0]["payment_ifsccode"].ToString())},
	                        {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount",tolrowinvoiceamt.ToString() }      
                          };

                                    string tname = "iem_trn_tecfcreditline";

                                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                                }
                                else
                                {
                                    DataTable dtdatd = new DataTable();
                                    GetConnection();
                                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suppliergids;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtdatd);
                                    if (dtdatd.Rows.Count > 0)
                                    {
                                        GetConnection();
                                        DataTable dtpaybank = new DataTable();
                                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = suppliergids;
                                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString());
                                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                                        da = new SqlDataAdapter(cmd);
                                        da.Fill(dtpaybank);
                                        if (dtpaybank.Rows.Count > 0)
                                        {
                                            if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                            {
                                                bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                            }
                                            if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                            {
                                                bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                            }
                                        }
                                        string[,] codes = new string[,]
	                       {       
                            {"ecfcreditline_ecf_gid",ecfgid },
	                        {"ecfcreditline_invoice_gid", invoice_gid},
                            {"ecfcreditline_pay_mode",Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString())},    
	                        {"ecfcreditline_ref_no", Convert.ToString(dtdatd.Rows[0]["payment_accountno"].ToString())},
                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtdatd.Rows[0]["payment_beneficiaryname"].ToString())) },
	                        {"ecfcreditline_bank_gid", bankgid},
                            {"ecfcreditline_ifsc_code",Convert.ToString(dtdatd.Rows[0]["payment_ifsccode"].ToString())},
	                        {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount",tolrowinvoiceamt.ToString() }      
                          };

                                        string tname = "iem_trn_tecfcreditline";

                                        string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                                    }
                                    else
                                    {
                                        GetConnection();
                                        DataTable dtpaybank = new DataTable();
                                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = suppliergids;
                                        cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = "CHQ";
                                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetpaybankgid";
                                        da = new SqlDataAdapter(cmd);
                                        da.Fill(dtpaybank);
                                        if (dtpaybank.Rows.Count > 0)
                                        {
                                            if (Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString()) != "")
                                            {
                                                bankgid = Convert.ToString(dtpaybank.Rows[0]["bank_gid"].ToString());
                                            }
                                            if (Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString()) != "")
                                            {
                                                bankgnno = Convert.ToString(dtpaybank.Rows[0]["bankgl_no"].ToString());
                                            }
                                        }

                                        string[,] codesc = new string[,]
                                       {
                            {"ecfcreditline_ecf_gid",ecfgid },
                            {"ecfcreditline_invoice_gid", invoice_gid},
                            {"ecfcreditline_pay_mode","CHQ" },
                            {"ecfcreditline_ref_no", ""},
                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Convert.ToString(dtmode.Rows[0]["supplierheader_name"].ToString().Trim())) },
                            {"ecfcreditline_bank_gid",bankgid},
                            {"ecfcreditline_ifsc_code",""},
                            {"ecfcreditline_gl_no", bankgnno},
                            {"ecfcreditline_desc", "Supplier Account"},
                            {"ecfcreditline_amount", tolrowinvoiceamt.ToString() }      
                                      };

                                        string tnamec = "iem_trn_tecfcreditline";

                                        string insertcommendc = objCommonIUD.InsertCommon(codesc, tnamec);
                                    }
                                }
                            }
                        }
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_SupplierModelgrid> GetSupplierexceldata(string ecfid, string traveltype)
        {
            List<EOW_SupplierModelgrid> objExpense = new List<EOW_SupplierModelgrid>();
            try
            {
                EOW_SupplierModelgrid objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@traveltype", SqlDbType.VarChar).Value = traveltype;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierexceldatadetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_SupplierModelgrid();
                    objModel.SupplierCode = Convert.ToString(dt.Rows[i]["supplierheader_suppliercode"].ToString());
                    objModel.SupplierName = Convert.ToString(dt.Rows[i]["supplierheader_name"].ToString());
                    objModel.Invoicegid = Convert.ToInt32(dt.Rows[i]["invoice_gid"].ToString());
                    objModel.InvoiceDate = Convert.ToString(dt.Rows[i]["invoice_date"].ToString());
                    objModel.InvoiceNo = Convert.ToString(dt.Rows[i]["invoice_no"].ToString());
                    objModel.Description = Convert.ToString(dt.Rows[i]["invoice_desc"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["invoice_amount"].ToString());
                    string Provision = Convert.ToString(dt.Rows[i]["invoice_provision_flag"].ToString());
                    if (Provision == "N")
                    {
                        Provision = "No";
                    }
                    if (Provision == "Y")
                    {
                        Provision = "Yes";
                    }
                    objModel.Provision = Provision;

                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetSuppliserDeditexcel(string ecfid, string traveltype)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdebitexceldetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetSuppliserDeditdsaaler(string ecfid, string invoicegid)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdebitdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Payment> GetSupplierPayment(string ecfgid, string invoicegid)
        {
            List<EOW_Payment> objExpense = new List<EOW_Payment>();
            try
            {
                EOW_Payment objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierPaymentdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_Payment();
                        objModel.Employeecode = Convert.ToString(dt.Rows[i]["supplierheader_suppliercode"].ToString());
                        objModel.Employeename = Convert.ToString(dt.Rows[i]["supplierheader_name"].ToString());
                        objModel.Paymentgid = Convert.ToInt32(dt.Rows[i]["ecfcreditline_gid"].ToString());
                        objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["ecfcreditline_pay_mode"].ToString());
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecfcreditline_ref_no"].ToString());
                        objModel.Beneficiary = Convert.ToString(dt.Rows[i]["ecfcreditline_beneficiary"].ToString());
                        objModel.Description = Convert.ToString(dt.Rows[i]["ecfcreditline_desc"].ToString());
                        objModel.PaymentAmount = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                        objExpense.Add(objModel);
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string DeleteSuppliernewlstdsa(string invoice, string ecfgid)
        {
            try
            {

                //        string[,] codes = new string[,]
                //           {
                //{"invoice_isremoved","Y" }
                //          };
                //        string[,] whcos = new string[,]
                //           {
                //{"invoice_ecf_gid",invoice.ToString() },
                //{"invoice_gid",ecfgid },
                //          };
                //        string tname = "iem_trn_tinvoice";

                //        string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                //        string[,] codesc = new string[,]
                //           {
                //{"ecfcreditline_isremoved","Y" }
                //          };
                //        string[,] whcosc = new string[,]
                //           {
                //{"ecfcreditline_invoice_gid",invoice.ToString() },
                //{"ecfcreditline_ecf_gid",ecfgid },
                //          };
                //        string tnamec = "iem_trn_tecfcreditline";

                //        string insertcommendc = objCommonIUD.UpdateCommon(codesc, whcosc, tnamec);

                //        string[,] codesd = new string[,]
                //           {
                //{"ecfdebitline_isremoved","Y" }
                //          };
                //        string[,] whcosd = new string[,]
                //           {
                //{"ecfdebitline_ecf_gid",invoice.ToString() },
                //{"ecfdebitline_invoice_gid",ecfgid },
                //          };
                //        string tnamed = "iem_trn_tecfdebitline";

                //        string insertcommendd = objCommonIUD.UpdateCommon(codesd, whcosd, tnamed);

                if (invoice == "L")
                {
                    GetConnection();
                    string strl = " delete from  iem_trn_tecftravel  where ecftravel_ecf_gid='" + ecfgid + "' ";
                    cmd = new SqlCommand(strl, con);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();

                    GetConnection();
                    string strln = " delete from  iem_trn_tecftravellocallocal  where ecftravellocal_ecf_gid='" + ecfgid + "' ";
                    cmd = new SqlCommand(strln, con);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                if (invoice == "S")
                {
                    GetConnection();
                    string strd = " delete from   iem_trn_tecfdebitline  where ecfdebitline_ecf_gid='" + ecfgid + "' ";
                    cmd = new SqlCommand(strd, con);
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }

                GetConnection();
                string str = " delete from  iem_trn_tinvoice  where invoice_ecf_gid='" + ecfgid + "' ";
                cmd = new SqlCommand(str, con);
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();

                GetConnection();
                string strc = " delete from   iem_trn_tecfcreditline  where ecfcreditline_ecf_gid='" + ecfgid + "' ";
                cmd = new SqlCommand(strc, con);
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();

                string[,] codesd = new string[,]
                           {
                {"attachment_isremoved","Y" }
                          };
                string[,] whcosd = new string[,]
                           {
                {"attachment_ref_flag","1"},
                {"attachment_ref_gid",ecfgid },
                          };
                string tnamed = "iem_trn_tattachment";

                string insertcommendd2 = objCommonIUD.UpdateCommon(codesd, whcosd, tnamed);

                string insertcommendd = "Success";
                return insertcommendd;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string DeleteSupplierdebitclear(string invoicegid, string ecfgid)
        {
            //Ramya commentted below codes and added SP
            //try
            //{
            //    GetConnection();
            //    string str = " delete from  iem_trn_tecfdebitline  where ecfdebitline_ecf_gid='" + ecfgid + "' and ecfdebitline_invoice_gid='" + invoicegid + "' ";
            //    cmd = new SqlCommand(str, con);
            //    cmd.CommandType = CommandType.Text;
            //    cmd.ExecuteNonQuery();

            //    //string[,] codesd = new string[,]
            //    //           {
            //    //{"attachment_isremoved","Y" }
            //    //          };
            //    //string[,] whcosd = new string[,]
            //    //           {
            //    //{"attachment_ref_flag","1"},
            //    //{"attachment_ref_gid",ecfgid },
            //    //          };
            //    //string tnamed = "iem_trn_tattachment";

            //    //string insertcommendd2 = objCommonIUD.UpdateCommon(codesd, whcosd, tnamed);

            //    string insertcommendd = "Success";
            //    return insertcommendd;
            string delant = "Success";
            try
            {
                GetConnection();
                DataTable dtdebit = new DataTable();
                cmd = new SqlCommand("pr_eowfs_set_DeleteDebitline", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@debitline_gid", SqlDbType.VarChar).Value = "0";
                cmd.Parameters.Add("@module", SqlDbType.VarChar).Value = "eowbyinvoice";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdebit);

                try
                {
                    //Split Amount update - GST_Phase3_2 - Ramya
                    GetConnection();
                    DataTable dtSplit = new DataTable();
                    cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtSplit);
                }
                catch (Exception ex)
                {

                }

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string insertcentralattment(string ecfgid)
        {
            string Emp_Msg = "";
            try
            {
                string[,] codesd = new string[,]
                           {
                {"attachment_isremoved","Y" }
                          };
                string[,] whcosd = new string[,]
                           {
                {"attachment_ref_flag","1"},
                {"attachment_ref_gid","0" },
                          };
                string tnamed = "iem_trn_tattachment";

                Emp_Msg = objCommonIUD.UpdateCommon(codesd, whcosd, tnamed);
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Insertecfdraft(EOW_EmployeeeExpense EmployeeeExpense, string id)
        {
            string Emp_Msg = "Success";
            try
            {

                //----------------Pandiaraj 05-11-2022-----------------
                DataTable dt = new DataTable(); 
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfno";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if(dt.Rows.Count>0)
                {
                    if (dt.Rows[0]["ecf_no"].ToString().Trim() != "")
                    {
                        //Emp_Msg = "Please Avoid Multiple Tabs in same browser";
                        Emp_Msg = "Success"; //ramya modififed on 05 nov 21
                    }
                    else   //----------------Pandiaraj 05-11-2022-----TO avoid Paid as Draft ECF ------------
                    {
                        if (EmployeeeExpense.ecfremark != "" && EmployeeeExpense.ecfremark != null)
                        {
                            Emp_Msg = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfremark);
                        }

                        string statusecf = "0";
                        if (HttpContext.Current.Session["loginraisemode"] != null)
                        {
                            statusecf = "-1";
                        }
                        string[,] codes = new string[,]
	               {
        {"ecf_remark",Emp_Msg.ToString()},
        //{"ecf_amount", EmployeeeExpense.ECF_Amount},  
        {"ecf_all_status",statusecf },
        {"ecf_status","0" }
                  };
                        string[,] whcosup = new string[,]
	               {
	    {"ecf_gid", id}
                  };
                        string tname = "iem_trn_tecf";

                        string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                        Emp_Msg = insertcommend.ToString();
                    }
                }
                
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Insertecfdraftproxcy(EOW_EmployeeeExpense EmployeeeExpense, string id)
        {
            string Emp_Msg = "";
            try
            {
                if (EmployeeeExpense.ecfremark != "" && EmployeeeExpense.ecfremark != null)
                {
                    Emp_Msg = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.ecfremark);
                }
                {
                    Emp_Msg = "";
                }
                string statusecf = "0";
                if (HttpContext.Current.Session["loginraisemode"] != null)
                {
                    statusecf = "0";
                }
                string[,] codes = new string[,]
	               {
        {"ecf_remark",Emp_Msg.ToString()}, 
        {"ecf_all_status",statusecf },
        {"ecf_status","0" }
                  };
                string[,] whcosup = new string[,]
	               {
	    {"ecf_gid", id}
                  };
                string tname = "iem_trn_tecf";

                string insertcommend = objCommonIUD.UpdateCommon(codes, whcosup, tname);
                Emp_Msg = insertcommend.ToString();

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public List<EOW_Employeelst> getSupplierdetails()
        {
            List<EOW_Employeelst> obj = new List<EOW_Employeelst>();
            try
            {
                EOW_Employeelst objproject;
                GetConnection();
                DataTable objtable = new DataTable();
                cmd = new SqlCommand("pr_eow_com_supplierdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(objtable);
                foreach (DataRow row in objtable.Rows)
                {

                    if ("N" == row["supplierheader_isadhoc"].ToString())//Pandiaraj 26-04-18 Restrict Adhoc Vendors
                    {
                        objproject = new EOW_Employeelst();
                        objproject.employeeGid = Convert.ToInt32(row["supplierheader_gid"]);
                        objproject.empCode = row["supplierheader_suppliercode"].ToString();
                        objproject.empName = row["supplierheader_name"].ToString();
                        objproject.empMSMEID = row["supplierheader_ismsmed"].ToString();
                        objproject.empMSME = row["Supplier_MSME"].ToString();//Prema Modified for new cr on 04 march 22
                        obj.Add(objproject);
                    }
                }
                return obj;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return obj;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectsupplierinvoicestatus(string queuegid, string type)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                string str = "";
                if (type == "D" || type == "L")
                {
                    str = "TYPEDL";
                }
                else
                {
                    str = "OTHERS";
                }

                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = queuegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = str;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_raiser"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectcemtam(string queuegid, string type)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = queuegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHERS";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["queue_from"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectsupplierinvoice(string queuegid, string type)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                string str = "";
                if (type == "D" || type == "L")
                {
                    str = "TYPEDL";
                }
                else
                {
                    str = "OTHERS";
                }

                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = queuegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = str;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_docsubtype_gid"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectsupplierinvoicestatuscen(string queuegid, string type)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dt = new DataTable();
                string str = "";
                if (type == "D" || type == "L")
                {
                    str = "TYPEDL";
                }
                else
                {
                    str = "OTHERS";
                }
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = queuegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = str;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["ecf_create_mode"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_PaymentMode> PaymentModesupplierdata(string suplierid)
        {
            List<EOW_PaymentMode> objNatureofPayment = new List<EOW_PaymentMode>();
            try
            {
                EOW_PaymentMode objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suplierid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Paymodesupplier";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PaymentMode();
                    objModel.PaymentModeId = Convert.ToInt32(dt.Rows[i]["paymode_gid"].ToString());
                    objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["paymode_code"].ToString());
                    objNatureofPayment.Add(objModel);
                }
                return objNatureofPayment;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofPayment;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<Mailalert> GetModuleType()
        {
            List<Mailalert> objNatureofExpenses = new List<Mailalert>();
            try
            {

                Mailalert objModel;
                objNatureofExpenses.Add(new Mailalert { ModuleId = "0", ModuleName = "-- Select --", });
                GetConnection();
                DataTable dt = new DataTable();
                string str = "";
                str += "  select module_code,module_name from iem_mst_tmodule";
                str += " where module_isremoved='N'";
                cmd = new SqlCommand(str, con);
                cmd.CommandType = CommandType.Text;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new Mailalert();
                    objModel.ModuleId = Convert.ToString(dt.Rows[i]["module_code"].ToString());
                    objModel.ModuleName = Convert.ToString(dt.Rows[i]["module_code"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_SupplierModelgrid> GetSuppliercentral(DataTable data, string type)
        {
            List<EOW_SupplierModelgrid> objExpense = new List<EOW_SupplierModelgrid>();
            try
            {

                EOW_SupplierModelgrid objModel;

                if (data.Rows.Count > 0)
                {
                    DataTable Temppaymenttable = new DataTable();
                    Temppaymenttable = (DataTable)HttpContext.Current.Session["Temppaymenttable"];

                    DataTable Temppamapptable = new DataTable();
                    Temppamapptable = (DataTable)HttpContext.Current.Session["Temppamapptable"];

                    for (int i = 0; i < data.Rows.Count; i++)
                    {
                        objModel = new EOW_SupplierModelgrid();
                        objModel.Invoicegid = Convert.ToInt32(data.Rows[i]["invoicegid"].ToString());
                        objModel.InvoiceDate = Convert.ToString(data.Rows[i]["centralinward_invoice_date"].ToString());
                        objModel.InvoiceNo = Convert.ToString(data.Rows[i]["centralinward_invoice_no"].ToString());
                        objModel.Description = Convert.ToString(data.Rows[i]["centralinward_remark"].ToString());
                        objModel.Amount = Convert.ToString(data.Rows[i]["centralinward_invoice_amount"].ToString());
                        string Provision = Convert.ToString(data.Rows[i]["Provision"].ToString());
                        if (Provision == "N")
                        {
                            Provision = "No";
                        }
                        if (Provision == "Y")
                        {
                            Provision = "Yes";
                        }
                        objModel.Provision = Provision;

                        objExpense.Add(objModel);

                        if (HttpContext.Current.Session["Temppaymenttableflag"] == "First")
                        {
                            string supcodes = Convert.ToString(data.Rows[i]["centralinward_supplier_gid"].ToString());
                            if (supcodes != "0")
                            {
                                DataTable dtdatd = new DataTable();
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supcodes;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "CHECKEFT";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtdatd);
                                if (dtdatd.Rows.Count > 0)
                                {
                                    DataRow row = Temppaymenttable.NewRow();
                                    row["ecfcreditline_pay_mode"] = Convert.ToString(dtdatd.Rows[0]["paymode_code"].ToString());
                                    row["ecfcreditline_ref_no"] = Convert.ToString(dtdatd.Rows[0]["payment_accountno"].ToString());
                                    row["ecfcreditline_beneficiary"] = Convert.ToString(dtdatd.Rows[0]["payment_beneficiaryname"].ToString());
                                    row["ecfcreditline_desc"] = "Supplier Account";
                                    row["ecfcreditline_amount"] = Convert.ToString(data.Rows[i]["centralinward_invoice_amount"].ToString());
                                    row["invoice_gid"] = Convert.ToInt32(data.Rows[i]["invoicegid"].ToString());
                                    Temppaymenttable.Rows.Add(row);
                                    HttpContext.Current.Session["Temppaymenttable"] = Temppaymenttable;
                                }
                                else
                                {
                                    DataTable dtdatdos = new DataTable();
                                    GetConnection();
                                    cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = supcodes;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "OTHER";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtdatdos);
                                    if (dtdatdos.Rows.Count > 0)
                                    {
                                        DataRow row = Temppaymenttable.NewRow();
                                        row["ecfcreditline_pay_mode"] = Convert.ToString(dtdatdos.Rows[0]["paymode_code"].ToString());
                                        row["ecfcreditline_ref_no"] = Convert.ToString(dtdatdos.Rows[0]["payment_accountno"].ToString());
                                        row["ecfcreditline_beneficiary"] = Convert.ToString(dtdatdos.Rows[0]["payment_beneficiaryname"].ToString());
                                        row["ecfcreditline_desc"] = "Supplier Account";
                                        row["ecfcreditline_amount"] = Convert.ToString(data.Rows[i]["centralinward_invoice_amount"].ToString());
                                        row["invoice_gid"] = Convert.ToInt32(data.Rows[i]["invoicegid"].ToString());
                                        Temppaymenttable.Rows.Add(row);
                                        HttpContext.Current.Session["Temppaymenttable"] = Temppaymenttable;
                                    }
                                    else
                                    {
                                        DataRow row = Temppaymenttable.NewRow();
                                        row["ecfcreditline_pay_mode"] = "CHQ";
                                        row["ecfcreditline_ref_no"] = "NA";
                                        row["ecfcreditline_beneficiary"] = Convert.ToString(data.Rows[i]["centralinward_supplier_name"].ToString());
                                        row["ecfcreditline_desc"] = "Supplier Account";
                                        row["ecfcreditline_amount"] = Convert.ToString(data.Rows[i]["centralinward_invoice_amount"].ToString());
                                        row["invoice_gid"] = Convert.ToInt32(data.Rows[i]["invoicegid"].ToString());
                                        Temppaymenttable.Rows.Add(row);
                                        HttpContext.Current.Session["Temppaymenttable"] = Temppaymenttable;
                                    }
                                }
                            }
                        }
                        if (HttpContext.Current.Session["Temppamapptableflag"] == "First")
                        {
                            string ponos = Convert.ToString(data.Rows[i]["centralinward_po_no"].ToString());
                            if (ponos != "")
                            {
                                DataTable temppo = new DataTable();
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_sup_getpodetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@PONo", SqlDbType.VarChar).Value = ponos;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Singleponumber";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(temppo);
                                if (temppo.Rows.Count > 0)
                                {

                                    string open = temppo.Rows[0]["poheader_isclosed"].ToString();
                                    if (open == "N")
                                    {
                                        open = "Open";
                                    }
                                    else
                                    {
                                        open = "Close";
                                    }

                                    DataRow row = Temppamapptable.NewRow();
                                    row["invoicepo_mapped_amount"] = "0";
                                    row["PO_No"] = Convert.ToString(data.Rows[i]["centralinward_po_no"].ToString());
                                    row["PO_details"] = temppo.Rows[0]["poheader_gid"].ToString();
                                    row["PO_date"] = temppo.Rows[0]["poheader_date"].ToString();
                                    row["PO_Status"] = open;
                                    row["PO_POAmount"] = temppo.Rows[0]["poheader_over_total"].ToString();
                                    row["po_POApprovedStatus"] = temppo.Rows[0]["status_name"].ToString();
                                    row["invoice_gid"] = Convert.ToInt32(data.Rows[i]["invoicegid"].ToString());
                                    Temppamapptable.Rows.Add(row);
                                    HttpContext.Current.Session["Temppamapptable"] = Temppamapptable;
                                }
                            }
                        }
                    }
                }
                HttpContext.Current.Session["Temppaymenttableflag"] = "Second";
                HttpContext.Current.Session["Temppamapptableflag"] = "Second";
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<sinvotax> GetCentralteamTax(DataTable dt, string invoicegid)
        {
            List<sinvotax> objExpense = new List<sinvotax>();
            try
            {

                sinvotax objModel;
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (invoicegid == Convert.ToString(dt.Rows[i]["invoice_gid"].ToString()))
                        {
                            objModel = new sinvotax();
                            objModel.TaxgId = Convert.ToInt32(dt.Rows[i]["invoicetax_gid"].ToString());
                            objModel.Intax_Taxid = Convert.ToString(dt.Rows[i]["tax_nameid"].ToString());
                            objModel.Intax_Tax = Convert.ToString(dt.Rows[i]["tax_name"].ToString());
                            objModel.Intax_Rate = Convert.ToString(dt.Rows[i]["invoicetax_rate"].ToString());
                            objModel.Intax_Taxableamt = Convert.ToString(dt.Rows[i]["invoicetax_taxable_amount"].ToString());
                            objModel.Intax_Taxamt = Convert.ToString(dt.Rows[i]["invoicetax_amount"].ToString());
                            objExpense.Add(objModel);
                        }
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Payment> GetcentralPayment(DataTable dt, string invoicegid)
        {
            List<EOW_Payment> objExpense = new List<EOW_Payment>();
            try
            {

                EOW_Payment objModel;

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (invoicegid == Convert.ToString(dt.Rows[i]["invoice_gid"].ToString()))
                        {
                            objModel = new EOW_Payment();
                            objModel.Paymentgid = Convert.ToInt32(dt.Rows[i]["ecfcreditline_gid"].ToString());
                            objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["ecfcreditline_pay_mode"].ToString());
                            objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecfcreditline_ref_no"].ToString());
                            objModel.Beneficiary = Convert.ToString(dt.Rows[i]["ecfcreditline_beneficiary"].ToString());
                            objModel.Description = Convert.ToString(dt.Rows[i]["ecfcreditline_desc"].ToString());
                            objModel.PaymentAmount = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                            objExpense.Add(objModel);
                        }
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetcentralDedit(DataTable dt, string invoicegid)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                string cat_type = "";
                EOW_TravelClaim objModel;
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (invoicegid == Convert.ToString(dt.Rows[i]["invoice_gid"].ToString()))
                        {
                            if (dt.Rows[i]["ecfdebitline_amount"].ToString() != "" && dt.Rows[i]["ecfdebitline_amount"].ToString() != "0.00")
                            {
                                objModel = new EOW_TravelClaim();
                                cat_type = Convert.ToString(dt.Rows[i]["ecfdebitline_category_type"].ToString());
                                if (cat_type == "A")
                                {
                                    objModel.NatureofExpensesName = "";
                                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["ecfdebitline_assetcategory_name"].ToString());
                                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["ecfdebitline_assetsubcategory_name"].ToString());
                                }
                                else
                                {
                                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                                }

                                objModel.invoicepoitem_GID = Convert.ToString(dt.Rows[i]["ecfdebitline_invoicepoitem_gid"].ToString());
                                objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                                objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                                objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                                objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                                objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                                objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                                objModel.Amount = Convert.ToString(dt.Rows[i]["ecfdebitline_amount"].ToString());
                                objExpense.Add(objModel);
                            }
                        }
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_PO> Getcentralpomap(DataTable dt, string invoicegid)
        {
            List<EOW_PO> objExpense = new List<EOW_PO>();
            try
            {

                EOW_PO objModel;
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (invoicegid == Convert.ToString(dt.Rows[i]["invoice_gid"].ToString()))
                        {
                            objModel = new EOW_PO();
                            objModel.PONo = Convert.ToString(dt.Rows[i]["PO_No"].ToString());
                            objModel.POdate = Convert.ToString(dt.Rows[i]["PO_date"].ToString());
                            objModel.POStatus = Convert.ToString(dt.Rows[i]["PO_Status"].ToString());
                            objModel.POGid = Convert.ToString(dt.Rows[i]["PO_details"].ToString());
                            string pomaedamt = Convert.ToString(dt.Rows[i]["invoicepo_mapped_amount"].ToString());
                            if (pomaedamt != "")
                            {
                                objModel.POMapAmount = pomaedamt;
                            }
                            else
                            {
                                objModel.POMapAmount = "0";
                            }
                            objExpense.Add(objModel);
                        }
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectcentralglcode(string glexpcodeid)
        {
            string Emp_Msg = "";
            try
            {
                DataTable dte = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfarfdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_no", SqlDbType.VarChar).Value = glexpcodeid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "exception";
                da = new SqlDataAdapter(cmd);
                da.Fill(dte);
                if (dte.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dte.Rows[0]["ecfarf_exception"].ToString());
                }
                else
                {
                    Emp_Msg = "0";
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectcentralglddlcode(string glexpcodeid)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_getgldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@GLNo", SqlDbType.VarChar).Value = glexpcodeid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SINGLEGLNO";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectcentralglcodeassetcat(string glexpcodeid)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_getgldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@GLNo", SqlDbType.VarChar).Value = glexpcodeid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "SINGLNOASSET";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Excelcentraldebit(DataTable DataTable, string invoicegid)
        {
            try
            {
                string Emp_Msg = "";
                string Natureid = "";
                string Expenseid = "";
                string SubCatid = "";
                GetConnection();
                DataTable err1 = new DataTable();
                err1 = (DataTable)DataTable;
                if (err1.Rows.Count > 0)
                {
                    DataTable dtcrtax = new DataTable();
                    dtcrtax = (DataTable)HttpContext.Current.Session["Tempdebittable"];
                    int rowvaue = dtcrtax.Rows.Count;
                    int ivoiceid = Convert.ToInt32(invoicegid.ToString());

                    for (int i = 0; i < err1.Rows.Count; i++)
                    {
                        DataSet dt = new DataSet();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_com_naturecatsupcat", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@nature_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Nature of Expenses"].ToString();
                        cmd.Parameters.Add("@cat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Main Category"].ToString();
                        cmd.Parameters.Add("@supcat_gid", SqlDbType.VarChar).Value = err1.Rows[i]["Sub Category"].ToString();
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetdescription";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dt);

                        if (dt.Tables[0].Rows.Count > 0)
                        {
                            Emp_Msg = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gl_no"].ToString());
                            Expenseid = Convert.ToString(dt.Tables[0].Rows[0]["expcat_gid"].ToString());
                        }
                        if (dt.Tables[1].Rows.Count > 0)
                        {
                            SubCatid = Convert.ToString(dt.Tables[1].Rows[0]["expsubcat_gid"].ToString());
                        }
                        if (dt.Tables[2].Rows.Count > 0)
                        {
                            Natureid = Convert.ToString(dt.Tables[2].Rows[0]["expnature_gid"].ToString());
                        }

                        DataRow row = dtcrtax.NewRow();
                        row["expnature_nameid"] = Natureid.ToString();
                        row["expnature_name"] = err1.Rows[i]["Nature of Expenses"].ToString();
                        row["expcat_nameid"] = Expenseid.ToString();
                        row["expcat_name"] = err1.Rows[i]["Main Category"].ToString();
                        row["expsubcat_nameid"] = SubCatid.ToString();
                        row["expsubcat_name"] = err1.Rows[i]["Sub Category"].ToString();
                        row["ecfdebitline_gl_no"] = Emp_Msg;
                        row["ecfdebitline_fc_code"] = err1.Rows[i]["Function Code"].ToString();
                        row["ecfdebitline_cc_code"] = err1.Rows[i]["Cost Code"].ToString();
                        row["ecfdebitline_product_code"] = err1.Rows[i]["Product Code"].ToString();
                        row["ecfdebitline_ou_code"] = err1.Rows[i]["OU Code"].ToString();
                        row["invoice_desc"] = err1.Rows[i]["Description"].ToString();
                        row["ecfdebitline_amount"] = err1.Rows[i]["Amount"].ToString();
                        row["invoice_gid"] = ivoiceid.ToString();

                        dtcrtax.Rows.Add(row);
                    }
                    HttpContext.Current.Session["Tempdebittable"] = dtcrtax;
                }
                Emp_Msg = "Success";
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string UpdateCentralecf(EOW_Supplierinvoice EmployeeeExpenseModel, string logeempid, string clmtype, string queid, string raiser)
        {
            //int centralteam = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralMkr"].ToString());
            //int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
            //int centralckecker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralchecker"].ToString());
            int centralckeckerreject = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralreject"].ToString());
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string ecfdescriptions = "";
            string Emp_Msg = "";
            string insertcommend = "";
            try
            {
                string loginid = string.Empty;

                loginid = objCmnFunctions.GetLoginUserGid().ToString();
                if (logeempid == loginid)
                {
                    DataTable CentralTables = new DataTable();
                    CentralTables = (DataTable)HttpContext.Current.Session["CentralTables"];

                    int Empgid = 0;
                    string Emp_Msgamort = "";
                    string Emp_MsgDoc = "";
                    string Emp_brnchgid = "";
                    string maxecfgid = "";
                    string maxingid = "";
                    string isSplitPayment = "N";
                    GetConnection();
                    DataSet dtmodec = new DataSet();
                    cmd = new SqlCommand("pr_eow_com_empdetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = raiser;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtmodec);
                    if (dtmodec.Tables[0].Rows.Count > 0)
                    {
                        Emp_brnchgid = Convert.ToString(dtmodec.Tables[0].Rows[0]["employee_branch_gid"].ToString());
                    }
                    else
                    {
                        Emp_brnchgid = "0";
                    }

                    if (clmtype == "S")
                    {
                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfSupplierInvoice"].ToString());
                    }

                    if (EmployeeeExpenseModel.DocId.ToString() == "1")
                    {
                        Emp_MsgDoc = "P";
                    }
                    else if (EmployeeeExpenseModel.DocId.ToString() == "2")
                    {
                        Emp_MsgDoc = "W";
                    }
                    else if (EmployeeeExpenseModel.DocId.ToString() == "3")
                    {
                        Emp_MsgDoc = "N";
                    }
                    else if (EmployeeeExpenseModel.DocId.ToString() == "4")
                    {
                        Emp_MsgDoc = "U";
                    }
                    else if (EmployeeeExpenseModel.DocId.ToString() == "5")  // ramya added on 04 jun 22
                    {
                        Emp_MsgDoc = "O";
                    }
                    string ecfdesition = "";
                    if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                    {
                        ecfdesition = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                    }
                    if (EmployeeeExpenseModel.amortdec != "" && EmployeeeExpenseModel.amortdec != null)
                    {
                        ecfdescriptions = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.amortdec.ToString());
                    }
                    if (EmployeeeExpenseModel.amort.ToString() == "No")
                    {
                        Emp_Msgamort = "N";
                        string[,] codes = new string[,]
	               {
        {"ecf_supplier_employee","S"},
	    {"ecf_supplier_gid", CentralTables.Rows[0]["centralinward_supplier_gid"].ToString()},
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpenseModel.Raiser_Mode},
        {"ecf_raiser",CentralTables.Rows[0]["employee_gid"].ToString() },
	    {"ecf_doctype_gid", "3"},
        {"ecf_branch_gid", Emp_brnchgid},
        {"ecf_docsubtype_gid","4" },
	    {"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpenseModel.ECF_Date).ToString()},
        {"ecf_currency_gid",EmployeeeExpenseModel.CurrencyId.ToString()},
        {"ecf_currency_code",CentralTables.Rows[0]["currency_code"].ToString() },
	    {"ecf_currency_rate", EmployeeeExpenseModel.Exrate},
        {"ecf_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_po_type", Emp_MsgDoc},
        {"ecf_delmat_amount",EmployeeeExpenseModel.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpenseModel.Currencyamount},
        {"ecf_status",centralckeckerreject.ToString() },
        {"ecf_all_status",centralckeckerreject.ToString() },        
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",logeempid.ToString() },
        {"ecf_description",ecfdesition.ToString() },
	    {"ecf_insert_date", "sysdatetime()"}
                  };
                        string tname = "iem_trn_tecf";
                        insertcommend = objCommonIUD.InsertCommon(codes, tname);
                    }
                    else
                    {
                        Emp_Msgamort = "Y";
                        string[,] codes = new string[,]
	               {
        {"ecf_supplier_employee","S"},
	    {"ecf_supplier_gid", CentralTables.Rows[0]["centralinward_supplier_gid"].ToString()},
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpenseModel.Raiser_Mode},
        {"ecf_raiser",CentralTables.Rows[0]["employee_gid"].ToString() },
	    {"ecf_doctype_gid", "3"},
        {"ecf_branch_gid", Emp_brnchgid},
        {"ecf_docsubtype_gid","4" },
	    {"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpenseModel.ECF_Date).ToString()},
        {"ecf_currency_gid",EmployeeeExpenseModel.CurrencyId.ToString()},
        {"ecf_currency_code",EmployeeeExpenseModel.CurrencyName },
	    {"ecf_currency_rate", EmployeeeExpenseModel.Exrate},
        {"ecf_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_amort_flag", Emp_Msgamort},
        {"ecf_amort_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.from).ToString()},
        {"ecf_amort_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.to).ToString()},
        {"ecf_amort_desc", ecfdescriptions},
        {"ecf_po_type", Emp_MsgDoc},
        {"ecf_delmat_amount",EmployeeeExpenseModel.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpenseModel.Currencyamount},
        {"ecf_status",centralckeckerreject.ToString() },
        {"ecf_all_status",centralckeckerreject.ToString() },        
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",logeempid.ToString() },
        {"ecf_description",ecfdesition.ToString() },
	    {"ecf_insert_date", "sysdatetime()"}
                  };
                        string tname = "iem_trn_tecf";

                        insertcommend = objCommonIUD.InsertCommon(codes, tname);

                    }
                    if (insertcommend == "success")
                    {
                        GetConnection();
                        DataTable dt = new DataTable();
                        cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = logeempid;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfmaxgid";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dt);
                        if (dt.Rows.Count > 0)
                        {
                            string Emp_Retensionflg = "";
                            string Retensionper = "";
                            string Retensionamount = "";
                            string Retensionrelse = "";
                            maxecfgid = Convert.ToString(dt.Rows[0]["ecf_gid"].ToString());

                            for (int i = 0; i < CentralTables.Rows.Count; i++)
                            {

                                if (CentralTables.Rows[i]["invoice_retention_flag"].ToString() == "N")
                                {
                                    Emp_Retensionflg = "N";
                                    Retensionper = "0";
                                    Retensionamount = "0";
                                    Retensionrelse = "";
                                }
                                else
                                {
                                    Emp_Retensionflg = "Y";
                                    Retensionper = CentralTables.Rows[i]["invoice_retention_rate"].ToString();
                                    Retensionamount = CentralTables.Rows[i]["invoice_retention_amount"].ToString();
                                    Retensionrelse = objCmnFunctions.convertoDateTimeString(CentralTables.Rows[i]["invoice_retention_releaseon"].ToString());
                                }

                                string sermonth = locals.getconverttomonthtodateto(objCmnFunctions.convertoDateTimeString(CentralTables.Rows[i]["centralinward_invoice_date"].ToString()));
                                sermonth = objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(sermonth.ToString()));

                                string[,] codesin = new string[,]
	                       {
                                {"invoice_ecf_gid",maxecfgid},
	                            {"invoice_supplier_gid", CentralTables.Rows[i]["centralinward_supplier_gid"].ToString()},
                                {"invoice_type","S" },	  
	                            {"invoice_amount",CentralTables.Rows[i]["centralinward_invoice_amount"].ToString()},
                                {"invoice_wotax_amount", CentralTables.Rows[i]["Taxable_Amount"].ToString()}, //ramya 16 Feb 21
	                            {"invoice_dedup_no", objCmnFunctions.Getspecialcharacters(CentralTables.Rows[i]["centralinward_invoice_no"].ToString())},
                                {"invoice_no", CentralTables.Rows[i]["centralinward_invoice_no"].ToString()},
                                {"invoice_service_month", sermonth.ToString()},       
                                {"invoice_desc", objCmnFunctions.Getreplacesinglequotes(CentralTables.Rows[i]["centralinward_remark"].ToString())},
                                {"invoice_date",objCmnFunctions.convertoDateTimeString(CentralTables.Rows[i]["centralinward_invoice_date"].ToString())},
                                {"invoice_provision_flag", CentralTables.Rows[i]["Provision"].ToString()},
                                {"invoice_retention_flag", Emp_Retensionflg},
                                {"invoice_retention_rate", Retensionper},
                                {"invoice_retention_amount", Retensionamount},
                                {"invoice_retention_exception", Retensionamount},  
                                {"invoice_retention_releaseon",Retensionrelse},
                                {"invoice_dedup_status","0" },
                                {"invoice_gst_charged",CentralTables.Rows[i]["centralinward_isgst"].ToString()},
                                {"invoice_provider_location",CentralTables.Rows[i]["centralinward_provider"].ToString()},
                                {"invoice_receiver_location",CentralTables.Rows[i]["centralinward_receiver"].ToString()},
                                {"invoice_gstin_vendor",CentralTables.Rows[i]["suppliergstin"].ToString()},
                                {"invoice_gstin_ficcl",CentralTables.Rows[i]["branchgstin"].ToString()},
                                {"invoice_Cygnet_Gid",CentralTables.Rows[i]["Cygnet_Gid"].ToString()}
                          };

                                string tnamein = "iem_trn_tinvoice";
                                insertcommend = objCommonIUD.InsertCommon(codesin, tnamein);
                                try
                                {
                                    Int32 cyg_gid = String.IsNullOrEmpty(CentralTables.Rows[i]["Cygnet_Gid"].ToString()) ? 0 : Convert.ToInt32(CentralTables.Rows[i]["Cygnet_Gid"]);
                                    if (cyg_gid != 0)
                                    {
                                        DataTable dtCygnetStatus = new DataTable();
                                        GetConnection();
                                        cmd = new SqlCommand("pr_eow_set_CygnetStatus", con);
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.Add("@Cygnet_Gid", SqlDbType.VarChar).Value = cyg_gid;
                                        da = new SqlDataAdapter(cmd);
                                        da.Fill(dtCygnetStatus);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                                }
                                GetConnection();
                                DataTable dtinv = new DataTable();
                                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = maxecfgid;
                                cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = CentralTables.Rows[i]["centralinward_supplier_gid"].ToString();
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicemaxgid";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtinv);
                                if (dtinv.Rows.Count > 0)
                                {
                                    maxingid = Convert.ToString(dtinv.Rows[0]["invoice_gid"].ToString());

                                    EOW_SupplierModelgrid SupplierModel = new EOW_SupplierModelgrid();
                                    SupplierModel.Retensionamount = "0";
                                    SupplierModel.Amount = CentralTables.Rows[i]["centralinward_invoice_amount"].ToString();
                                    string result = updateinvoicepayment(SupplierModel, CentralTables.Rows[i]["centralinward_supplier_gid"].ToString(), maxecfgid, maxingid, "S");

                                    string ponos = Convert.ToString(CentralTables.Rows[i]["centralinward_po_no"].ToString());
                                    if (ponos != "")
                                    {
                                        DataTable temppo = new DataTable();
                                        GetConnection();
                                        cmd = new SqlCommand("pr_eow_sup_getpodetails", con);
                                        cmd.CommandType = CommandType.StoredProcedure;
                                        cmd.Parameters.Add("@PONo", SqlDbType.VarChar).Value = ponos;
                                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Singleponumber";
                                        da = new SqlDataAdapter(cmd);
                                        da.Fill(temppo);
                                        if (temppo.Rows.Count > 0)
                                        {

                                            string open = temppo.Rows[0]["poheader_isclosed"].ToString();
                                            if (open == "N")
                                            {
                                                open = "Open";
                                            }
                                            else
                                            {
                                                open = "Close";
                                            }

                                            string[,] codespoupdate = new string[,]
	                                 {
                                         {"invoicepo_invoice_gid",maxingid.ToString()},
                                         {"invoicepo_po_gid", temppo.Rows[0]["poheader_gid"].ToString()},  
                                         {"invoicepo_mapped_amount","0" }
                                     };
                                            string tnamepoupdate = "iem_trn_tinvoicepo";

                                            insertcommend = objCommonIUD.InsertCommon(codespoupdate, tnamepoupdate);

                                            //DataRow row = Temppamapptable.NewRow();
                                            //row["invoicepo_mapped_amount"] = "0";
                                            //row["PO_No"] = Convert.ToString(data.Rows[i]["centralinward_po_no"].ToString());
                                            //row["PO_details"] = temppo.Rows[0]["poheader_gid"].ToString();
                                            //row["PO_date"] = temppo.Rows[0]["poheader_date"].ToString();
                                            //row["PO_Status"] = open;
                                            //row["PO_POAmount"] = temppo.Rows[0]["poheader_over_total"].ToString();
                                            //row["po_POApprovedStatus"] = temppo.Rows[0]["status_name"].ToString();
                                            //row["invoice_gid"] = Convert.ToInt32(data.Rows[i]["invoicegid"].ToString());
                                            //Temppamapptable.Rows.Add(row);
                                            //HttpContext.Current.Session["Temppamapptable"] = Temppamapptable;
                                        }
                                    }

                                    //------------insert ECFDebitline details from iem_trn_tcentraldebitline -Pandiaraj 18-02-2019
                                    DataTable resds = new DataTable();
                                    GetConnection();
                                    cmd = new SqlCommand("PR_CentralTeam_RaiseDebitline", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@ecfgid", SqlDbType.VarChar).Value = maxecfgid;
                                    cmd.Parameters.Add("@invid", SqlDbType.VarChar).Value = dtinv.Rows[0]["invoice_gid"].ToString();
                                    cmd.Parameters.Add("@centralinward_gid", SqlDbType.VarChar).Value = CentralTables.Rows[i]["centralinward_gid"].ToString();
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(resds);

                                    //-------------Pandiaraj 18-02-2019
                                }

                                string[,] codesqct = new string[,]
	                           {
                      {"centralinward_ecf_gid",maxecfgid.ToString() },
                      {"centralinward_status","262144" }
                              };
                                string[,] whreqct = new string[,]
	                           {
                    {"centralinward_gid",CentralTables.Rows[i]["centralinward_gid"].ToString() }
                              };
                                string tnameqct = "iem_trn_tcentralinward";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesqct, whreqct, tnameqct);
                            }
                        }

                        try
                        {
                            DataTable dtsplit = new DataTable();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_UpdateSplitPayment", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = maxecfgid;
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtsplit);
                        }
                        catch (Exception ex)
                        {
                            objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                        }
                    }
                    return Emp_Msg;
                }
                else
                {
                    Emp_Msg = "Unauthorized User.!";
                    return Emp_Msg;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        /*public string UpdateCentralecffinal(EOW_Supplierinvoice EmployeeeExpenseModel, string logeempid, string ecfgid, string queid, string raiser)
        {
            int centralteam = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralMkr"].ToString());
            int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
            int centralckecker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralchecker"].ToString());
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string ecfdescriptions = "";
            string Emp_Msg = "";
            string Emp_Msgecfremark = "";
            string insertcommend = "";
            string queue_gid = "";
            string Emp_Msgsuper = "";
            try
            {
                //DataTable CentralTables = new DataTable();
                //CentralTables = (DataTable)HttpContext.Current.Session["CentralTables"];

                GetConnection();
                DataTable dtempsup = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = raiser;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpSupper";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtempsup);
                if (dtempsup.Rows.Count > 0)
                {
                    Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["employee_supervisor"].ToString());

                    GetConnection();
                    cmd = new SqlCommand("pr_ecfdelmat", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                    cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(Emp_Msgsuper.ToString());

                    cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                    cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                    cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                    cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;


                    cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                    cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                    cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                    cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;

                    cmd.ExecuteNonQuery();

                    var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                    var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                    var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                    var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                    var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                    var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);

                    if (demmatresult == "" || result == "")
                    {
                        //Emp_Msg = ecferrors + "-" + sqlerrors;
                        Emp_Msg = sqlerrors;
                        return Emp_Msg;
                    }
                    else if (demmatresult != "0" && demmatresult != "")
                    {
                        Emp_Msgsuper = result.ToString();
                    }
                    if (Emp_Msgsuper != "")
                    {
                        int Empgid = 0;
                        string Emp_Msgamort = "";
                        string Emp_brnchgid = "";
                        string maxecfgid = "";
                        maxecfgid = ecfgid.ToString();
                        GetConnection();
                        DataSet dtmodec = new DataSet();
                        cmd = new SqlCommand("pr_eow_com_empdetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = raiser;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtmodec);
                        if (dtmodec.Tables[0].Rows.Count > 0)
                        {
                            Emp_brnchgid = Convert.ToString(dtmodec.Tables[0].Rows[0]["employee_branch_gid"].ToString());
                        }
                        else
                        {
                            Emp_brnchgid = "0";
                        }

                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfSupplierInvoice"].ToString());

                        string ecfdesition = "";
                        if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                        {
                            ecfdesition = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                        }
                        if (EmployeeeExpenseModel.amortdec != "" && EmployeeeExpenseModel.amortdec != null)
                        {
                            ecfdescriptions = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.amortdec.ToString());
                        }

                        if (EmployeeeExpenseModel.ecfremark == null)
                        {
                            Emp_Msgecfremark = "";
                        }
                        else
                        {
                            Emp_Msgecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());

                        }
                        int ecf_statusaction = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
                        int ecf_status = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                        insertcommend = "Success";
                        if (insertcommend != "")
                        {
                            if (queid.ToString().Trim() != "")
                            {
                                string[,] codesq = new string[,]
	                           {
                      {"queue_action_date","sysdatetime()"},
                      {"queue_action_by",logeempid.ToString() },
                      {"queue_action_status",ecf_statusaction.ToString() },
                      {"queue_action_remark",Emp_Msgecfremark.ToString() }
                              };
                                string[,] whreq = new string[,]
	                           {
                    {"queue_gid",queid.ToString() }
                              };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);
                            }
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_trn_tecf", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = Convert.ToInt32(maxecfgid);
                            cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = Emp_Msgecfremark;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "edit";
                            int data = cmd.ExecuteNonQuery();
                            insertcommend = "Success";
                            if (insertcommend == "Success")
                            {
                                GetConnection();
                                DataTable dtmaxx = new DataTable();
                                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = maxecfgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfno";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtmaxx);
                                if (dtmaxx.Rows.Count > 0)
                                {
                                    Emp_Msg = Convert.ToString(dtmaxx.Rows[0]["ecf_no"].ToString());
                                    Emp_Msg = "Your ECF Number is : " + Emp_Msg;
                                }
                            }

                            string[,] codes = new string[,]
	                                   {
                            {"queue_date","sysdatetime()"},
	                        {"queue_ref_flag", "1"},
                            {"queue_ref_gid",maxecfgid },
	                        {"queue_ref_status", centralteam.ToString()},
                            {"queue_from",centralmaker.ToString() },
	                        {"queue_to_type", "R"},
                            {"queue_to",centralckecker.ToString()},
	                        {"queue_action_for", "A"},  
                            {"queue_prev_gid", "0"},
                                      };

                            string tname = "iem_trn_tqueue";

                            string insertcommendecf = objCommonIUD.InsertCommon(codes, tname);

                            if (insertcommendecf == "success")
                            {
                                DataSet dtempsupnew = new DataSet();
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = maxecfgid;
                                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = centralmaker;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queuemaxgid";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtempsupnew);
                                if (dtempsupnew.Tables[0].Rows.Count > 0)
                                {
                                    queue_gid = Convert.ToString(dtempsupnew.Tables[0].Rows[0]["queue_gid"].ToString());
                                }

                                if (queue_gid != "")
                                {
                                    if (EmployeeeExpenseModel.amort.ToString() == "No")
                                    {
                                        Emp_Msgamort = "N";
                                        string[,] codesUP = new string[,]
	                                       {       
	                            {"ecf_queue_gid", queue_gid},
                                {"ecf_queue_to_type","R" },
                                {"ecf_description", ecfdesition.ToString()},
	                            {"ecf_queue_to", centralckecker.ToString()},
                                {"ecf_status",centralteam.ToString() },
                                {"ecf_all_status",centralteam.ToString() },
	                            {"ecf_urgent_flag","N"},
                                {"ecf_amort_flag", Emp_Msgamort},
                                {"ecf_action_by",logeempid.ToString() },
	                            {"ecf_action_date","sysdatetime()"}
                                          };
                                        string[,] whcosup = new string[,]
	                                       {
                                {"ecf_raiser",raiser },
	                            {"ecf_gid", maxecfgid}
                                          };
                                        string tnameUP = "iem_trn_tecf";

                                        string insertcommendUP = objCommonIUD.UpdateCommon(codesUP, whcosup, tnameUP);
                                    }
                                    else
                                    {
                                        Emp_Msgamort = "Y";
                                        string[,] codesUP = new string[,]
	                                       {       
	                            {"ecf_queue_gid", queue_gid},
                                {"ecf_queue_to_type","R" },
                                {"ecf_description", ecfdesition.ToString()},
	                            {"ecf_queue_to", centralckecker.ToString()},
                                {"ecf_status",centralteam.ToString() },
                                {"ecf_all_status",centralteam.ToString() },
	                            {"ecf_urgent_flag","N"},
                                {"ecf_action_by",logeempid.ToString() },
                                {"ecf_amort_flag", Emp_Msgamort},
                                {"ecf_amort_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.from).ToString()},
                                {"ecf_amort_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.to).ToString()},
                                {"ecf_amort_desc", ecfdescriptions},
	                            {"ecf_action_date","sysdatetime()"}
                                          };
                                        string[,] whcosup = new string[,]
	                                       {
                                {"ecf_raiser",raiser },
	                            {"ecf_gid", maxecfgid}
                                          };
                                        string tnameUP = "iem_trn_tecf";

                                        string insertcommendUP = objCommonIUD.UpdateCommon(codesUP, whcosup, tnameUP);
                                    }
                                    string mail = queue_gid.ToString();
                                    GetConnection();
                                    DataTable dtdoctype = new DataTable();
                                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtdoctype);
                                    if (dtdoctype.Rows.Count > 0)
                                    {
                                        string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                        doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                        mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                                    }
                                }
                            }
                        }
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }*/

        public string UpdateCentralecffinal(EOW_Supplierinvoice EmployeeeExpenseModel, string logeempid, string ecfgid, string queid, string raiser)
        {
            int centralteam = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralMkr"].ToString());
            int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
            int centralckecker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralchecker"].ToString());
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string ecfdescriptions = "";
            string Emp_Msg = "";
            string Emp_Msgecfremark = "";
            string insertcommend = "";
            string queue_gid = "";
            string Emp_Msgsuper = "";
            try
            {
                GetConnection();
                DataTable dtempsup = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = raiser;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEmpSupper";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtempsup);
                if (dtempsup.Rows.Count > 0)
                {
                    Emp_Msgsuper = Convert.ToString(dtempsup.Rows[0]["employee_supervisor"].ToString());
                    cmd = new SqlCommand("pr_ecfdelmat", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid.ToString());
                    cmd.Parameters.Add("@ecf_approver_gid", SqlDbType.Int).Value = Convert.ToInt32(Emp_Msgsuper.ToString());

                    cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 64);
                    cmd.Parameters["@ecf_next_queue_to_gid"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1);
                    cmd.Parameters["@ecf_next_queue_to_type"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1);
                    cmd.Parameters["@ecf_next_queue_to_additional_flag"].Direction = ParameterDirection.Output;


                    cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 32);
                    cmd.Parameters["@ecfdelmat_result"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 10000);
                    cmd.Parameters["@ecf_err_output"].Direction = ParameterDirection.Output;

                    cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 10000);
                    cmd.Parameters["@ecf_sql_output"].Direction = ParameterDirection.Output;

                    cmd.ExecuteNonQuery();

                    var result = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_gid"].Value);
                    var Flag = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_type"].Value);
                    var Additionalflagnew = Convert.ToString(cmd.Parameters["@ecf_next_queue_to_additional_flag"].Value);
                    var demmatresult = Convert.ToString(cmd.Parameters["@ecfdelmat_result"].Value);
                    var sqlerrors = Convert.ToString(cmd.Parameters["@ecf_err_output"].Value);
                    var ecferrors = Convert.ToString(cmd.Parameters["@ecf_sql_output"].Value);

                    if (demmatresult == "" || result == "")
                    {
                        Emp_Msg = sqlerrors;
                        return Emp_Msg;
                    }
                    else if (demmatresult != "0" && demmatresult != "")
                    {
                        Emp_Msgsuper = result.ToString();
                    }
                    if (Emp_Msgsuper != "")
                    {
                        int Empgid = 0;
                        string Emp_Msgamort = "";
                        string Emp_brnchgid = "";
                        string maxecfgid = "";
                        maxecfgid = ecfgid.ToString();
                        DataSet dtmodec = new DataSet();
                        cmd = new SqlCommand("pr_eow_com_empdetails", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = raiser;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtmodec);
                        if (dtmodec.Tables[0].Rows.Count > 0)
                        {
                            Emp_brnchgid = Convert.ToString(dtmodec.Tables[0].Rows[0]["employee_branch_gid"].ToString());
                        }
                        else
                        {
                            Emp_brnchgid = "0";
                        }

                        Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfSupplierInvoice"].ToString());

                        string ecfdesition = "";
                        if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                        {
                            ecfdesition = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                            if (ecfdesition.Length > 255)
                            {
                                ecfdesition = ecfdesition.Substring(0, 255);
                            }
                        }
                        if (EmployeeeExpenseModel.amortdec != "" && EmployeeeExpenseModel.amortdec != null)
                        {
                            ecfdescriptions = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.amortdec.ToString());
                            if (ecfdescriptions.Length > 255)
                            {
                                ecfdescriptions = ecfdescriptions.Substring(0, 255);
                            }
                        }

                        if (EmployeeeExpenseModel.ecfremark == null)
                        {

                            Emp_Msgecfremark = "";
                        }
                        else
                        {
                            Emp_Msgecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());
                            if (Emp_Msgecfremark.Length > 255)
                            {
                                Emp_Msgecfremark = Emp_Msgecfremark.Substring(0, 255);
                            }

                        }
                        int ecf_statusaction = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
                        int ecf_status = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                        cmd = new SqlCommand("PR_EOW_COM_ECFQUEUEUPDATE", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@QUEUEGID", SqlDbType.VarChar).Value = queid.ToString().Trim();
                        cmd.Parameters.Add("@QUEUEACTIONBY", SqlDbType.VarChar).Value = logeempid;
                        cmd.Parameters.Add("@QUEUEACTIONSTATUS", SqlDbType.VarChar).Value = ecf_statusaction;
                        cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = Convert.ToInt32(maxecfgid);
                        cmd.Parameters.Add("@ECFRAISER", SqlDbType.VarChar).Value = raiser;
                        cmd.Parameters.Add("@ECFREMARK", SqlDbType.VarChar).Value = Emp_Msgecfremark;
                        cmd.Parameters.Add("@ECFDESC", SqlDbType.VarChar).Value = ecfdesition;
                        cmd.Parameters.Add("@ECFAMORTFLAG", SqlDbType.VarChar).Value = EmployeeeExpenseModel.amort.ToString();
                        if (EmployeeeExpenseModel.amort.ToString() == "Yes")
                        {
                            cmd.Parameters.Add("@ECFAMORTFROM", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.from).ToString();
                            cmd.Parameters.Add("@ECFAMORTTO", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.to).ToString();
                            cmd.Parameters.Add("@ECFAMORTDESC", SqlDbType.VarChar).Value = ecfdescriptions;

                        }
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "UpdateCentralecffinal";
                        cmd.Parameters.Add("@MSG", SqlDbType.VarChar, 10000);
                        cmd.Parameters["@MSG"].Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();
                        Emp_Msg = Convert.ToString(cmd.Parameters["@MSG"].Value);

                        string mail = queue_gid.ToString();
                        DataTable dtdoctype = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdoctype);
                        if (dtdoctype.Rows.Count > 0)
                        {
                            string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                            doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                            mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                        }
                    }
                    else
                    {
                        Emp_Msg = "Next queue not found in delmat";
                    }
                }
                else
                {
                    Emp_Msg = "EcF raiser (Employee) supervisor not found";

                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string UpdateCentralinvoicefinal(EOW_Supplierinvoice EmployeeeExpenseModel, string logeempid, string clmtype, string queid, string raiser)
        {
            int centralteam = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralMkr"].ToString());
            int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
            int centralckecker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralchecker"].ToString());
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string ecfdescriptions = "";
            string Emp_Msg = "";
            string Emp_Msgecfremark = "";
            string insertcommend = "";
            string queue_gid = "";
            try
            {
                DataTable Temptaxtable = new DataTable();
                Temptaxtable = (DataTable)HttpContext.Current.Session["Temptaxtable"];

                DataTable Temppaymenttable = new DataTable();
                Temppaymenttable = (DataTable)HttpContext.Current.Session["Temppaymenttable"];

                DataTable Tempdebittable = new DataTable();
                Tempdebittable = (DataTable)HttpContext.Current.Session["Tempdebittable"];

                DataTable CentralTables = new DataTable();
                CentralTables = (DataTable)HttpContext.Current.Session["CentralTables"];

                DataTable Temppamapptable = new DataTable();
                Temppamapptable = (DataTable)HttpContext.Current.Session["Temppamapptable"];

                DataTable Temppoitemtable = new DataTable();
                Temppoitemtable = (DataTable)HttpContext.Current.Session["Temppoitemtable"];

                int Empgid = 0;
                string Emp_Msgamort = "";
                string Emp_MsgDoc = "";
                string Emp_brnchgid = "";
                string maxecfgid = "";
                string maxingid = "";

                GetConnection();
                DataSet dtmodec = new DataSet();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = raiser;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtmodec);
                if (dtmodec.Tables[0].Rows.Count > 0)
                {
                    Emp_brnchgid = Convert.ToString(dtmodec.Tables[0].Rows[0]["employee_branch_gid"].ToString());
                }
                else
                {
                    Emp_brnchgid = "0";
                }

                if (clmtype == "S")
                {
                    Empgid = Convert.ToInt32(ConfigurationManager.AppSettings["EcfSupplierInvoice"].ToString());
                }

                if (EmployeeeExpenseModel.DocId.ToString() == "1")
                {
                    Emp_MsgDoc = "P";
                }
                else if (EmployeeeExpenseModel.DocId.ToString() == "2")
                {
                    Emp_MsgDoc = "W";
                }
                else if (EmployeeeExpenseModel.DocId.ToString() == "3")
                {
                    Emp_MsgDoc = "N";
                }
                else if (EmployeeeExpenseModel.DocId.ToString() == "4")
                {
                    Emp_MsgDoc = "U";
                }
                string ecfdesition = "";
                if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                {
                    ecfdesition = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                }
                if (EmployeeeExpenseModel.amortdec != "" && EmployeeeExpenseModel.amortdec != null)
                {
                    ecfdescriptions = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.amortdec.ToString());
                }
                if (EmployeeeExpenseModel.amort.ToString() == "No")
                {
                    Emp_Msgamort = "N";
                    string[,] codes = new string[,]
	               {
        {"ecf_supplier_employee","S"},
	    {"ecf_supplier_gid", CentralTables.Rows[0]["centralinward_supplier_gid"].ToString()},
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpenseModel.Raiser_Mode},
        {"ecf_raiser",CentralTables.Rows[0]["employee_gid"].ToString() },
	    {"ecf_doctype_gid", "3"},
        {"ecf_branch_gid", Emp_brnchgid},
        {"ecf_docsubtype_gid","4" },
	    {"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpenseModel.ECF_Date).ToString()},
        {"ecf_currency_gid",EmployeeeExpenseModel.CurrencyId.ToString()},
        {"ecf_currency_code","INR" },
	    {"ecf_currency_rate", EmployeeeExpenseModel.Exrate},
        {"ecf_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_po_type", Emp_MsgDoc},
        {"ecf_delmat_amount",EmployeeeExpenseModel.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_status",centralteam.ToString() },
        {"ecf_all_status",centralteam.ToString() },        
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",logeempid.ToString() },
        {"ecf_description",ecfdesition.ToString() },
	    {"ecf_insert_date", "sysdatetime()"}
                  };
                    string tname = "iem_trn_tecf";
                    insertcommend = objCommonIUD.InsertCommon(codes, tname);
                }
                else
                {
                    Emp_Msgamort = "Y";
                    string[,] codes = new string[,]
	               {
        {"ecf_supplier_employee","S"},
	    {"ecf_supplier_gid", CentralTables.Rows[0]["centralinward_supplier_gid"].ToString()},
        {"ecf_date",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString() },
	    {"ecf_create_mode", EmployeeeExpenseModel.Raiser_Mode},
        {"ecf_raiser",CentralTables.Rows[0]["employee_gid"].ToString() },
	    {"ecf_doctype_gid", "3"},
        {"ecf_branch_gid", Emp_brnchgid},
        {"ecf_docsubtype_gid","4" },
	    {"ecf_claim_month",objCmnFunctions.convertoDateTimeString( EmployeeeExpenseModel.ECF_Date).ToString()},
        {"ecf_currency_gid",EmployeeeExpenseModel.CurrencyId.ToString()},
        {"ecf_currency_code",EmployeeeExpenseModel.CurrencyName },
	    {"ecf_currency_rate", EmployeeeExpenseModel.Exrate},
        {"ecf_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_amort_flag", Emp_Msgamort},
        {"ecf_amort_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.from).ToString()},
        {"ecf_amort_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.to).ToString()},
        {"ecf_amort_desc", ecfdescriptions},
        {"ecf_po_type", Emp_MsgDoc},
        {"ecf_delmat_amount",EmployeeeExpenseModel.ECF_Amount },
	    {"ecf_currency_amount", EmployeeeExpenseModel.ECF_Amount},
        {"ecf_status",centralteam.ToString() },
        {"ecf_all_status",centralteam.ToString() },        
	    {"ecf_urgent_flag","N"},
        {"ecf_insert_by",logeempid.ToString() },
        {"ecf_description",ecfdesition.ToString() },
	    {"ecf_insert_date", "sysdatetime()"}
                  };
                    string tname = "iem_trn_tecf";

                    insertcommend = objCommonIUD.InsertCommon(codes, tname);

                }
                if (insertcommend == "success")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = logeempid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfmaxgid";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        string Emp_Retensionflg = "";
                        string Retensionper = "";
                        string Retensionamount = "";
                        string Retensionrelse = "";
                        maxecfgid = Convert.ToString(dt.Rows[0]["ecf_gid"].ToString());

                        for (int i = 0; i < CentralTables.Rows.Count; i++)
                        {

                            if (CentralTables.Rows[i]["invoice_retention_flag"].ToString() == "N")
                            {
                                Emp_Retensionflg = "N";
                                Retensionper = "0";
                                Retensionamount = "0";
                                Retensionrelse = "";
                            }
                            else
                            {
                                Emp_Retensionflg = "Y";
                                Retensionper = CentralTables.Rows[i]["invoice_retention_rate"].ToString();
                                Retensionamount = CentralTables.Rows[i]["invoice_retention_amount"].ToString();
                                Retensionrelse = objCmnFunctions.convertoDateTimeString(CentralTables.Rows[i]["invoice_retention_releaseon"].ToString());
                            }

                            string[,] codesin = new string[,]
	                       {
                                {"invoice_ecf_gid",maxecfgid},
	                            {"invoice_supplier_gid", CentralTables.Rows[i]["centralinward_supplier_gid"].ToString()},
                                {"invoice_type","S" },	  
	                            {"invoice_amount",CentralTables.Rows[i]["centralinward_invoice_amount"].ToString()},
                                {"invoice_wotax_amount", CentralTables.Rows[i]["centralinward_invoice_amount"].ToString()},
	                            {"invoice_dedup_no", objCmnFunctions.Getspecialcharacters(CentralTables.Rows[i]["centralinward_invoice_no"].ToString())},
                                {"invoice_no", CentralTables.Rows[i]["centralinward_invoice_no"].ToString()},
                                {"invoice_service_month", objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(CentralTables.Rows[i]["invoice_service_month"].ToString()))},       
                                {"invoice_desc", objCmnFunctions.Getreplacesinglequotes(CentralTables.Rows[i]["centralinward_remark"].ToString())},
                                {"invoice_date",objCmnFunctions.convertoDateTimeString(CentralTables.Rows[i]["centralinward_invoice_date"].ToString())},
                                {"invoice_provision_flag", CentralTables.Rows[i]["Provision"].ToString()},
                                {"invoice_retention_flag", Emp_Retensionflg},
                                {"invoice_retention_rate", Retensionper},
                                {"invoice_retention_amount", Retensionamount},
                                {"invoice_retention_exception", Retensionamount},  
                                {"invoice_retention_releaseon",Retensionrelse},
                                {"invoice_dedup_status","0" }    
                          };

                            string tnamein = "iem_trn_tinvoice";
                            insertcommend = objCommonIUD.InsertCommon(codesin, tnamein);

                            GetConnection();
                            DataTable dtinv = new DataTable();
                            cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = maxecfgid;
                            cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = CentralTables.Rows[i]["centralinward_supplier_gid"].ToString();
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicemaxgid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtinv);
                            if (dtinv.Rows.Count > 0)
                            {
                                maxingid = Convert.ToString(dtinv.Rows[0]["invoice_gid"].ToString());

                                for (int tax = 0; tax < Temptaxtable.Rows.Count; tax++)
                                {
                                    if (Temptaxtable.Rows[tax]["invoice_gid"].ToString() == (i + 1).ToString())
                                    {
                                        string[,] codestax = new string[,]
	                                    {
	                                        {"invoicetax_invoice_gid", maxingid},
                                            {"invoicetax_tax_gid",Temptaxtable.Rows[tax]["tax_nameid"].ToString() },
	                                        {"invoicetax_taxsubtype_gid", Temptaxtable.Rows[tax]["TaxSubTypeID"].ToString()},
                                            {"invoicetax_gl_no","0" },
	                                        {"invoicetax_rate_change", Temptaxtable.Rows[tax]["invoicetax_rate_change"].ToString()},       
                                            {"invoicetax_rate",Temptaxtable.Rows[tax]["invoicetax_rate"].ToString() },
	                                        {"invoicetax_taxable_amount", Temptaxtable.Rows[tax]["invoicetax_taxable_amount"].ToString()},
                                            {"invoicetax_amount", Temptaxtable.Rows[tax]["invoicetax_amount"].ToString()}
            
                                         };
                                        string tnametax = "iem_trn_tinvoicetax";
                                        insertcommend = objCommonIUD.InsertCommon(codestax, tnametax);
                                    }
                                }
                                for (int tax = 0; tax < Temppaymenttable.Rows.Count; tax++)
                                {
                                    if (Temppaymenttable.Rows[tax]["invoice_gid"].ToString() == (i + 1).ToString())
                                    {
                                        string Emp_Msgl = "";
                                        string arf_gids = "";
                                        string exptions = "";
                                        if (Temppaymenttable.Rows[tax]["ecfcreditline_pay_mode"].ToString() == "PPX")
                                        {
                                            GetConnection();
                                            DataTable dtarfppx = new DataTable();
                                            cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                            cmd.CommandType = CommandType.StoredProcedure;
                                            cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = Temppaymenttable.Rows[tax]["ecfcreditline_ref_no"].ToString();
                                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpPaymentarfgid";
                                            da = new SqlDataAdapter(cmd);
                                            da.Fill(dtarfppx);
                                            if (dt.Rows.Count > 0)
                                            {
                                                Emp_Msgl = Convert.ToString(dtarfppx.Rows[0]["ecfarf_dr_gl_no"].ToString());
                                                arf_gids = Convert.ToString(dtarfppx.Rows[0]["ecfarf_gid"].ToString());
                                                exptions = Convert.ToString(dtarfppx.Rows[0]["ecfarf_exception"].ToString());

                                                decimal mainamt = Convert.ToDecimal(Temppaymenttable.Rows[tax]["ecfcreditline_amount"].ToString());
                                                decimal exption = Convert.ToDecimal(exptions);

                                                decimal final = 0;
                                                final = exption - mainamt;
                                                string[,] codesupA = new string[,]
	                                           {
                                                   {"ecfarf_exception",final.ToString() }
                                              };
                                                string[,] whcosA = new string[,]
	                                           {
	                                              {"ecfarf_gid", arf_gids},
                                              };
                                                string tnameupA = "iem_trn_tecfarf";

                                                string insertcommendupw = objCommonIUD.UpdateCommon(codesupA, whcosA, tnameupA);

                                                string[,] codesarft = new string[,]
	                                           {
                                                    {"arftran_invoice_gid",maxingid},
                                                    {"arftran_ecf_gid",maxecfgid },
	                                                {"arftran_date", "sysdatetime()"},
                                                    {"arftran_gl_no",Emp_Msg },
	                                                {"arftran_desc", objCmnFunctions.Getreplacesinglequotes(Temppaymenttable.Rows[tax]["ecfcreditline_desc"].ToString())},
                                                    {"arftran_amount",Temppaymenttable.Rows[tax]["ecfcreditline_amount"].ToString() },
                                                    {"arftran_mult", "-1"},
	                                                {"arftran_ref_flag", "1"},
                                                    {"arftran_ref_gid",arf_gids}            
                                              };
                                                string tnamearft = "iem_trn_tarftran";

                                                string insertcommendarft = objCommonIUD.InsertCommon(codesarft, tnamearft);
                                            }
                                        }
                                        string[,] codes = new string[,]
	                                    {
                                            {"ecfcreditline_ecf_gid",maxecfgid },
	                                        {"ecfcreditline_invoice_gid", maxingid},
                                            {"ecfcreditline_pay_mode",Temppaymenttable.Rows[tax]["ecfcreditline_pay_mode"].ToString()},
	                                        {"ecfcreditline_ref_no", Temppaymenttable.Rows[tax]["ecfcreditline_ref_no"].ToString()},
                                            {"ecfcreditline_beneficiary",objCmnFunctions.Getreplacesinglequotes(Temppaymenttable.Rows[tax]["ecfcreditline_beneficiary"].ToString())},
	                                        {"ecfcreditline_gl_no", Temppaymenttable.Rows[tax]["ecfcreditline_gl_no"].ToString()},
                                            {"ecfcreditline_desc",objCmnFunctions.Getreplacesinglequotes(Temppaymenttable.Rows[tax]["ecfcreditline_desc"].ToString())},
	                                        {"ecfcreditline_amount", Temppaymenttable.Rows[tax]["ecfcreditline_amount"].ToString()}             
                                        };
                                        string tname = "iem_trn_tecfcreditline";

                                        insertcommend = objCommonIUD.InsertCommon(codes, tname);
                                    }
                                }
                                for (int tax = 0; tax < Tempdebittable.Rows.Count; tax++)
                                {
                                    if (Tempdebittable.Rows[tax]["invoice_gid"].ToString() == (i + 1).ToString())
                                    {
                                        if (Tempdebittable.Rows[tax]["ecfdebitline_amount"].ToString() != "" && Tempdebittable.Rows[tax]["ecfdebitline_amount"].ToString() != "0.00")
                                        {
                                            string ousplit = Tempdebittable.Rows[tax]["ecfdebitline_ou_code"].ToString();
                                            string[] oussp = ousplit.Split('-');

                                            string Productsplit = Tempdebittable.Rows[tax]["ecfdebitline_product_code"].ToString();
                                            string[] Productsp = Productsplit.Split('-');

                                            string catgry = Tempdebittable.Rows[tax]["ecfdebitline_category_type"].ToString();

                                            string prodservice_gid = Tempdebittable.Rows[tax]["ecfdebitline_prodservice_gid"].ToString();
                                            string invoicepoitem_gid = Tempdebittable.Rows[tax]["ecfdebitline_invoicepoitem_gid"].ToString();

                                            if (prodservice_gid == "")
                                            {
                                                prodservice_gid = "0";
                                            }
                                            if (invoicepoitem_gid == "")
                                            {
                                                invoicepoitem_gid = "0";
                                            }


                                            if (catgry == "A")
                                            {
                                                string[,] codes = new string[,]
	                                       {
                                            {"ecfdebitline_ecf_gid",maxecfgid },
	                                        {"ecfdebitline_invoice_gid", maxingid},

                                             {"ecfdebitline_category_type",catgry },
                                             {"ecfdebitline_assetcategory_gid",Tempdebittable.Rows[tax]["ecfdebitline_assetcategory_gid"].ToString() },
                                             {"ecfdebitline_assetsubcategory_gid",Tempdebittable.Rows[tax]["ecfdebitline_assetsubcategory_gid"].ToString() },
                                             {"ecfdebitline_prodservice_gid",prodservice_gid },
                                             {"ecfdebitline_invoicepoitem_gid",invoicepoitem_gid },

                                            {"ecfdebitline_expnature_gid","0" },
	                                        {"ecfdebitline_expcat_gid", "0"},
                                            {"ecfdebitline_expsubcat_gid","0" },
	                                        {"ecfdebitline_gl_no", Tempdebittable.Rows[tax]["ecfdebitline_gl_no"].ToString()},       
                                            {"ecfdebitline_fc_code",Tempdebittable.Rows[tax]["ecfdebitline_fc_code"].ToString() },
	                                        {"ecfdebitline_cc_code", Tempdebittable.Rows[tax]["ecfdebitline_cc_code"].ToString()},
                                            {"ecfdebitline_product_code", Productsp[0].ToString()},
                                            {"ecfdebitline_ou_code",oussp[0].ToString()},
                                            {"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(Tempdebittable.Rows[tax]["ecfclaimmonth"].ToString()))}, 
	                                        {"ecfdebitline_amount", Tempdebittable.Rows[tax]["ecfdebitline_amount"].ToString()},
                                            {"ecfdebitline_desc",objCmnFunctions.Getreplacesinglequotes(Tempdebittable.Rows[tax]["invoice_desc"].ToString())},   
                                           };
                                                string tname = "iem_trn_tecfdebitline";
                                                insertcommend = objCommonIUD.InsertCommon(codes, tname);
                                            }
                                            else
                                            {
                                                string[,] codes = new string[,]
	                                       {
                                            {"ecfdebitline_ecf_gid",maxecfgid },
	                                        {"ecfdebitline_invoice_gid", maxingid},

                                             {"ecfdebitline_category_type",catgry },
                                             {"ecfdebitline_assetcategory_gid","0" },
                                             {"ecfdebitline_assetsubcategory_gid","0" },
                                             {"ecfdebitline_prodservice_gid",prodservice_gid },
                                             {"ecfdebitline_invoicepoitem_gid",invoicepoitem_gid },

                                            {"ecfdebitline_expnature_gid",Tempdebittable.Rows[tax]["expnature_nameid"].ToString() },
	                                        {"ecfdebitline_expcat_gid", Tempdebittable.Rows[tax]["expcat_nameid"].ToString()},
                                            {"ecfdebitline_expsubcat_gid",Tempdebittable.Rows[tax]["expsubcat_nameid"].ToString() },
	                                        {"ecfdebitline_gl_no", Tempdebittable.Rows[tax]["ecfdebitline_gl_no"].ToString()},       
                                            {"ecfdebitline_fc_code",Tempdebittable.Rows[tax]["ecfdebitline_fc_code"].ToString() },
	                                        {"ecfdebitline_cc_code", Tempdebittable.Rows[tax]["ecfdebitline_cc_code"].ToString()},
                                            {"ecfdebitline_product_code", Productsp[0].ToString()},
                                            {"ecfdebitline_ou_code",oussp[0].ToString()},
                                            {"ecfdebitline_period_from",objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(Tempdebittable.Rows[tax]["ecfclaimmonth"].ToString()))}, 
	                                        {"ecfdebitline_amount", Tempdebittable.Rows[tax]["ecfdebitline_amount"].ToString()},
                                            {"ecfdebitline_desc",objCmnFunctions.Getreplacesinglequotes(Tempdebittable.Rows[tax]["invoice_desc"].ToString())},   
                                           };
                                                string tname = "iem_trn_tecfdebitline";
                                                insertcommend = objCommonIUD.InsertCommon(codes, tname);
                                            }
                                        }
                                    }
                                }
                                for (int pocont = 0; pocont < Temppamapptable.Rows.Count; pocont++)
                                {
                                    string mainpoid = Temppamapptable.Rows[pocont]["PO_details"].ToString();

                                    string[,] codes = new string[,]
	                                 {
                                         {"invoicepo_invoice_gid",maxingid.ToString()},
                                         {"invoicepo_po_gid", mainpoid.ToString()},  
                                         {"invoicepo_mapped_amount",Temppamapptable.Rows[pocont]["invoicepo_mapped_amount"].ToString() }
                                     };
                                    string tname = "iem_trn_tinvoicepo";

                                    insertcommend = objCommonIUD.InsertCommon(codes, tname);
                                    Emp_Msg = insertcommend.ToString();
                                    string currpogid = "0";
                                    GetConnection();
                                    DataTable dtmaxx = new DataTable();
                                    cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = maxingid;
                                    cmd.Parameters.Add("@invoice_po_gid", SqlDbType.VarChar).Value = mainpoid;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "invoicemaxgidpo";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtmaxx);
                                    if (dtmaxx.Rows.Count > 0)
                                    {
                                        currpogid = Convert.ToString(dtmaxx.Rows[0]["invoicepo_gid"].ToString());
                                    }
                                    for (int items = 0; items < Temppoitemtable.Rows.Count; items++)
                                    {
                                        string newpo = Temppoitemtable.Rows[items]["invoicepo_po_gid"].ToString();
                                        if (newpo == mainpoid)
                                        {
                                            string[,] codesi = new string[,]
	                                         {
                                            {"invoicepoitem_invoice_gid",maxingid.ToString()},
                                            {"invoicepoitem_po_gid", currpogid},  
                                            {"invoicepoitem_poitem_gid",Temppoitemtable.Rows[items]["invoicepo_itemdetail_gidnew"].ToString()},
                                            {"invoicepoitem_qty", Temppoitemtable.Rows[items]["POcurrentqty"].ToString()},  
                                            {"invoicepoitem_rate",Temppoitemtable.Rows[items]["POrate"].ToString()},
                                            {"invoicepoitem_amount", Temppoitemtable.Rows[items]["POAmount"].ToString()},  
                                            };
                                            string tnamei = "iem_trn_tinvoicepoitem";

                                            insertcommend = objCommonIUD.InsertCommon(codesi, tnamei);
                                        }
                                    }
                                }

                                int ct_status = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());

                                string[,] codesqct = new string[,]
	                           {
                      {"centralinward_ecf_gid",maxecfgid.ToString() },
                      {"centralinward_status","262144" }
                              };
                                string[,] whreqct = new string[,]
	                           {
                    {"centralinward_gid",CentralTables.Rows[i]["centralinward_gid"].ToString() }
                              };
                                string tnameqct = "iem_trn_tcentralinward";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesqct, whreqct, tnameqct);


                                string[,] codesat = new string[,]
	                   {
                          {"attachment_ref_gid",maxecfgid },
                          {"attachment_invoice_gid",maxingid }
                       };
                                string[,] whcosat = new string[,]
	                    {
                          {"attachment_ref_gid","0" },
                          {"attachment_invoice_gid",CentralTables.Rows[i]["invoicegid"].ToString() },
                          {"attachment_ref_flag","1" }
                        };
                                string tnameat = "iem_trn_tattachment";

                                string insertcommendat = objCommonIUD.UpdateCommon(codesat, whcosat, tnameat);
                            }
                        }

                        string[,] codesats = new string[,]
	                   {
                          {"attachment_ref_gid",maxecfgid }
                       };
                        string[,] whcosats = new string[,]
	                    {
                          {"attachment_ref_gid","0" }
                        };
                        string tnameats = "iem_trn_tattachment";

                        string insertcommendats = objCommonIUD.UpdateCommon(codesats, whcosats, tnameats);

                        if (EmployeeeExpenseModel.ecfremark == null)
                        {
                            Emp_Msgecfremark = "";
                        }
                        else
                        {
                            Emp_Msgecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());

                        }
                        int ecf_statusaction = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"].ToString());
                        int ecf_status = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"].ToString());
                        insertcommend = "Success";
                        if (insertcommend != "")
                        {
                            if (queid.ToString().Trim() != "")
                            {
                                string[,] codesq = new string[,]
	                           {
                      {"queue_action_date","sysdatetime()"},
                      {"queue_action_by",logeempid.ToString() },
                      {"queue_action_status",ecf_statusaction.ToString() },
                      {"queue_action_remark",Emp_Msgecfremark.ToString() }
                              };
                                string[,] whreq = new string[,]
	                           {
                    {"queue_gid",queid.ToString() }
                              };
                                string tnameq = "iem_trn_tqueue";
                                string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);
                            }
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_trn_tecf", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = Convert.ToInt32(maxecfgid);
                            cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = Emp_Msgecfremark;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "edit";
                            int data = cmd.ExecuteNonQuery();
                            insertcommend = "Success";
                            if (insertcommend == "Success")
                            {
                                GetConnection();
                                DataTable dtmaxx = new DataTable();
                                cmd = new SqlCommand("pr_eow_com_ecfdetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = maxecfgid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ecfno";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtmaxx);
                                if (dtmaxx.Rows.Count > 0)
                                {
                                    Emp_Msg = Convert.ToString(dtmaxx.Rows[0]["ecf_no"].ToString());
                                    Emp_Msg = "Your ECF Number is : " + Emp_Msg;
                                }
                            }

                            string[,] codes = new string[,]
	                                   {
                            {"queue_date","sysdatetime()"},
	                        {"queue_ref_flag", "1"},
                            {"queue_ref_gid",maxecfgid },
	                        {"queue_ref_status", centralteam.ToString()},
                            {"queue_from",centralmaker.ToString() },
	                        {"queue_to_type", "R"},
                            {"queue_to",centralckecker.ToString()},
	                        {"queue_action_for", "A"},  
                            {"queue_prev_gid", "0"},
                                      };

                            string tname = "iem_trn_tqueue";

                            string insertcommendecf = objCommonIUD.InsertCommon(codes, tname);

                            if (insertcommendecf == "success")
                            {
                                DataSet dtempsupnew = new DataSet();
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = maxecfgid;
                                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = centralmaker;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queuemaxgid";
                                da = new SqlDataAdapter(cmd);
                                da.Fill(dtempsupnew);
                                if (dtempsupnew.Tables[0].Rows.Count > 0)
                                {
                                    queue_gid = Convert.ToString(dtempsupnew.Tables[0].Rows[0]["queue_gid"].ToString());
                                }

                                if (queue_gid != "")
                                {
                                    string[,] codesUP = new string[,]
	                                       {       
	                            {"ecf_queue_gid", queue_gid},
                                {"ecf_queue_to_type","R" },
	                            {"ecf_queue_to", centralckecker.ToString()},
                                {"ecf_status",centralteam.ToString() },
                                {"ecf_all_status",centralteam.ToString() },
	                            {"ecf_urgent_flag","N"},
                                {"ecf_action_by",logeempid.ToString() },
	                            {"ecf_action_date","sysdatetime()"}
                                          };
                                    string[,] whcosup = new string[,]
	                                       {
                                {"ecf_raiser",CentralTables.Rows[0]["employee_gid"].ToString() },
	                            {"ecf_gid", maxecfgid}
                                          };
                                    string tnameUP = "iem_trn_tecf";

                                    string insertcommendUP = objCommonIUD.UpdateCommon(codesUP, whcosup, tnameUP);

                                    string mail = queue_gid.ToString();
                                    GetConnection();
                                    DataTable dtdoctype = new DataTable();
                                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                                    da = new SqlDataAdapter(cmd);
                                    da.Fill(dtdoctype);
                                    if (dtdoctype.Rows.Count > 0)
                                    {
                                        string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                                        doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                                        mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                                    }
                                }
                            }
                            //}
                        }
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string UpdateCentralinvoicedash(EOW_Supplierinvoice EmployeeeExpenseModel, string logeempid, string clmtype, string queid, string raiser, string ecfgid)
        {

            int centralteam = Convert.ToInt32(ConfigurationManager.AppSettings["EcfCentralMkr"].ToString());
            int centralmaker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralmaker"].ToString());
            int centralckecker = Convert.ToInt32(ConfigurationManager.AppSettings["Centralchecker"].ToString());
            string Emp_Msg = "";
            string Emp_Msgecfremark = "";
            string insertcommend = "";
            string ecfamortdescs = "";
            string queue_gid = "";
            try
            {
                //ecf date update
                GetConnection();
                DataTable dt1 = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetECFNo";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt1);
                if (dt1.Rows.Count > 0)
                {
                    ecf_no1 = dt1.Rows[0][0].ToString();
                }
                if (string.IsNullOrEmpty(ecf_no1))
                {
                    string[,] codesUP1 = new string[,]
	                    {
	                        {"ecf_date", objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString()},
                            {"ecf_insert_by", objCmnFunctions.GetLoginUserGid().ToString()}
                                     
                        };
                    string[,] whcosup1 = new string[,]
	                    {
                                      
	                        {"ecf_gid", ecfgid}
                        };
                    string tnameUP1 = "iem_trn_tecf";
                    string insertcommendUP1 = objCommonIUD.UpdateCommon(codesUP1, whcosup1, tnameUP1);
                }
                //
                string Emp_Msgamort = "";
                string maxecfgid = "";
                string ecfdesition = "";
                if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                {
                    ecfdesition = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                }
                if (EmployeeeExpenseModel.amortdec != "" && EmployeeeExpenseModel.amortdec != null)
                {
                    ecfamortdescs = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.amortdec.ToString());
                }
                maxecfgid = ecfgid.ToString();
                string insertcommendUPd = "";
                if (EmployeeeExpenseModel.amort.ToString() == "Yes")
                {

                    Emp_Msgamort = "Y";
                    string[,] codesUP1 = new string[,]
	               {
        
                    {"ecf_amount", EmployeeeExpenseModel.ECF_Amount},
                    {"ecf_amort_flag", Emp_Msgamort},
                    {"ecf_amort_from",objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.from).ToString()},
                    {"ecf_amort_to", objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.to).ToString()},
                    {"ecf_amort_desc", ecfamortdescs},
                    {"ecf_status",centralteam.ToString() },
                    {"ecf_description",ecfdesition.ToString() },
                    {"ecf_all_status",centralteam.ToString() },        
	 
                  };
                    string tnameUP1 = "iem_trn_tecf";
                    string[,] whcosup1 = new string[,]
	                   {

	                            {"ecf_gid", maxecfgid}
                        };

                    insertcommendUPd = objCommonIUD.UpdateCommon(codesUP1, whcosup1, tnameUP1);

                }
                else
                {
                    string[,] codesUP1 = new string[,]
	               {

                    {"ecf_description",ecfdesition.ToString() },

                  };
                    string tnameUP1 = "iem_trn_tecf";
                    string[,] whcosup1 = new string[,]
	                   {

	                            {"ecf_gid", maxecfgid}
                        };

                    insertcommendUPd = objCommonIUD.UpdateCommon(codesUP1, whcosup1, tnameUP1);
                }
                insertcommendUPd = "Success";
                if (insertcommendUPd == "Success")
                {
                    if (EmployeeeExpenseModel.ecfremark == null)
                    {
                        Emp_Msgecfremark = "";
                    }
                    else
                    {
                        Emp_Msgecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());

                    }
                    insertcommend = "Success";
                    if (insertcommend != "")
                    {
                        if (queid.ToString().Trim() != "")
                        {
                            string[,] codesq = new string[,]
	                           {
                      {"queue_isremoved","Y"},
                      //{"queue_prev_gid", "-1"},
                      {"queue_action_date","sysdatetime()"},
                      {"queue_action_by",logeempid.ToString() },
                      {"queue_action_status","1" },
                      {"queue_action_remark",Emp_Msgecfremark.ToString()}
                              };
                            string[,] whreq = new string[,]
	                           {
                    {"queue_gid",queid.ToString() }
                              };
                            string tnameq = "iem_trn_tqueue";
                            string insertcommendq = objCommonIUD.UpdateCommon(codesq, whreq, tnameq);
                        }

                        string[,] codes = new string[,]
	                                   {
                            {"queue_date","sysdatetime()"},
	                        {"queue_ref_flag", "1"},
                            {"queue_ref_gid",maxecfgid },
	                        {"queue_ref_status", centralteam.ToString()},
                            {"queue_from",centralmaker.ToString() },
	                        {"queue_to_type", "R"},
                            {"queue_to",centralckecker.ToString()},
	                        {"queue_action_for", "A"},    
                            {"queue_prev_gid", queid}
                                      };

                        string tname = "iem_trn_tqueue";

                        string insertcommendecf = objCommonIUD.InsertCommon(codes, tname);

                        if (insertcommendecf == "success")
                        {
                            DataSet dtempsupnew = new DataSet();
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_queuedetails", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@ref_gid", SqlDbType.VarChar).Value = maxecfgid;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = centralmaker;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queuemaxgid";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtempsupnew);
                            if (dtempsupnew.Tables[0].Rows.Count > 0)
                            {
                                queue_gid = Convert.ToString(dtempsupnew.Tables[0].Rows[0]["queue_gid"].ToString());
                            }

                            if (queue_gid != "")
                            {
                                string[,] codesUP = new string[,]
	                                       {       
	                            {"ecf_queue_gid", queue_gid},
                                {"ecf_queue_to_type","R" },
	                            {"ecf_queue_to", centralckecker.ToString()},
                                {"ecf_status",centralteam.ToString() },
                                {"ecf_all_status",centralteam.ToString() },
	                            {"ecf_urgent_flag","N"},
                                {"ecf_action_by",logeempid.ToString() },
	                            {"ecf_action_date","sysdatetime()"}
                                          };
                                string[,] whcosup = new string[,]
	                                       {
                                {"ecf_raiser",raiser.ToString() },
	                            {"ecf_gid", maxecfgid}
                                          };
                                string tnameUP = "iem_trn_tecf";

                                string insertcommendUP = objCommonIUD.UpdateCommon(codesUP, whcosup, tnameUP);
                                Emp_Msg = "Success";
                            }
                        }

                        string[,] codesqctk = new string[,]
	                           {
                     
                      {"centralinward_status","262144" }
                              };
                        string[,] whreqctk = new string[,]
	                           {
                    {"centralinward_ecf_gid",maxecfgid.ToString() },
                              };
                        string tnameqctk = "iem_trn_tcentralinward";
                        string insertcommendqk = objCommonIUD.UpdateCommon(codesqctk, whreqctk, tnameqctk);


                        string mail = queue_gid.ToString();
                        GetConnection();
                        DataTable dtdoctype = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = mail;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdocsubtype";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdoctype);
                        if (dtdoctype.Rows.Count > 0)
                        {
                            string doctypeid = Convert.ToString(dtdoctype.Rows[0]["docsubtype_gid"].ToString());
                            doctypeid = objCmnFunctions.GetSubDocType(doctypeid);
                            mailsender.sendusermail("EOW", doctypeid, mail, "S", "0");
                        }
                        //}
                    }
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Raiserfc> fcdata()
        {
            List<EOW_Raiserfc> objNatureofExpenses = new List<EOW_Raiserfc>();
            try
            {

                EOW_Raiserfc objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_fcccdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "fcdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_Raiserfc();
                    objModel.raiserfcId = Convert.ToString(dt.Rows[i]["fc_code"].ToString());
                    objModel.raiserfcName = Convert.ToString(dt.Rows[i]["fc_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Raisercc> ccdata()
        {
            List<EOW_Raisercc> objNatureofExpenses = new List<EOW_Raisercc>();
            try
            {

                EOW_Raisercc objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_fcccdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_Raisercc();
                    objModel.raiserccId = Convert.ToString(dt.Rows[i]["cc_code"].ToString());
                    objModel.raiserccName = Convert.ToString(dt.Rows[i]["cc_name"].ToString());
                    objNatureofExpenses.Add(objModel);
                }
                return objNatureofExpenses;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofExpenses;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectfccc(string fc, string cc)
        {
            string Emp_Msg = "";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_fcccdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@fccode", SqlDbType.VarChar).Value = fc.ToString();
                cmd.Parameters.Add("@cccode", SqlDbType.VarChar).Value = cc.ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "fcccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["fccc_name"].ToString());
                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectfcccval(string fc, string cc)
        {
            string status = "";
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_mailckeck", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@modulecode", SqlDbType.VarChar).Value = fc.ToString();
                cmd.Parameters.Add("@mailtypename", SqlDbType.VarChar).Value = cc.ToString();
                cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "Empfccc";
                status = (string)cmd.ExecuteScalar();
                return status;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Employeelst> SelectSupplierSearch(string SupplierName, string SupplierCode)
        {
            List<EOW_Employeelst> emp = new List<EOW_Employeelst>();
            try
            {
                GetConnection();
                DataTable dt = new DataTable();

                EOW_Employeelst objModel;
                cmd = new SqlCommand("pr_iem_trn_tcentralinward", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@SUPLIERNAME", SqlDbType.VarChar).Value = SupplierName;
                cmd.Parameters.Add("@SUPPLIERCODE", SqlDbType.VarChar).Value = SupplierCode;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTSUPPLIERDETAILSSEARCH";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_Employeelst();
                    objModel.employeeGid = Convert.ToInt32(row["supplierheader_gid"].ToString());
                    objModel.empCode = row["supplierheader_suppliercode"].ToString();
                    objModel.empName = row["supplierheader_name"].ToString();
                    objModel.empMSME = row["Supplier_MSME"].ToString();
                    objModel.empMSMEID = row["supplierheader_ismsmed"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_PO> SelectPOSearch(string PONO, string podate, string poamt, string suppierid, string potype)
        {
            EOW_PO objModel;
            DataTable dt = new DataTable();
            List<EOW_PO> objOrgType = new List<EOW_PO>();
            try
            {
                decimal poamts = 0;
                string ponos = "";
                string podates = "";
                if (poamt != null)
                {
                    poamts = Convert.ToDecimal(poamt);
                }
                if (podate != null)
                {
                    podates = objCmnFunctions.convertoDateTimeString(podate);
                }
                if (PONO != null)
                {
                    ponos = PONO;
                }

                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpodetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@PONo", SqlDbType.VarChar).Value = ponos;
                cmd.Parameters.Add("@POAmount", SqlDbType.Decimal).Value = poamts;
                cmd.Parameters.Add("@POdate", SqlDbType.VarChar).Value = podates;
                cmd.Parameters.Add("@potype", SqlDbType.VarChar).Value = potype;
                cmd.Parameters.Add("@Supplierid", SqlDbType.Int).Value = Convert.ToInt32(suppierid);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "LISTSEARCH";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PO();

                    objModel.PONo = dt.Rows[i]["poheader_pono"].ToString();
                    objModel.POdate = dt.Rows[i]["poheader_date"].ToString();
                    string open = dt.Rows[i]["poheader_isclosed"].ToString();
                    if (open == "N")
                    {
                        open = "Open";
                    }
                    else
                    {
                        open = "Close";
                    }
                    objModel.POStatus = open;
                    objModel.POGid = dt.Rows[i]["poheader_gid"].ToString();
                    objModel.POAmount = dt.Rows[i]["poheader_over_total"].ToString();
                    objOrgType.Add(objModel);
                }
                return objOrgType;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objOrgType;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_PO> GetPoDetails(string Supplier, string potype)
        {
            EOW_PO objModel;
            DataTable dt = new DataTable();
            List<EOW_PO> objOrgType = new List<EOW_PO>();
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpodetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.Int).Value = Convert.ToInt32(Supplier);
                cmd.Parameters.Add("@potype", SqlDbType.VarChar).Value = potype;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "LIST";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PO();

                    objModel.PONo = dt.Rows[i]["poheader_pono"].ToString();
                    objModel.POdate = dt.Rows[i]["poheader_date"].ToString();
                    string open = dt.Rows[i]["poheader_isclosed"].ToString();
                    if (open == "N")
                    {
                        open = "Open";
                    }
                    else
                    {
                        open = "Close";
                    }
                    objModel.POStatus = open;
                    objModel.POGid = dt.Rows[i]["poheader_gid"].ToString();
                    objModel.POAmount = dt.Rows[i]["poheader_over_total"].ToString();
                    objModel.POApprovedStatus = dt.Rows[i]["status_name"].ToString();
                    objModel.PoGstStatus = dt.Rows[i]["PoGststatus"].ToString();
                    objOrgType.Add(objModel);
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objOrgType;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return objOrgType;
        }
        public IEnumerable<EOW_PO> GetPoDetailssingledata(string id)
        {
            EOW_PO objModel;
            DataTable dt = new DataTable();
            List<EOW_PO> objOrgType = new List<EOW_PO>();
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpodetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@POid", SqlDbType.Int).Value = Convert.ToInt32(id);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Singlepono";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PO();

                    objModel.PONo = dt.Rows[i]["poheader_pono"].ToString();
                    objModel.POdate = dt.Rows[i]["poheader_date"].ToString();
                    string open = dt.Rows[i]["poheader_isclosed"].ToString();
                    if (open == "N")
                    {
                        open = "Open";
                    }
                    else
                    {
                        open = "Close";
                    }
                    objModel.POStatus = open;
                    objModel.POGid = dt.Rows[i]["poheader_gid"].ToString();
                    objModel.POAmount = dt.Rows[i]["poheader_over_total"].ToString();
                    objModel.POApprovedStatus = dt.Rows[i]["status_name"].ToString();

                    objModel.POBalamount = dt.Rows[i]["poheader_over_total"].ToString();
                    objModel.POUtilizedamount = dt.Rows[i]["poheader_over_total"].ToString();
                    objOrgType.Add(objModel);
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objOrgType;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return objOrgType;
        }
        public IEnumerable<EOW_PO> Getpodetailsgrid(string values, string valuesid, string ecfid, string invoiceid, string id)
        {
            List<EOW_PO> objExpense = new List<EOW_PO>();
            try
            {

                EOW_PO objModel;
                DataTable dt = new DataTable();
                if (invoiceid != "")
                {
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_sup_getpodetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@Invoiceid", SqlDbType.Int).Value = Convert.ToInt32(invoiceid);
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Invoiceaddpo";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_PO();
                        objModel.POGid = Convert.ToString(dt.Rows[i]["invoicepo_gid"].ToString());
                        objModel.PONo = Convert.ToString(dt.Rows[i]["poheader_pono"].ToString());
                        objModel.POdate = Convert.ToString(dt.Rows[i]["poheader_date"].ToString());
                        string sumamt = dt.Rows[i]["amount"].ToString();
                        if (sumamt == "0" || sumamt == "")
                        {
                            sumamt = "0";
                        }
                        objModel.POMapAmount = Convert.ToString(sumamt);
                        string open = dt.Rows[i]["poheader_isclosed"].ToString();
                        if (open == "N")
                        {
                            open = "Open";
                        }
                        else
                        {
                            open = "Close";
                        }
                        objModel.POStatus = open;
                        objExpense.Add(objModel);
                    }
                    if (values != null && valuesid != null)
                    {
                        string[,] codesamt = new string[,]
	               {
                        {"invoicepo_mapped_amount", values.ToString().Replace(",","")},  
                  };
                        string[,] whrsamt = new string[,]
	               {
                        {"invoicepo_invoice_gid",invoiceid.ToString()},
                        {"invoicepo_gid", valuesid.ToString()},  
                  };
                        string tnameamt = "iem_trn_tinvoicepo";

                        string insertcommendamt = objCommonIUD.UpdateCommon(codesamt, whrsamt, tnameamt);
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string Insertpodetails(EOW_PO supplierpo, string id)
        {
            string Emp_Msg = "";
            try
            {

                string[,] codes = new string[,]
	               {
                        {"invoicepo_invoice_gid",id.ToString()},
                        {"invoicepo_po_gid", supplierpo.POGid.ToString()},  
                        {"invoicepo_mapped_amount","0" }
                  };
                string tname = "iem_trn_tinvoicepo";

                string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                Emp_Msg = insertcommend.ToString();

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_PO> GetPoDetailsitemcen(string ecfid, string invoiceid, string id)
        {
            List<EOW_PO> objExpense = new List<EOW_PO>();
            decimal poampamt = 0;
            decimal poinvoicedampamt = 0;
            decimal porecdampamt = 0;
            try
            {

                EOW_PO objModel;
                DataSet dt = new DataSet();
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_Getpomappeddetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "POmappedcentral";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                for (int i = 0; i < dt.Tables[0].Rows.Count; i++)
                {
                    string amt = "";
                    if (poampamt == 0)
                    {
                        amt = Convert.ToString(dt.Tables[0].Rows[i]["invoicepoitem_amount"].ToString());
                        if (amt != "")
                        {
                            poampamt = Convert.ToDecimal(amt);
                        }
                    }
                    else
                    {
                        amt = Convert.ToString(dt.Tables[0].Rows[i]["invoicepoitem_amount"].ToString());
                        if (amt != "")
                        {
                            poampamt = poampamt + Convert.ToDecimal(amt);
                        }

                    }
                    objModel = new EOW_PO();
                    objModel.POGid = Convert.ToString(dt.Tables[0].Rows[i]["podetails_gid"].ToString());
                    objModel.POserprogid = Convert.ToString(dt.Tables[0].Rows[i]["prodservice_gid"].ToString());
                    objModel.POserprocode = Convert.ToString(dt.Tables[0].Rows[i]["prodservice_code"].ToString());
                    objModel.POserprodesc = Convert.ToString(dt.Tables[0].Rows[i]["prodservice_name"].ToString());
                    objModel.POassetgl = Convert.ToString("1234");
                    objModel.POorderqty = Convert.ToString(dt.Tables[0].Rows[i]["podetails_qty"].ToString());
                    objModel.POreceivedqty = Convert.ToString(dt.Tables[0].Rows[i]["grninwrddet_reced_qty"].ToString());
                    string invoicedqty = Convert.ToString(dt.Tables[0].Rows[i]["POinvoiceqty"].ToString());
                    if (invoicedqty == "")
                    {
                        invoicedqty = "0";
                    }
                    string invoicedqtymain = "0";
                    if (dt.Tables[1].Rows.Count > i)
                    {
                        DataRow[] resultitem = dt.Tables[1].Select("podetails_gid = '" + Convert.ToString(dt.Tables[0].Rows[i]["prodservice_gid"].ToString()) + "'");
                        int count = resultitem.Length;
                        if (count > 0)
                        {
                            invoicedqtymain = resultitem[0]["POinvoiceqty"].ToString();
                            if (invoicedqtymain == "")
                            {
                                invoicedqtymain = "0";
                            }
                        }
                        //invoicedqtymain = Convert.ToString(dt.Tables[1].Rows[i]["POinvoiceqty"].ToString());
                        //if (invoicedqtymain == "")
                        //{
                        //    invoicedqtymain = "0";
                        //}
                    }
                    objModel.POcurrentqty = invoicedqty;
                    objModel.POinvoiceqty = invoicedqtymain;

                    decimal tootalamts = 0;
                    tootalamts = Convert.ToDecimal(invoicedqtymain) * Convert.ToDecimal(dt.Tables[0].Rows[i]["podetails_unitprice"].ToString());
                    objModel.POinvoiceqtyamt = tootalamts.ToString();

                    if (poinvoicedampamt == 0)
                    {
                        poinvoicedampamt = Convert.ToDecimal(tootalamts);
                    }
                    else
                    {
                        poinvoicedampamt = poinvoicedampamt + Convert.ToDecimal(tootalamts);
                    }
                    decimal tootalamtsre = 0;
                    tootalamtsre = Convert.ToDecimal(dt.Tables[0].Rows[i]["POreceivedamt"].ToString());
                    if (porecdampamt == 0)
                    {
                        porecdampamt = Convert.ToDecimal(tootalamtsre);
                    }
                    else
                    {
                        porecdampamt = porecdampamt + Convert.ToDecimal(tootalamtsre);
                    }
                    objModel.POreceivedqtyamt = tootalamtsre.ToString();

                    objModel.POrate = Convert.ToString(dt.Tables[0].Rows[i]["podetails_unitprice"].ToString());
                    string invoicedamont = Convert.ToString(dt.Tables[0].Rows[i]["invoicepoitem_amount"].ToString());
                    if (invoicedamont == "")
                    {
                        invoicedamont = "0";
                    }
                    objModel.POAmount = invoicedamont;
                    objExpense.Add(objModel);
                }
                decimal diff = 0;
                diff = porecdampamt - poinvoicedampamt;
                HttpContext.Current.Session["Totalporeceivedamt"] = porecdampamt.ToString();
                HttpContext.Current.Session["Totalpoinvoicedsamt"] = poinvoicedampamt.ToString();
                HttpContext.Current.Session["Totalpomapamt"] = poampamt.ToString();
                HttpContext.Current.Session["Totalpobalacedamt"] = diff.ToString();
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_PO> GetPoDetailsitem(string ecfid, string invoiceid, string id)
        {
            List<EOW_PO> objExpense = new List<EOW_PO>();
            decimal poampamt = 0;
            decimal poinvoicedampamt = 0;
            decimal porecdampamt = 0;
            decimal pototamt = 0;
            try
            {
                EOW_PO objModel;
                DataSet dt = new DataSet();
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_Getpomappeddetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "POmapped";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                for (int i = 0; i < dt.Tables[0].Rows.Count; i++)
                {
                    string amt = "";
                    if (poampamt == 0)
                    {
                        amt = Convert.ToString(dt.Tables[0].Rows[i]["invoicepoitem_amount"].ToString());
                        if (amt != "")
                        {
                            poampamt = Convert.ToDecimal(amt);
                        }
                    }
                    else
                    {
                        amt = Convert.ToString(dt.Tables[0].Rows[i]["invoicepoitem_amount"].ToString());
                        if (amt != "")
                        {
                            poampamt = poampamt + Convert.ToDecimal(amt);
                        }
                    }
                    if (pototamt == 0)
                    {
                        pototamt = Convert.ToDecimal(dt.Tables[0].Rows[i]["podetails_qty"]) * Convert.ToDecimal(dt.Tables[0].Rows[i]["podetails_unitprice"]);
                    }
                    else
                    {
                        pototamt = pototamt + (Convert.ToDecimal(dt.Tables[0].Rows[i]["podetails_qty"]) * Convert.ToDecimal(dt.Tables[0].Rows[i]["podetails_unitprice"]));
                    }
                    objModel = new EOW_PO();
                    objModel.POGid = Convert.ToString(dt.Tables[0].Rows[i]["podetails_gid"].ToString());
                    objModel.POdetldesc = Convert.ToString(dt.Tables[0].Rows[i]["podetails_desc"].ToString());
                    objModel.POserprogid = Convert.ToString(dt.Tables[0].Rows[i]["prodservice_gid"].ToString());
                    objModel.POserprocode = Convert.ToString(dt.Tables[0].Rows[i]["prodservice_code"].ToString());
                    objModel.POserprodesc = Convert.ToString(dt.Tables[0].Rows[i]["prodservice_name"].ToString());
                    objModel.POassetgl = Convert.ToString("1234");
                    objModel.POorderqty = Convert.ToString(dt.Tables[0].Rows[i]["podetails_qty"].ToString());
                    //objModel.POreceivedqty = Convert.ToString(dt.Tables[0].Rows[i]["grninwrddet_reced_qty"].ToString());
                    string invoicedqty = Convert.ToString(dt.Tables[0].Rows[i]["POinvoiceqty"].ToString());
                    if (invoicedqty == "")
                    {
                        invoicedqty = "0";
                    }
                    string invoicedqtyrev = Convert.ToString(dt.Tables[0].Rows[i]["grninwrddet_reced_qty"].ToString());
                    if (invoicedqtyrev == "")
                    {
                        objModel.POreceivedqty = "0";
                    }
                    else
                    {
                        objModel.POreceivedqty = invoicedqtyrev;
                    }
                    string invoicedqtymain = "0";

                    DataTable dtinvoice = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_trn_Getpomappeddetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = id;
                    cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                    cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = Convert.ToString(dt.Tables[0].Rows[i]["podetails_gid"].ToString());
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "POmappedinvoice";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtinvoice);
                    if (dtinvoice.Rows.Count > 0)
                    {
                        if (Convert.ToString(dtinvoice.Rows[0]["POinvoiceqty"].ToString()) != "")
                        {
                            invoicedqtymain = Convert.ToString(dtinvoice.Rows[0]["POinvoiceqty"].ToString());
                            if (invoicedqtymain == "")
                            {
                                invoicedqtymain = "0";
                            }
                        }
                        else
                        {
                            invoicedqtymain = "0";
                        }
                    }
                    objModel.POcurrentqty = invoicedqty;
                    objModel.POinvoiceqty = invoicedqtymain;

                    decimal tootalamts = 0;
                    if (Convert.ToString(dt.Tables[0].Rows[i]["podetails_unitprice"].ToString()) != "")
                    {
                        tootalamts = Convert.ToDecimal(invoicedqtymain) * Convert.ToDecimal(dt.Tables[0].Rows[i]["podetails_unitprice"].ToString());
                        objModel.POinvoiceqtyamt = tootalamts.ToString();
                    }
                    else
                    {
                        objModel.POinvoiceqtyamt = tootalamts.ToString();
                    }
                    if (poinvoicedampamt == 0)
                    {
                        poinvoicedampamt = Convert.ToDecimal(tootalamts);
                    }
                    else
                    {
                        poinvoicedampamt = poinvoicedampamt + Convert.ToDecimal(tootalamts);
                    }
                    decimal tootalamtsre = 0;
                    if (Convert.ToString(dt.Tables[0].Rows[i]["POreceivedamt"].ToString()) != "")
                    {
                        tootalamtsre = Convert.ToDecimal(dt.Tables[0].Rows[i]["POreceivedamt"].ToString());
                    }
                    if (porecdampamt == 0)
                    {
                        porecdampamt = Convert.ToDecimal(tootalamtsre);
                    }
                    else
                    {
                        porecdampamt = porecdampamt + Convert.ToDecimal(tootalamtsre);
                    }
                    objModel.POreceivedqtyamt = tootalamtsre.ToString();
                    objModel.POrate = Convert.ToString(dt.Tables[0].Rows[i]["podetails_unitprice"].ToString());
                    string invoicedamont = Convert.ToString(dt.Tables[0].Rows[i]["invoicepoitem_amount"].ToString());
                    if (invoicedamont == "")
                    {
                        invoicedamont = "0";
                    }
                    objModel.POAmount = invoicedamont;
                    if (invoicedqtyrev == invoicedqtymain)
                    {
                        objModel.BranchType = "No";
                    }
                    objExpense.Add(objModel);
                }
                decimal diff = 0;
                diff = porecdampamt - poinvoicedampamt;
                diff = diff - poampamt;
                decimal podiff = 0;
                podiff = pototamt - (poinvoicedampamt + poampamt);
                HttpContext.Current.Session["Totalporeceivedamt"] = objCmnFunctions.GetINRAmount(porecdampamt.ToString());
                HttpContext.Current.Session["Totalpoinvoicedsamt"] = objCmnFunctions.GetINRAmount(poinvoicedampamt.ToString());
                HttpContext.Current.Session["Totalpomapamt"] = objCmnFunctions.GetINRAmount(poampamt.ToString());
                HttpContext.Current.Session["Totalpobalacedamt"] = objCmnFunctions.GetINRAmount(podiff.ToString());
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string DeleteSupplidepo(string gid, string invoicegid)
        {
            string delant = "0";
            try
            {

                //        string[,] codes = new string[,]
                //           {
                //{"invoicepo_isremoved","Y" }
                //          };
                //        string[,] whcos = new string[,]
                //           {
                //{"invoicepo_invoice_gid",invoicegid.ToString() },
                //{"invoicepo_gid",gid }
                //          };
                //        string tname = "iem_trn_tinvoicepo";

                //        string insertcommend = objCommonIUD.UpdateCommon(codes, whcos, tname);

                //        string[,] codesu = new string[,]
                //           {
                //{"invoicepoitem_isremoved","Y" }
                //          };
                //        string[,] whcosu = new string[,]
                //           {
                //{"invoicepoitem_po_gid",gid.ToString() },
                //{"invoicepoitem_invoice_gid",invoicegid }
                //          };
                //        string tnameu = "iem_trn_tinvoicepoitem";

                //        insertcommend = objCommonIUD.UpdateCommon(codesu, whcosu, tnameu);

                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = gid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoicegid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "deletepodebitline";
                int i = cmd.ExecuteNonQuery();

                try
                {
                    //Split Amount update - GST_Phase3_2 - Ramya
                    GetConnection();
                    DataTable dtSplit = new DataTable();
                    cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = invoicegid;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtSplit);
                }
                catch (Exception ex)
                {

                }

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }

        public string Insertitemdetails(EOW_PO supplierpo, string id)
        {
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string Emp_Msg = "";
            string status = "";
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_mailckeck", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@modulecode", SqlDbType.VarChar).Value = id.ToString();
                cmd.Parameters.Add("@mailtypename", SqlDbType.VarChar).Value = supplierpo.POGid.ToString();
                cmd.Parameters.Add("@triggeron", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "invoicepo";
                status = (string)cmd.ExecuteScalar();
                if (status == "notexists")
                {
                    string[,] codes = new string[,]
	               {
                        {"invoicepoitem_invoice_gid",id.ToString()},
                        {"invoicepoitem_po_gid", supplierpo.POGid.ToString()},  
                        {"invoicepoitem_poitem_gid",supplierpo.POdetlGid.ToString()},
                        {"invoicepoitem_qty", supplierpo.POcurrentqty.ToString()},  
                        {"invoicepoitem_rate",supplierpo.POrate.ToString()},
                        {"invoicepoitem_amount", supplierpo.POMapAmount.ToString()},  
                  };
                    string tname = "iem_trn_tinvoicepoitem";

                    string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                    Emp_Msg = "success";

                    string EcfGidS = HttpContext.Current.Session["EcfGid"].ToString();
                    string invoiceGidS = id.ToString();

                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                    cmd.Parameters.Add("@pomapped_amount", SqlDbType.VarChar).Value = supplierpo.POMapAmount.ToString();
                    cmd.Parameters.Add("@prodservice_gid", SqlDbType.VarChar).Value = supplierpo.POserprogid.ToString();
                    cmd.Parameters.Add("@podetail_gid", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                    //cmd.Parameters.Add("@prodservice_month", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(supplierpo.POsermonyh.ToString()));
                    cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = EcfGidS;
                    cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGidS;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "addnewpodebitline";
                    int i = cmd.ExecuteNonQuery();
                }
                else
                {
                    string[,] codes = new string[,]
	               {
                        {"invoicepoitem_qty", supplierpo.POcurrentqty.ToString()},  
                        {"invoicepoitem_rate",supplierpo.POrate.ToString()},
                        {"invoicepoitem_amount", supplierpo.POMapAmount.ToString()},  
                  };
                    string[,] whrs = new string[,]
	               {
                        {"invoicepoitem_invoice_gid",id.ToString()},
                        {"invoicepoitem_po_gid", supplierpo.POGid.ToString()},  
                        {"invoicepoitem_poitem_gid",supplierpo.POdetlGid.ToString()},  
                  };
                    string tname = "iem_trn_tinvoicepoitem";

                    string insertcommend = objCommonIUD.UpdateCommon(codes, whrs, tname);
                    Emp_Msg = "success";


                    string[,] codesu = new string[,]
	               {
                    {"ecfdebitline_amount",supplierpo.POMapAmount.ToString() }
                              };
                    string[,] whcosu = new string[,]
	                           {
                    {"ecfdebitline_ecf_gid",HttpContext.Current.Session["EcfGid"].ToString().Trim() },
                    {"ecfdebitline_invoice_gid",id.ToString() },
                    {"ecfdebitline_invoicepoitem_gid",supplierpo.POdetlGid.ToString() }
                  };
                    string tnameu = "iem_trn_tecfdebitline";

                    insertcommend = objCommonIUD.UpdateCommon(codesu, whcosu, tnameu);

                }

                Emp_Msg = "success";

                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_EmployeeeExpense> debitlinegldetailsdata(string glnumbers, string types)
        {
            List<EOW_EmployeeeExpense> objGL = new List<EOW_EmployeeeExpense>();
            try
            {

                EOW_EmployeeeExpense objModel;
                string reftablename = "";
                if (types == "D")
                {
                    reftablename = "Debitline";
                }
                else
                {
                    reftablename = "Other";
                }

                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_getgldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@GLNo", SqlDbType.VarChar).Value = glnumbers;
                cmd.Parameters.Add("@GLNotype", SqlDbType.VarChar).Value = reftablename;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GLNO";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["gl_no"].ToString());
                    objModel.ecf_raisername = Convert.ToString(dt.Rows[i]["gl_name"].ToString());
                    objModel.ecfdelmatamt = Convert.ToString(dt.Rows[i]["gl_company_code"].ToString());
                    objModel.ecfdescription = Convert.ToString(dt.Rows[i]["gl_business_segment"].ToString());
                    objModel.ecfno = Convert.ToString(dt.Rows[i]["gl_location_code"].ToString());
                    objModel.ecfremark = Convert.ToString(dt.Rows[i]["gl_product_code"].ToString());
                    objModel.Exp_Amount = Convert.ToString(dt.Rows[i]["gl_cc_code"].ToString());
                    objModel.Raiser_Code = Convert.ToString(dt.Rows[i]["gl_customer_segment"].ToString());
                    objModel.Raiser_Name = Convert.ToString(dt.Rows[i]["gl_sale_channel"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["gl_future1"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["gl_future2"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["gl_future3"].ToString());
                    objGL.Add(objModel);
                }
                return objGL;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objGL;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_EmployeeeExpense> debitlinegldetailscentraldata(string glnumbers, string types)
        {
            List<EOW_EmployeeeExpense> objGL = new List<EOW_EmployeeeExpense>();
            try
            {

                EOW_EmployeeeExpense objModel;

                DataTable datanew = new DataTable();
                datanew = (DataTable)HttpContext.Current.Session["Tempdebittable"];
                DataRow[] result = datanew.Select("invoice_gid = '" + types + "' and ecfdebitline_gid = '" + glnumbers.ToString() + "'");

                string fccodes = result[0]["ecfdebitline_fc_code"].ToString();
                string cccodes = result[0]["ecfdebitline_cc_code"].ToString();
                string glcodes = result[0]["ecfdebitline_gl_no"].ToString();

                GetConnection();
                DataSet dt = new DataSet();
                cmd = new SqlCommand("pr_eow_com_fcccdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@fccode", SqlDbType.VarChar).Value = fccodes;
                cmd.Parameters.Add("@cccode", SqlDbType.VarChar).Value = cccodes;
                cmd.Parameters.Add("@fccccode", SqlDbType.VarChar).Value = glcodes;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "fcdetailsbyid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Tables[2].Rows.Count; i++)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.ClaimMonth = glcodes;
                    objModel.ecf_raisername = Convert.ToString(dt.Tables[2].Rows[i]["gl_name"].ToString());
                    objModel.ecfdelmatamt = Convert.ToString(dt.Tables[2].Rows[i]["gl_company_code"].ToString());
                    objModel.ecfdescription = Convert.ToString(dt.Tables[0].Rows[i]["fc_name"].ToString());
                    objModel.ecfno = result[0]["ecfdebitline_ou_code"].ToString();
                    objModel.ecfremark = result[0]["ecfdebitline_product_code"].ToString();
                    objModel.Exp_Amount = Convert.ToString(dt.Tables[1].Rows[i]["cc_name"].ToString());
                    objModel.Raiser_Code = Convert.ToString(dt.Tables[2].Rows[i]["gl_customer_segment"].ToString());
                    objModel.Raiser_Name = Convert.ToString(dt.Tables[2].Rows[i]["gl_sale_channel"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Tables[2].Rows[i]["gl_future1"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Tables[2].Rows[i]["gl_future2"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Tables[2].Rows[i]["gl_future3"].ToString());
                    objGL.Add(objModel);
                }
                return objGL;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objGL;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_SupplierModelgrid> Lastthrrmonth(string supid)
        {
            List<EOW_SupplierModelgrid> objExpense = new List<EOW_SupplierModelgrid>();
            try
            {
                EOW_SupplierModelgrid objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_lastthreemonthinvoicedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = supid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Invoicedetals";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_SupplierModelgrid();
                    objModel.Invoicegid = Convert.ToInt32(dt.Rows[i]["invoice_gid"].ToString());
                    objModel.InvoiceDate = Convert.ToString(dt.Rows[i]["invoice_date"].ToString());
                    objModel.InvoiceNo = Convert.ToString(dt.Rows[i]["invoice_no"].ToString());
                    objModel.Description = Convert.ToString(dt.Rows[i]["invoice_desc"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["invoice_amount"].ToString());
                    string Provision = Convert.ToString(dt.Rows[i]["invoice_provision_flag"].ToString());
                    if (Provision == "N")
                    {
                        Provision = "No";
                    }
                    if (Provision == "Y")
                    {
                        Provision = "Yes";
                    }
                    objModel.Provision = Provision;

                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public DataSet selectpoitemdetails(string gid)
        {
            DataSet ds = new DataSet();
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ecfdebitlinecentral", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@prodservice_gid", SqlDbType.VarChar).Value = gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "addnewpodebitlinecentral";
                da = new SqlDataAdapter(cmd);
                da.Fill(ds);
                return ds;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ds;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public DataTable selectemmpdetailforlocal(string gid)
        {
            DataTable dt = new DataTable();
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_code", SqlDbType.VarChar).Value = gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetailscode";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                return dt;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return dt;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectemmpdetailforlocallogn(string gid)
        {
            try
            {
                string stremp = "0";
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = Convert.ToInt32(gid);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    stremp = dt.Rows[0]["employee_branch_code"].ToString();
                }
                else
                {
                    stremp = "0";
                }
                return stremp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string selectempbrabchcode(string gid)
        {
            try
            {
                string stremp = "0";
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_empdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_code", SqlDbType.VarChar).Value = Convert.ToString(gid);
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "localempdetailscode";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    stremp = dt.Rows[0]["employee_branch_code"].ToString();
                }
                else
                {
                    stremp = "0";
                }
                return stremp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<CentraldataModel> SelectEmployee()
        {
            List<CentraldataModel> emp = new List<CentraldataModel>();
            try
            {
                DataTable dt = new DataTable();

                CentraldataModel objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_trn_tcentralinward", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTEMPLOYEEDETAILSSEARCH";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new CentraldataModel();
                    objModel.EmployeeId = Convert.ToInt32(row["employee_gid"].ToString());
                    objModel.EmployeeDepartment = row["employee_dept_name"].ToString();
                    objModel.RaiserName = row["employee_name"].ToString();
                    objModel.RaiserCode = row["employee_code"].ToString();
                    objModel.empbranch = row["employee_grade_code"].ToString();

                    objModel.empbranch = row["employee_branch_gid"].ToString();
                    objModel.empfc = row["employee_fc_code"].ToString();
                    objModel.empcc = row["employee_cc_code"].ToString();

                    //ramya added on14 sep 22 to avoid payment reject due to empty acc no
                    objModel.employee_acc_no = row["employee_era_acc_no"].ToString();
                    objModel.employee_bank_gid = row["employee_era_bank_gid"].ToString();
                    objModel.employee_bank_code = row["employee_era_bank_code"].ToString();
                    objModel.employee_ifsc_code = row["employee_era_ifsc_code"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<CentraldataModel> SelectEmployeeSearch(string EmployeeName, string EmployeeCode)
        {
            List<CentraldataModel> emp = new List<CentraldataModel>();
            try
            {
                DataTable dt = new DataTable();

                CentraldataModel objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_trn_tcentralinward", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@RAISERNAME", SqlDbType.VarChar).Value = EmployeeName;
                cmd.Parameters.Add("@RAISERCODE", SqlDbType.VarChar).Value = EmployeeCode;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTEMPLOYEEDETAILSSEARCH";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new CentraldataModel();
                    objModel.EmployeeId = Convert.ToInt32(row["employee_gid"].ToString());
                    objModel.EmployeeDepartment = row["employee_dept_name"].ToString();
                    objModel.RaiserName = row["employee_name"].ToString();
                    objModel.RaiserCode = row["employee_code"].ToString();

                    objModel.empbranch = row["employee_branch_gid"].ToString();
                    objModel.empfc = row["employee_fc_code"].ToString();
                    objModel.empcc = row["employee_cc_code"].ToString();

                    //ramya added on14 sep 22 to avoid payment reject due to empty acc no
                    objModel.employee_acc_no = row["employee_era_acc_no"].ToString();
                    objModel.employee_bank_gid = row["employee_era_bank_gid"].ToString();
                    objModel.employee_bank_code = row["employee_era_bank_code"].ToString();
                    objModel.employee_ifsc_code = row["employee_era_ifsc_code"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Raisercc> SelectglnumberSearch(string glnumber)
        {
            List<EOW_Raisercc> emp = new List<EOW_Raisercc>();
            try
            {
                DataTable dt = new DataTable();

                EOW_Raisercc objModel;
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = glnumber;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "AUTOCOMPLETEglnombers";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_Raisercc();
                    objModel.raiserccId = row["gl_no"].ToString();
                    objModel.raiserccName = row["glname"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Raisercc> SelectoucodeSearch(string ouCode)
        {
            List<EOW_Raisercc> emp = new List<EOW_Raisercc>();
            try
            {
                DataTable dt = new DataTable();

                EOW_Raisercc objModel;
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ouCode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getoucodeauo";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_Raisercc();
                    objModel.raiserccId = row["branch_code"].ToString();
                    objModel.raiserccName = row["branchname"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Raisercc> SelectproductSearch(string productCode)
        {
            List<EOW_Raisercc> emp = new List<EOW_Raisercc>();
            try
            {
                DataTable dt = new DataTable();

                EOW_Raisercc objModel;
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = productCode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetproductCodeauo";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_Raisercc();
                    objModel.raiserccId = row["product_code"].ToString();
                    objModel.raiserccName = row["productname"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<CentraldataModel> SelectEmployeeSearchCode(string EmployeeCode)
        {
            List<CentraldataModel> emp = new List<CentraldataModel>();
            try
            {
                DataTable dt = new DataTable();

                CentraldataModel objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_trn_tcentralinward", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@RAISERCODE", SqlDbType.VarChar).Value = EmployeeCode;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTEMPLOYEEDETAILSSEARCH";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new CentraldataModel();
                    objModel.EmployeeId = Convert.ToInt32(row["employee_gid"].ToString());
                    objModel.EmployeeDepartment = row["employee_dept_name"].ToString();
                    objModel.RaiserName = row["employee_name"].ToString();
                    objModel.RaiserCode = row["employee_code"].ToString();
                    objModel.empbranch = row["employee_branch_gid"].ToString();
                    objModel.empfc = row["employee_fc_code"].ToString();
                    objModel.empcc = row["employee_cc_code"].ToString();

                    //ramya added on14 sep 22 to avoid payment reject due to empty acc no
                    objModel.employee_acc_no = row["employee_era_acc_no"].ToString();
                    objModel.employee_bank_gid = row["employee_era_bank_gid"].ToString();
                    objModel.employee_bank_code = row["employee_era_bank_code"].ToString();
                    objModel.employee_ifsc_code = row["employee_era_ifsc_code"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<CentraldataModel> SelectEmployeeSearchName(string EmployeeName)
        {
            List<CentraldataModel> emp = new List<CentraldataModel>();
            try
            {
                DataTable dt = new DataTable();

                CentraldataModel objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_trn_tcentralinward", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@RAISERNAME", SqlDbType.VarChar).Value = EmployeeName;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTEMPLOYEEDETAILSSEARCH";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new CentraldataModel();
                    objModel.EmployeeId = Convert.ToInt32(row["employee_gid"].ToString());
                    objModel.EmployeeDepartment = row["employee_dept_name"].ToString();
                    objModel.RaiserName = row["employee_name"].ToString();
                    objModel.RaiserCode = row["employee_code"].ToString();

                    objModel.empbranch = row["employee_branch_gid"].ToString();
                    objModel.empfc = row["employee_fc_code"].ToString();
                    objModel.empcc = row["employee_cc_code"].ToString();

                    //ramya added on14 sep 22 to avoid payment reject due to empty acc no
                    objModel.employee_acc_no = row["employee_era_acc_no"].ToString();
                    objModel.employee_bank_gid = row["employee_era_bank_gid"].ToString();
                    objModel.employee_bank_code = row["employee_era_bank_code"].ToString();
                    objModel.employee_ifsc_code = row["employee_era_ifsc_code"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<CentraldataModel> SelectSupplierSearchname(string SupplierName)
        {
            List<CentraldataModel> emp = new List<CentraldataModel>();
            try
            {
                DataTable dt = new DataTable();

                CentraldataModel objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_trn_tcentralinward", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@SUPLIERNAME", SqlDbType.VarChar).Value = SupplierName;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTSUPPLIERDETAILSSEARCH";
                //  cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTSUPPLIERDETAILSSEARCH_isadhoc"; //Pandiaraj 26-04-18 Restrict adhoc vendor
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new CentraldataModel();
                    objModel.SupplierId = Convert.ToInt32(row["supplierheader_gid"].ToString());
                    objModel.SupplierCode = row["supplierheader_suppliercode"].ToString();
                    objModel.SupplierName = row["supplierheader_name"].ToString();
                    objModel.SupplierMSME = row["supplierheader_ismsmed"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<CentraldataModel> SelectSupplierSearchcode(string SupplierCode)
        {
            List<CentraldataModel> emp = new List<CentraldataModel>();
            try
            {
                DataTable dt = new DataTable();

                CentraldataModel objModel;
                GetConnection();
                cmd = new SqlCommand("pr_iem_trn_tcentralinward", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@SUPPLIERCODE", SqlDbType.VarChar).Value = SupplierCode;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTSUPPLIERDETAILSSEARCH";
                //cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "SELECTSUPPLIERDETAILSSEARCH_isadhoc"; //Pandiaraj 26-04-18 Restrict adhoc vendor
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new CentraldataModel();
                    objModel.SupplierId = Convert.ToInt32(row["supplierheader_gid"].ToString());
                    objModel.SupplierCode = row["supplierheader_suppliercode"].ToString();
                    objModel.SupplierName = row["supplierheader_name"].ToString();
                    emp.Add(objModel);
                }
                return emp;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return emp;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Selectsupplier(string loginid)
        {
            string Centralmaker = Convert.ToString(ConfigurationManager.AppSettings["Centralmaker"].ToString());
            string Centralchecker = Convert.ToString(ConfigurationManager.AppSettings["Centralchecker"].ToString());
            string rolesvales = "No";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = loginid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getemployeesrolegroups";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (Centralmaker == dt.Rows[i]["rolegroup_gid"].ToString())
                        {
                            rolesvales = "CTMaker";
                            return rolesvales;
                        }

                        if (Centralchecker == dt.Rows[i]["rolegroup_gid"].ToString())
                        {
                            rolesvales = "CTChecker";
                            return rolesvales;
                        }
                    }
                }
                return rolesvales;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public List<EOW_Employeelst> getemployeedetails(string empname, string empcode)
        {
            List<EOW_Employeelst> obj = new List<EOW_Employeelst>();
            try
            {
                GetConnection();
                DataTable objtable = new DataTable();

                EOW_Employeelst objproject;
                cmd = new SqlCommand("pr_fb_iem_mst_employee", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@employee_name", SqlDbType.VarChar).Value = empname;
                cmd.Parameters.Add("@employee_code", SqlDbType.VarChar).Value = empcode;
                cmd.Parameters.AddWithValue("@actionName", "selectwithbranchbyid");
                da = new SqlDataAdapter(cmd);
                da.Fill(objtable);
                foreach (DataRow row in objtable.Rows)
                {
                    objproject = new EOW_Employeelst();
                    objproject.employeeGid = Convert.ToInt32(row["employee_gid"]);
                    objproject.empCode = row["employee_code"].ToString();
                    objproject.empName = row["employee_name"].ToString();
                    objproject.empbranch = row["branch_gid"].ToString();
                    objproject.empfc = row["employee_fc_code"].ToString();
                    objproject.empcc = row["employee_cc_code"].ToString();
                    obj.Add(objproject);
                }
                return obj;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return obj;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetDashBoardDetailssearch(string userlognid, string dcodate, string docno, string docamt, string doctype, string DocStatus)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                if (dcodate == "" && docno == "" && docamt == "" && doctype == "0" && DocStatus == "0")
                {
                    DashBoard objModel;
                    DataSet dt = new DataSet();
                    string raisermode = "";
                    string status = "";
                    if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                    {
                        raisermode = "Proxy";
                    }
                    else
                    {
                        raisermode = "Self";
                    }

                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_mydocreqdetails", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.Int).Value = Convert.ToInt32(userlognid);
                    cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "mydocreqdetail";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);


                    string statusw = "";
                    string statusq = "";
                    if (dt.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Tables[0].Rows.Count; i++)
                        {
                            if (dt.Tables[0].Rows[i]["ecf_status"].ToString() != "262144" && dt.Tables[0].Rows[i]["ecf_status"].ToString() != "524288")
                            {
                                objModel = new DashBoard();
                                objModel.Docnogid = Convert.ToInt32(dt.Tables[0].Rows[i]["queue_gid"].ToString());
                                objModel.Docno = Convert.ToString(dt.Tables[0].Rows[i]["ecf_no"].ToString());
                                objModel.DocDate = Convert.ToString(dt.Tables[0].Rows[i]["ecf_date"].ToString());
                                objModel.Docamount = Convert.ToString(dt.Tables[0].Rows[i]["ecf_amount"].ToString());
                                objModel.emporsupp = Convert.ToString(dt.Tables[0].Rows[i]["rempname"].ToString());
                                objModel.raiserName = Convert.ToString(dt.Tables[0].Rows[i]["sempname"].ToString());
                                objModel.ecfdescription = Convert.ToString(dt.Tables[0].Rows[i]["ecf_description"].ToString());
                                objModel.DocTypeName = Convert.ToString(dt.Tables[0].Rows[i]["ecf_supplier_employee"].ToString());
                                statusw = Convert.ToString(dt.Tables[0].Rows[i]["ecf_status"].ToString());
                                statusq = Convert.ToString(dt.Tables[0].Rows[i]["ecf_all_status"].ToString());
                                if (statusq.Trim() == "16")
                                {
                                    objModel.StatusTypeName = "Hold";
                                }
                                else
                                {
                                    objModel.StatusTypeName = objCmnFunctions.GetQueueStatusapp(statusw);
                                }
                                objDashBoard.Add(objModel);
                            }

                        }
                    }
                    if (dt.Tables[1].Rows.Count > 0)
                    {
                        HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                        for (int i = 0; i < dt.Tables[1].Rows.Count; i++)
                        {
                            objModel = new DashBoard();
                            objModel.Docnogid = Convert.ToInt32(dt.Tables[1].Rows[i]["queue_gid"].ToString());
                            objModel.Docno = Convert.ToString(dt.Tables[1].Rows[i]["ecf_no"].ToString());
                            objModel.DocDate = Convert.ToString(dt.Tables[1].Rows[i]["ecf_date"].ToString());
                            objModel.Docamount = Convert.ToString(dt.Tables[1].Rows[i]["ecf_amount"].ToString());
                            objModel.emporsupp = Convert.ToString(dt.Tables[1].Rows[i]["rempname"].ToString());
                            objModel.raiserName = Convert.ToString(dt.Tables[1].Rows[i]["sempname"].ToString());
                            objModel.ecfdescription = Convert.ToString(dt.Tables[1].Rows[i]["ecf_description"].ToString());
                            objModel.DocTypeName = Convert.ToString(dt.Tables[1].Rows[i]["ecf_supplier_employee"].ToString());
                            status = Convert.ToString(dt.Tables[1].Rows[i]["queue_action_for"].ToString());
                            objModel.StatusTypeName = "Approved";
                            objDashBoard.Add(objModel);
                        }
                    }
                    if (dt.Tables[2].Rows.Count > 0)
                    {
                        for (int i = 0; i < dt.Tables[2].Rows.Count; i++)
                        {
                            objModel = new DashBoard();
                            objModel.Docnogid = Convert.ToInt32(dt.Tables[2].Rows[i]["ecf_gid"].ToString());
                            objModel.Docno = Convert.ToString(dt.Tables[2].Rows[i]["ecf_no"].ToString());
                            objModel.DocDate = Convert.ToString(dt.Tables[2].Rows[i]["ecf_date"].ToString());
                            objModel.Docamount = Convert.ToString(dt.Tables[2].Rows[i]["ecf_amount"].ToString());
                            objModel.raiserName = Convert.ToString(dt.Tables[2].Rows[i]["rempname"].ToString());
                            objModel.ecfdescription = Convert.ToString(dt.Tables[2].Rows[i]["ecf_description"].ToString());
                            objModel.emporsupp = "";
                            objModel.DocTypeName = Convert.ToString(dt.Tables[2].Rows[i]["ecf_supplier_employee"].ToString());
                            status = Convert.ToString(dt.Tables[2].Rows[i]["queue_action_for"].ToString());
                            objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                            objDashBoard.Add(objModel);
                        }
                    }
                    return objDashBoard;
                }
                else
                {

                    string raisermode = "";
                    string raisermodeot = "";
                    if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                    {
                        raisermode = " and ecf_all_status ='-1' ";
                        raisermodeot = " and ecf_all_status ='-1' and ecf_insert_by='" + userlognid + "'";
                    }
                    else
                    {
                        raisermode = " and ecf_all_status not in ('-1') ";
                        raisermodeot = " and ecf_all_status not in ('-1') and ecf_raiser='" + userlognid + "'";
                    }


                    DashBoard objModel;
                    GetConnection();
                    DataTable dt = new DataTable();
                    DataTable dtdraft = new DataTable();
                    DataTable dtdraftapped = new DataTable();
                    string status = "";
                    string str = "";
                    if (DocStatus != "1")
                    {
                        if (DocStatus.Trim() != "7")
                        {
                            str += " SELECT   b.ecf_description,b.ecf_all_status,b.ecf_status,a.queue_to,b.ecf_raiser,c.employee_dept_gid as employee_dept_gidnew,a.Additional_flag,b.ecf_supplier_employee,a.queue_action_for,a.queue_gid,b.ecf_gid,b.ecf_no, CONVERT(varchar(10),b.ecf_date,105) as ecf_date,a.queue_action_status,";
                            str += " b.ecf_amount,(c.employee_code+'-'+c.employee_name) as rempname,(c.employee_code+'-'+c.employee_name) as sempname,";
                            str += " a.queue_to_type";
                            str += " FROM iem_trn_tqueue as a ";
                            str += " inner join iem_trn_tecf as b on a.queue_ref_gid=b.ecf_gid and b.ecf_isremoved='N'";
                            str += " inner join iem_mst_temployee as c on c.employee_gid=b.ecf_raiser and c.employee_isremoved='N' ";
                            //str += " inner join iem_mst_temployee as d on d.employee_gid=a.queue_to and d.employee_isremoved='N'";
                            str += " where a.queue_isremoved='N' and a.queue_action_status in('0',16) and a.queue_ref_flag=1 and b.ecf_raiser='" + userlognid + "' and a.queue_ref_status<>'64'";
                            //str += " and a.queue_action_by IS NULL";

                            if (doctype != "0")
                            {
                                str += " and b.ecf_doctype_gid='" + doctype + "'";
                            }
                            if (dcodate != "")
                            {
                                str += " and b.ecf_date='" + objCmnFunctions.convertoDateTimeString(dcodate) + "'";
                            }
                            if (docno != "")
                            {
                                str += "and b.ecf_no LIKE ISNULL('" + docno + "',b.ecf_no) + '%'";
                            }
                            if (docamt != "")
                            {
                                str += " and b.ecf_amount='" + docamt + "'";
                            }
                            if (DocStatus != "0")
                            {
                                str += " and b.ecf_status='" + objCmnFunctions.GetQueueStatusappser(DocStatus) + "'";
                            }
                            str += raisermode;
                            cmd = new SqlCommand(str, con);
                            cmd.CommandType = CommandType.Text;
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dt);

                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                if (dt.Rows[i]["ecf_status"].ToString() != "262144" && dt.Rows[i]["ecf_status"].ToString() != "524288")
                                {
                                    string statushold = "";
                                    objModel = new DashBoard();
                                    objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                                    objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                                    objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                                    objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["rempname"].ToString());
                                    objModel.raiserName = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                    objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                                    objModel.DocTypeName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                                    status = Convert.ToString(dt.Rows[i]["ecf_status"].ToString());
                                    statushold = Convert.ToString(dt.Rows[i]["ecf_all_status"].ToString());
                                    if (statushold.Trim() == "16")
                                    {
                                        objModel.StatusTypeName = "Hold";
                                    }
                                    else
                                    {
                                        objModel.StatusTypeName = objCmnFunctions.GetQueueStatusapp(status);
                                    }

                                    objDashBoard.Add(objModel);
                                }
                            }
                        }
                        if (DocStatus.Trim() == "0" || DocStatus.Trim() == "7")
                        {
                            str = "";
                            str = "SELECT b.ecf_description,b.ecf_status,b.ecf_doctype_gid,b.ecf_supplier_employee,a.queue_action_for,a.queue_gid,b.ecf_gid,b.ecf_no,";
                            str += " CONVERT(varchar(10),b.ecf_date,105) as ecf_date,a.queue_action_status, b.ecf_amount,";
                            str += " (c.employee_code+'-'+c.employee_name) as rempname,(c.employee_code+'-'+c.employee_name)as sempname, ";
                            str += " a.queue_to_type FROM iem_trn_tqueue as a  ";
                            str += " inner join iem_trn_tecf as b on a.queue_ref_gid=b.ecf_gid and b.ecf_isremoved='N' ";
                            str += " inner join iem_mst_temployee as c on c.employee_gid=b.ecf_raiser and c.employee_isremoved='N' ";
                            ////str += " inner join iem_mst_temployee as d on d.employee_gid=a.queue_to  and d.employee_isremoved='N' ";
                            str += " where  a.queue_isremoved='N' and ";
                            str += " a.queue_action_for='A' and b.ecf_raiser='" + userlognid + "' and a.queue_ref_flag=1 AND  b.ecf_status='1' ";
                            str += " and a.queue_ref_status='64'";
                            //str += " AND A.queue_action_status='1'";

                            if (doctype != "0")
                            {
                                str += " and b.ecf_doctype_gid='" + doctype + "'";
                            }
                            if (dcodate != "")
                            {
                                str += " and b.ecf_date='" + objCmnFunctions.convertoDateTimeString(dcodate) + "'";
                            }
                            if (docno != "")
                            {
                                str += "and b.ecf_no LIKE ISNULL('" + docno + "',b.ecf_no) + '%'";
                            }
                            if (docamt != "")
                            {
                                str += " and b.ecf_amount='" + docamt + "'";
                            }
                            if (DocStatus != "0")
                            {
                                str += " and b.ecf_status='" + objCmnFunctions.GetQueueStatusappser(DocStatus) + "'";
                            }
                            str += raisermode;
                            cmd = new SqlCommand(str, con);
                            cmd.CommandType = CommandType.Text;
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtdraftapped);
                            if (dtdraftapped.Rows.Count > 0)
                            {
                                HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                                for (int i = 0; i < dtdraftapped.Rows.Count; i++)
                                {
                                    objModel = new DashBoard();
                                    objModel.Docnogid = Convert.ToInt32(dtdraftapped.Rows[i]["queue_gid"].ToString());
                                    objModel.Docno = Convert.ToString(dtdraftapped.Rows[i]["ecf_no"].ToString());
                                    objModel.DocDate = Convert.ToString(dtdraftapped.Rows[i]["ecf_date"].ToString());
                                    objModel.Docamount = Convert.ToString(dtdraftapped.Rows[i]["ecf_amount"].ToString());
                                    objModel.emporsupp = Convert.ToString(dtdraftapped.Rows[i]["rempname"].ToString());
                                    objModel.raiserName = Convert.ToString(dtdraftapped.Rows[i]["sempname"].ToString());
                                    objModel.ecfdescription = Convert.ToString(dtdraftapped.Rows[i]["ecf_description"].ToString());
                                    objModel.DocTypeName = Convert.ToString(dtdraftapped.Rows[i]["ecf_supplier_employee"].ToString());
                                    status = Convert.ToString(dtdraftapped.Rows[i]["queue_action_for"].ToString());
                                    objModel.StatusTypeName = "Approved";
                                    objDashBoard.Add(objModel);
                                }
                            }
                        }
                    }
                    if (DocStatus == "1" || DocStatus == "0" && docno == "")
                    {
                        str = "";
                        str = "select a.ecf_description,a.ecf_supplier_employee,'D' AS queue_action_for ,a.ecf_gid,a.ecf_no,";
                        str += " CONVERT(varchar(10),a.ecf_date,105)  as ecf_date,";
                        str += " a.ecf_amount,(c.employee_code+'-'+c.employee_name) as rempname";
                        str += " from iem_trn_tecf as a";
                        str += " inner join iem_mst_temployee as c on c.employee_gid=a.ecf_raiser and c.employee_isremoved='N'";
                        str += " where  a.ecf_status='0' and a.ecf_isremoved='N'";

                        if (doctype != "0")
                        {
                            str += " and a.ecf_doctype_gid='" + doctype + "'";
                        }
                        if (dcodate != "")
                        {
                            str += " and a.ecf_date='" + objCmnFunctions.convertoDateTimeString(dcodate) + "'";
                        }
                        if (docamt != "")
                        {
                            str += " and a.ecf_amount='" + docamt + "'";
                        }
                        str += raisermodeot;
                        cmd = new SqlCommand(str, con);
                        cmd.CommandType = CommandType.Text;
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtdraft);
                        for (int i = 0; i < dtdraft.Rows.Count; i++)
                        {
                            objModel = new DashBoard();
                            objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                            objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                            objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                            objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());
                            objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                            //objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["rempname"].ToString());
                            //objModel.emporsupp = "";
                            objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["rempname"].ToString());
                            objModel.emporsupp = "";
                            objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                            status = Convert.ToString(dtdraft.Rows[i]["queue_action_for"].ToString());
                            objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                            objDashBoard.Add(objModel);
                        }
                    }
                }
                return objDashBoard;

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetDashBoardDetailssearcha(string userlognid, string dcodate, string docno, string docamt, string doctype, string DocStatus)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            DashBoard objModel;
            try
            {
                Hashtable queuelist = new Hashtable();

                Hashtable emplist = new Hashtable();
                int emplistid = 0;

                string Centralmaker = Convert.ToString(ConfigurationManager.AppSettings["Centralmaker"].ToString());
                string Centralchecker = Convert.ToString(ConfigurationManager.AppSettings["Centralchecker"].ToString());

                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = " and ecf_all_status ='-1'";
                }
                else
                {
                    raisermode = " and ecf_all_status not in ('-1')";
                }
                string queue_toG = "";
                string queue_toD = "";
                string queue_toR = "";
                string queue_toU = "";

                emplist.Add(emplistid, userlognid);

                GetConnection();
                DataTable dtdel = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid().ToString());
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdelegateuser";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdel);
                if (dtdel.Rows.Count > 0)
                {
                    for (int TR = 0; TR < dtdel.Rows.Count; TR++)
                    {
                        if (emplist.Count == 0)
                        {
                            emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                        }
                        else
                        {
                            if (!emplist.ContainsValue(Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString())))
                            {
                                emplistid++;
                                emplist.Add(emplistid, Convert.ToString(dtdel.Rows[TR]["delegate_by"].ToString()));
                            }
                        }
                    }
                }
                string delegatesuser = "";
                for (int tr = 0; tr < emplist.Count; tr++)
                {
                    delegatesuser = emplist[tr].ToString().Trim();
                    GetConnection();
                    DataSet dtempsup = new DataSet();
                    string strr = "";
                    strr = " SELECT employee_dept_gid,employee_unit_gid,employee_iem_designation_gid,employee_grade_gid FROM iem_mst_temployee WHERE employee_gid='" + delegatesuser + "' and employee_isremoved='N';";
                    strr += " select rolegroup_gid from iem_mst_temployee";
                    strr += " inner join iem_mst_troleemployee on roleemployee_employee_gid=employee_gid and iem_mst_troleemployee.roleemployee_isremoved='N'";
                    strr += " inner join iem_mst_trole on role_gid=roleemployee_role_gid and iem_mst_trole.role_isremoved='N'";
                    strr += " inner join iem_mst_trolegroup on rolegroup_gid=role_rolegroup_gid and iem_mst_trolegroup.rolegroup_isremoved='N'";
                    strr += " where employee_gid=" + delegatesuser + " and employee_isremoved='N' ";
                    cmd = new SqlCommand(strr, con);
                    cmd.CommandType = CommandType.Text;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtempsup);
                    if (dtempsup.Tables[0].Rows.Count > 0)
                    {
                        queue_toG = Convert.ToString(dtempsup.Tables[0].Rows[0]["employee_grade_gid"].ToString());
                        queue_toU = Convert.ToString(dtempsup.Tables[0].Rows[0]["employee_dept_gid"].ToString());
                        queue_toD = Convert.ToString(dtempsup.Tables[0].Rows[0]["employee_iem_designation_gid"].ToString());
                    }
                    if (dtempsup.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i < dtempsup.Tables[1].Rows.Count; i++)
                        {
                            if (queue_toR == "")
                            {
                                if (Centralmaker != dtempsup.Tables[1].Rows[i]["rolegroup_gid"].ToString() && Centralchecker != dtempsup.Tables[1].Rows[i]["rolegroup_gid"].ToString())
                                {
                                    queue_toR = Convert.ToString(dtempsup.Tables[1].Rows[i]["rolegroup_gid"].ToString());
                                }
                            }
                            else
                            {
                                if (Centralmaker != dtempsup.Tables[1].Rows[i]["rolegroup_gid"].ToString() && Centralchecker != dtempsup.Tables[1].Rows[i]["rolegroup_gid"].ToString())
                                {
                                    queue_toR = queue_toR + "','" + Convert.ToString(dtempsup.Tables[1].Rows[i]["rolegroup_gid"].ToString());
                                }
                            }
                        }
                    }

                    GetConnection();
                    DataTable dt = new DataTable();
                    string status = "";
                    string str = "";
                    if (DocStatus != "1")
                    {
                        str += " SELECT  b.ecf_description,a.queue_to,b.ecf_raiser,d.employee_dept_gid as employee_dept_gidnew,a.Additional_flag,b.ecf_supplier_employee,a.queue_action_for,a.queue_gid,b.ecf_gid,b.ecf_no, CONVERT(varchar(10),b.ecf_date,105) as ecf_date,a.queue_action_status,";
                        str += " b.ecf_amount,(c.employee_code+'-'+c.employee_name) as sempname,(d.employee_code+'-'+d.employee_name) as sempname1,";
                        str += " a.queue_to_type";
                        str += " FROM iem_trn_tqueue as a ";
                        str += " inner join iem_trn_tecf as b on a.queue_ref_gid=b.ecf_gid and b.ecf_isremoved='N'";
                        str += " inner join iem_mst_temployee as c on c.employee_gid=a.queue_from and c.employee_isremoved='N' ";
                        str += " inner join iem_mst_temployee as d on d.employee_gid=a.queue_to and d.employee_isremoved='N'";
                        str += " where a.queue_isremoved='N' and a.queue_action_status='0' and a.queue_ref_flag=1 and a.queue_to in ('" + delegatesuser + "')  AND a.queue_to_type='E'";
                        str += " and a.queue_action_for in ('A','C') ";

                        if (doctype != "0")
                        {
                            str += " and b.ecf_doctype_gid='" + doctype + "'";
                        }
                        if (dcodate != "")
                        {
                            str += " and b.ecf_date='" + objCmnFunctions.convertoDateTimeString(dcodate) + "'";
                        }
                        if (docno != "")
                        {
                            str += "and b.ecf_no LIKE ISNULL('" + docno + "',b.ecf_no) + '%'";
                        }
                        if (docamt != "")
                        {
                            str += " and b.ecf_amount='" + docamt + "'";
                        }
                        if (DocStatus != "0")
                        {
                            str += " and a.queue_action_for='" + objCmnFunctions.GetTsearchValues(DocStatus) + "'";
                        }
                        str += raisermode;
                        str += " union ";

                        str += " SELECT  b.ecf_description,a.queue_to,b.ecf_raiser,d.employee_dept_gid as employee_dept_gidnew,a.Additional_flag,b.ecf_supplier_employee,a.queue_action_for,a.queue_gid,b.ecf_gid,b.ecf_no, CONVERT(varchar(10),b.ecf_date,105) as ecf_date,a.queue_action_status,";
                        str += " b.ecf_amount,(d.employee_code+'-'+d.employee_name) as sempname,(c.designation_code+'-'+c.designation_name) as sempname,";
                        str += " a.queue_to_type";
                        str += " FROM iem_trn_tqueue as a ";
                        str += " inner join iem_trn_tecf as b on a.queue_ref_gid=b.ecf_gid and b.ecf_isremoved='N'";
                        str += " inner join iem_mst_tdesignation as c on c.designation_gid=a.queue_to and c.designation_isremoved='N'";
                        str += " inner join iem_mst_temployee as d on d.employee_gid=a.queue_from and d.employee_isremoved='N'";
                        str += " where a.queue_isremoved='N' and a.queue_action_status='0' and a.queue_ref_flag=1 and c.designation_gid in ('" + queue_toD + "')  AND a.queue_to_type='D' ";
                        str += " and a.queue_action_for in ('A','C') ";

                        if (doctype != "0")
                        {
                            str += " and b.ecf_doctype_gid='" + doctype + "'";
                        }
                        if (dcodate != "")
                        {
                            str += " and b.ecf_date='" + objCmnFunctions.convertoDateTimeString(dcodate) + "'";
                        }
                        if (docno != "")
                        {
                            str += "and b.ecf_no LIKE ISNULL('" + docno + "',b.ecf_no) + '%'";
                        }
                        if (docamt != "")
                        {
                            str += " and b.ecf_amount='" + docamt + "'";
                        }
                        if (DocStatus != "0")
                        {
                            str += " and a.queue_action_for='" + objCmnFunctions.GetTsearchValues(DocStatus) + "'";
                        }
                        str += raisermode;
                        str += " union ";

                        str += " SELECT  b.ecf_description,a.queue_to,b.ecf_raiser,d.employee_dept_gid as employee_dept_gidnew,a.Additional_flag,b.ecf_supplier_employee,a.queue_action_for,a.queue_gid,b.ecf_gid,b.ecf_no, CONVERT(varchar(10),b.ecf_date,105) as ecf_date,a.queue_action_status,";
                        str += " b.ecf_amount,(d.employee_code+'-'+d.employee_name) as sempname,(c.grade_code+'-'+c.grade_name) as sempname1,";
                        str += " a.queue_to_type";
                        str += " FROM iem_trn_tqueue as a ";
                        str += " inner join iem_trn_tecf as b on a.queue_ref_gid=b.ecf_gid and b.ecf_isremoved='N'";
                        str += " inner join iem_mst_tgrade as c on c.grade_gid=a.queue_to and c.grade_isremoved='N'";
                        str += " inner join iem_mst_temployee as d on d.employee_gid=a.queue_from and d.employee_isremoved='N'";
                        str += " where a.queue_isremoved='N' and a.queue_action_status='0' and a.queue_ref_flag=1 and c.grade_gid in ('" + queue_toG + "') AND a.queue_to_type='G' ";
                        str += " and a.queue_action_for in ('A','C') ";

                        if (doctype != "0")
                        {
                            str += " and b.ecf_doctype_gid='" + doctype + "'";
                        }
                        if (dcodate != "")
                        {
                            str += " and b.ecf_date='" + objCmnFunctions.convertoDateTimeString(dcodate) + "'";
                        }
                        if (docno != "")
                        {
                            str += "and b.ecf_no LIKE ISNULL('" + docno + "',b.ecf_no) + '%'";
                        }
                        if (docamt != "")
                        {
                            str += " and b.ecf_amount='" + docamt + "'";
                        }
                        if (DocStatus != "0")
                        {
                            str += " and a.queue_action_for='" + objCmnFunctions.GetTsearchValues(DocStatus) + "'";
                        }
                        str += raisermode;
                        str += " union ";

                        str += " SELECT  b.ecf_description,a.queue_to,b.ecf_raiser,d.employee_dept_gid as employee_dept_gidnew,a.Additional_flag,b.ecf_supplier_employee,a.queue_action_for,a.queue_gid,b.ecf_gid,b.ecf_no, CONVERT(varchar(10),b.ecf_date,105) as ecf_date,a.queue_action_status,";
                        str += " b.ecf_amount,(d.employee_code+'-'+d.employee_name) as sempname,(c.role_code+'-'+c.role_name) as sempname1,";
                        str += " a.queue_to_type";
                        str += " FROM iem_trn_tqueue as a ";
                        str += " inner join iem_trn_tecf as b on a.queue_ref_gid=b.ecf_gid and b.ecf_isremoved='N'";
                        str += " inner join iem_mst_trole as c on c.role_gid=a.queue_to and c.role_isremoved='N'";
                        str += " inner join iem_mst_temployee as d on d.employee_gid=a.queue_from and d.employee_isremoved='N'";
                        str += " where a.queue_isremoved='N' and a.queue_action_status='0' and a.queue_ref_flag=1 and c.role_gid in ('" + queue_toR + "')  AND a.queue_to_type='R' ";
                        str += " and a.queue_action_for in ('A','C') ";

                        if (doctype != "0")
                        {
                            str += " and b.ecf_doctype_gid='" + doctype + "'";
                        }
                        if (dcodate != "")
                        {
                            str += " and b.ecf_date='" + objCmnFunctions.convertoDateTimeString(dcodate) + "'";
                        }
                        if (docno != "")
                        {
                            str += "and b.ecf_no LIKE ISNULL('" + docno + "',b.ecf_no) + '%'";
                        }
                        if (docamt != "")
                        {
                            str += " and b.ecf_amount='" + docamt + "'";
                        }
                        if (DocStatus != "0")
                        {
                            str += " and a.queue_action_for='" + objCmnFunctions.GetTsearchValues(DocStatus) + "'";
                        }
                        str += raisermode;
                        cmd = new SqlCommand(str, con);
                        cmd.CommandType = CommandType.Text;
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dt);
                        Boolean hierhy = false;
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            hierhy = false;
                            if (dt.Rows[i]["Additional_flag"].ToString() == "Y")
                            {
                                objModel = new DashBoard();
                                objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                                objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                                objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                                objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                                objModel.emporsupp = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                objModel.raiserName = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                                objModel.DocTypeName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                                status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                                objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                                objDashBoard.Add(objModel);
                                if (!queuelist.ContainsKey(dt.Rows[i]["queue_gid"].ToString()))
                                {
                                    queuelist.Add(dt.Rows[i]["queue_gid"].ToString(), delegatesuser);
                                }
                            }
                            else
                            {
                                string type = dt.Rows[i]["queue_to_type"].ToString();
                                string raiser = dt.Rows[i]["ecf_raiser"].ToString();
                                string supervisor = dt.Rows[i]["queue_to"].ToString();
                                if (type == "E")
                                {
                                    //hierhy = Emphery(raiser, supervisor);
                                    hierhy = true;
                                    //string getempgid = Getempheryname(raiser, "Employee", supervisor);
                                    //if (getempgid != "0")
                                    //{
                                    //    hierhy = true;
                                    //}
                                }
                                else if (type == "G")
                                {
                                    //hierhy = Gradehery(raiser, supervisor);
                                    string getempgid = Getempheryname(raiser, "Grade", supervisor);
                                    if (getempgid != "0")
                                    {
                                        if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                        {
                                            hierhy = true;
                                        }
                                    }
                                }
                                else if (type == "D")
                                {
                                    // hierhy = Deghery(raiser, supervisor);
                                    string getempgid = Getempheryname(raiser, "Designation", supervisor);
                                    if (getempgid != "0")
                                    {
                                        if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                        {
                                            hierhy = true;
                                        }
                                    }
                                }
                                else if (type == "R")
                                {
                                    hierhy = true;
                                }
                                //if (dt.Rows[i]["employee_dept_gidnew"].ToString() == queue_toU.ToString())
                                //{
                                if (hierhy == true)
                                {
                                    //if (userlognid != raiser)
                                    //{
                                    objModel = new DashBoard();
                                    objModel.Docnogid = Convert.ToInt32(dt.Rows[i]["queue_gid"].ToString());
                                    objModel.Docno = Convert.ToString(dt.Rows[i]["ecf_no"].ToString());
                                    objModel.DocDate = Convert.ToString(dt.Rows[i]["ecf_date"].ToString());
                                    objModel.Docamount = Convert.ToString(dt.Rows[i]["ecf_amount"].ToString());
                                    objModel.emporsupp = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                    objModel.raiserName = Convert.ToString(dt.Rows[i]["sempname"].ToString());
                                    objModel.ecfdescription = Convert.ToString(dt.Rows[i]["ecf_description"].ToString());
                                    objModel.DocTypeName = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                                    status = Convert.ToString(dt.Rows[i]["queue_action_for"].ToString());
                                    objModel.StatusTypeName = objCmnFunctions.GetQueueStatus(status);
                                    objDashBoard.Add(objModel);
                                    if (!queuelist.ContainsKey(dt.Rows[i]["queue_gid"].ToString()))
                                    {
                                        queuelist.Add(dt.Rows[i]["queue_gid"].ToString(), delegatesuser);
                                    }
                                    //}
                                }
                                //}
                            }
                        }
                    }
                }
                HttpContext.Current.Session["Queue_delegateslist"] = queuelist;
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<DashBoard> GetEPUInprocessCount(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }

                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocEPUInprocess";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                if (dtdraft.Rows.Count > 0)
                {
                    HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                    for (int i = 0; i < dtdraft.Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        //  objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["queue_gid"].ToString());
                        objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());
                        objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["sempname"].ToString());
                        objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["sempname"].ToString());
                        objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                        objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                        //  status = Convert.ToString(dtdraft.Rows[i]["queue_action_for"].ToString());
                        objModel.StatusTypeName = "EPUInproces";
                        objModel.ecfselect = "notactive";
                        objModel.ecfview = "active";
                        objModel.ecfprint = "notactive";
                        objModel.ecfprintid = type;
                        objDashBoard.Add(objModel);
                    }
                }
                else
                {
                    HttpContext.Current.Session["docAppoalc"] = null;
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetEPURejectedCount(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }
                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocEPURejected";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                if (dtdraft.Rows.Count > 0)
                {
                    HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                    for (int i = 0; i < dtdraft.Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        //   objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["queue_gid"].ToString());
                        objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());
                        objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["sempname"].ToString());
                        objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["sempname"].ToString());
                        objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                        objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                        //   status = Convert.ToString(dtdraft.Rows[i]["queue_action_for"].ToString());
                        objModel.StatusTypeName = "EPURejected";
                        objModel.ecfselect = "notactive";
                        objModel.ecfview = "active";
                        objModel.ecfprint = "notactive";
                        objModel.ecfprintid = type;
                        objDashBoard.Add(objModel);
                    }
                }
                else
                {
                    HttpContext.Current.Session["docAppoalc"] = null;
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetPaidCount(string userlognid, string type)
        {
            List<DashBoard> objDashBoard = new List<DashBoard>();
            try
            {
                string raisermode = "";
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "Proxy";
                }
                else
                {
                    raisermode = "Self";
                }

                DashBoard objModel;
                DataTable dtdraft = new DataTable();
                string status = "";
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_getmydocfulldetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_raiser", SqlDbType.VarChar).Value = userlognid;
                cmd.Parameters.Add("@doctype_gid", SqlDbType.VarChar).Value = type;
                cmd.Parameters.Add("@proxytype", SqlDbType.VarChar).Value = raisermode;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetMydocPaid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdraft);
                if (dtdraft.Rows.Count > 0)
                {
                    HttpContext.Current.Session["docAppoalc"] = "docAppoalc";
                    for (int i = 0; i < dtdraft.Rows.Count; i++)
                    {
                        objModel = new DashBoard();
                        // objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["queue_gid"].ToString());
                        objModel.Docnogid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Doctypeid = Convert.ToInt32(dtdraft.Rows[i]["ecf_gid"].ToString());
                        objModel.Docno = Convert.ToString(dtdraft.Rows[i]["ecf_no"].ToString());
                        objModel.DocDate = Convert.ToString(dtdraft.Rows[i]["ecf_date"].ToString());
                        objModel.Docamount = Convert.ToString(dtdraft.Rows[i]["ecf_amount"].ToString());
                        if (!string.IsNullOrEmpty(dtdraft.Rows[i]["suppliername"].ToString()))
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["suppliername"].ToString());
                        }
                        if (!string.IsNullOrEmpty(dtdraft.Rows[i]["employeename"].ToString()))
                        {
                            objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["employeename"].ToString());
                        }
                        //objModel.emporsupp = Convert.ToString(dtdraft.Rows[i]["suppliername"].ToString());
                        objModel.raiserName = Convert.ToString(dtdraft.Rows[i]["sempname"].ToString());
                        objModel.ecfdescription = Convert.ToString(dtdraft.Rows[i]["ecf_description"].ToString());
                        objModel.DocTypeName = Convert.ToString(dtdraft.Rows[i]["ecf_supplier_employee"].ToString());
                        // status = Convert.ToString(dtdraft.Rows[i]["queue_action_for"].ToString());
                        objModel.StatusTypeName = "Paid";
                        objModel.ecfselect = "notactive";
                        objModel.ecfview = "active";
                        objModel.ecfprint = "active";
                        objModel.ecfprintid = type;
                        objDashBoard.Add(objModel);
                    }
                }
                else
                {
                    HttpContext.Current.Session["docAppoalc"] = null;
                }
                return objDashBoard;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashBoard;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<DashBoard> GetDashboardForMyApproval(string empgid)
        {
            List<DashBoard> objDashboardDetails = new List<DashBoard>();
            try
            {
                string raisermode = "";
                Int32 RaierGid = 0;
                if (HttpContext.Current.Session["Proxyemployee_gid"] != null)
                {
                    raisermode = "P";
                    RaierGid = Convert.ToInt32(HttpContext.Current.Session["Proxyemployee_gid"]);
                }
                else
                {
                    raisermode = "S";
                }
                int appcount = 0;
                int EPUIncount = 0;
                int EPURecount = 0;

                DashBoard objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_mydoc", con);
                cmd.CommandType = CommandType.StoredProcedure;
                int i1 = Convert.ToInt32(objCmnFunctions.GetLoginUserGid());
                cmd.Parameters.Add("@queue_to", SqlDbType.Int).Value = Convert.ToInt32(objCmnFunctions.GetLoginUserGid());
                if (RaierGid > 0)
                {
                    cmd.Parameters.Add("@raiser", SqlDbType.Int).Value = RaierGid;
                }
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = raisermode.ToString();
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new DashBoard();
                    objModel.DashBoardRequestType = Convert.ToString(string.IsNullOrEmpty(dt.Rows[i]["CLAIM"].ToString()) ? "" : dt.Rows[i]["CLAIM"].ToString()).ToUpper();
                    objModel.DraftCount = Convert.ToInt32(string.IsNullOrEmpty(dt.Rows[i]["DRAFT"].ToString()) ? "0" : dt.Rows[i]["DRAFT"].ToString());
                    objModel.InprocessCount = Convert.ToInt32(string.IsNullOrEmpty(dt.Rows[i]["INPROCESS"].ToString()) ? "0" : dt.Rows[i]["INPROCESS"].ToString());
                    objModel.ApprovedCount = Convert.ToInt32(string.IsNullOrEmpty(dt.Rows[i]["APPROVED"].ToString()) ? "0" : dt.Rows[i]["APPROVED"].ToString());
                    objModel.RejectedCount = Convert.ToInt32(string.IsNullOrEmpty(dt.Rows[i]["REJECTED"].ToString()) ? "0" : dt.Rows[i]["REJECTED"].ToString());
                    objModel.PaidCount = Convert.ToInt32(string.IsNullOrEmpty(dt.Rows[i]["PAID"].ToString()) ? "0" : dt.Rows[i]["PAID"].ToString());
                    string doctype = Convert.ToString(dt.Rows[i]["ctype"].ToString());
                    if (raisermode != "P")
                    {
                        appcount = GetMyapprval(objCmnFunctions.GetLoginUserGid().ToString(), doctype);
                    }

                    List<DashBoard> EPUInprocessC = new List<DashBoard>();
                    EPUInprocessC = GetEPUInprocessCount(empgid, doctype).ToList();
                    EPUIncount = EPUInprocessC.Count;
                    List<DashBoard> EPURejectedC = new List<DashBoard>();
                    EPURejectedC = GetEPURejectedCount(empgid, doctype).ToList();
                    EPURecount = EPURejectedC.Count;

                    objModel.ForApprovalCount = appcount;
                    objModel.EPUInprocessCount = EPUIncount;
                    objModel.EPURejectedCount = EPURecount;
                    objModel.CancelledCount = Convert.ToInt32(string.IsNullOrEmpty(dt.Rows[i]["CANCELLED"].ToString()) ? "0" : dt.Rows[i]["CANCELLED"].ToString());
                    objDashboardDetails.Add(objModel);
                }
                return objDashboardDetails;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objDashboardDetails;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public int GetMyapprval(string userlognid, string doctype)
        {
            int delant = 0;
            try
            {
                Hashtable emplist = new Hashtable();
                Hashtable delgatelist = new Hashtable();
                int delegatelistid = 0;
                string IsAllDept;
                int emplistid = 0;
                emplist.Add(emplistid, userlognid);
                GetConnection();
                DataTable dtdel = new DataTable();
                DataTable dtco1 = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.Int).Value = objCmnFunctions.GetLoginUserGid().ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getdelegateuser";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtdel);
                if (dtdel.Rows.Count > 0)
                {
                    for (int TR = 0; TR < dtdel.Rows.Count; TR++)
                    {
                        if (delgatelist.Count == 0)
                        {
                            delgatelist.Add(delegatelistid, Convert.ToString(dtdel.Rows[TR]["delegate_deptid"].ToString()));
                        }
                        else
                        {
                            if (!delgatelist.ContainsValue(Convert.ToString(dtdel.Rows[TR]["delegate_deptid"].ToString())))
                            {
                                delegatelistid++;
                                delgatelist.Add(delegatelistid, Convert.ToString(dtdel.Rows[TR]["delegate_deptid"].ToString()));
                            }
                        }
                    }
                }
                if (delgatelist.ContainsValue("1"))
                {
                    IsAllDept = "Y";
                }
                else
                {
                    IsAllDept = "N";
                }

                int delegatedeptid = 0;
                string delegatesuser = "";
                string Currentuser = "";
                for (int tr = 0; tr < emplist.Count; tr++)
                {
                    Currentuser = emplist[tr].ToString().Trim();
                    GetConnection();
                    DataTable dtco = new DataTable();

                    cmd = new SqlCommand("pr_eow_com_formyapprvol", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = Currentuser;
                    cmd.Parameters.Add("@doctype", SqlDbType.VarChar).Value = doctype;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "queueformyapprvolcount";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtco);

                    Boolean hierhy = false;
                    for (int i = 0; i < dtco.Rows.Count; i++)
                    {
                        hierhy = false;
                        if (dtco.Rows[i]["Additional_flag"].ToString() == "Y")
                        {
                            delant = delant + 1;
                        }
                        else
                        {
                            string type = dtco.Rows[i]["queue_to_type"].ToString();
                            string raiser = dtco.Rows[i]["ecf_raiser"].ToString();
                            string supervisor = dtco.Rows[i]["queue_to"].ToString();
                            if (type == "E")
                            {
                                hierhy = true;
                            }
                            else if (type == "G")
                            {
                                string getempgid = Getempheryname(raiser, "Grade", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (type == "D")
                            {
                                string getempgid = Getempheryname(raiser, "Designation", supervisor);
                                if (getempgid != "0")
                                {
                                    if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                    {
                                        hierhy = true;
                                    }
                                }
                            }
                            else if (type == "R")
                            {
                                hierhy = true;
                            }
                            if (hierhy == true)
                            {
                                delant = delant + 1;
                            }
                        }
                    }
                }
                if (dtdel.Rows.Count > 0)
                {
                    if (IsAllDept == "Y")
                    {
                        for (int tr = 0; tr < 1; tr++)
                        {
                            delegatesuser = Convert.ToString(dtdel.Rows[tr]["delegate_by"].ToString().Trim());
                            delegatedeptid = 1;
                            GetConnection();

                            cmd = new SqlCommand("pr_eow_com_formyapprvol", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = delegatesuser;
                            cmd.Parameters.Add("@doctype", SqlDbType.VarChar).Value = doctype;
                            cmd.Parameters.Add("@delegatedeptId", SqlDbType.VarChar).Value = delegatedeptid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "qdelegatecount";
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtco1);

                            Boolean hierhy = false;
                            for (int i = 0; i < dtco1.Rows.Count; i++)
                            {
                                hierhy = false;
                                if (dtco1.Rows[i]["Additional_flag"].ToString() == "Y")
                                {
                                    delant = delant + 1;
                                }
                                else
                                {
                                    string type = dtco1.Rows[i]["queue_to_type"].ToString();
                                    string raiser = dtco1.Rows[i]["ecf_raiser"].ToString();
                                    string supervisor = dtco1.Rows[i]["queue_to"].ToString();
                                    if (type == "E")
                                    {
                                        hierhy = true;
                                    }
                                    else if (type == "G")
                                    {
                                        string getempgid = Getempheryname(raiser, "Grade", supervisor);
                                        if (getempgid != "0")
                                        {
                                            if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                            {
                                                hierhy = true;
                                            }
                                        }
                                    }
                                    else if (type == "D")
                                    {
                                        string getempgid = Getempheryname(raiser, "Designation", supervisor);
                                        if (getempgid != "0")
                                        {
                                            if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                            {
                                                hierhy = true;
                                            }
                                        }
                                    }
                                    else if (type == "R")
                                    {
                                        hierhy = true;
                                    }
                                    if (hierhy == true)
                                    {
                                        delant = delant + 1;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int tr = 0; tr < dtdel.Rows.Count; tr++)
                        {
                            delegatesuser = Convert.ToString(dtdel.Rows[tr]["delegate_by"].ToString().Trim());
                            delegatedeptid = Convert.ToInt32(dtdel.Rows[tr]["delegate_deptid"].ToString().Trim());
                            GetConnection();

                            cmd = new SqlCommand("pr_eow_com_formyapprvol", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = delegatesuser;
                            cmd.Parameters.Add("@doctype", SqlDbType.VarChar).Value = doctype;
                            cmd.Parameters.Add("@delegatedeptId", SqlDbType.VarChar).Value = delegatedeptid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "qdelegatecount";

                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtco1);

                            Boolean hierhy = false;
                            for (int i = 0; i < dtco1.Rows.Count; i++)
                            {
                                hierhy = false;
                                if (dtco1.Rows[i]["Additional_flag"].ToString() == "Y")
                                {
                                    delant = delant + 1;
                                }
                                else
                                {
                                    string type = dtco1.Rows[i]["queue_to_type"].ToString();
                                    string raiser = dtco1.Rows[i]["ecf_raiser"].ToString();
                                    string supervisor = dtco1.Rows[i]["queue_to"].ToString();
                                    if (type == "E")
                                    {
                                        hierhy = true;
                                    }
                                    else if (type == "G")
                                    {
                                        string getempgid = Getempheryname(raiser, "Grade", supervisor);
                                        if (getempgid != "0")
                                        {
                                            if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                            {
                                                hierhy = true;
                                            }
                                        }
                                    }
                                    else if (type == "D")
                                    {
                                        string getempgid = Getempheryname(raiser, "Designation", supervisor);
                                        if (getempgid != "0")
                                        {
                                            if (emplist.ContainsValue(Convert.ToString(getempgid)))
                                            {
                                                hierhy = true;
                                            }
                                        }
                                    }
                                    else if (type == "R")
                                    {
                                        hierhy = true;
                                    }
                                    if (hierhy == true)
                                    {
                                        delant = delant + 1;
                                    }
                                }
                            }

                        }

                    }
                }
                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return 0;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetAssetCategoryList()
        {
            List<EOW_TravelClaim> objAssetCategoryList = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getassetcatlist";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.AssetCatId = Convert.ToInt32(dt.Rows[i]["assetcategory_gid"].ToString());
                    objModel.AssetCatName = Convert.ToString(dt.Rows[i]["assetcategory_name"].ToString());
                    objAssetCategoryList.Add(objModel);
                }
                return objAssetCategoryList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAssetCategoryList;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetAssetSubCategoryList(int AssetId = 0)
        {
            List<EOW_TravelClaim> objAssetSubCategoryList = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@assetcategoryin", SqlDbType.Int).Value = AssetId;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getassetsubcatlist";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.AssetSubCatId = Convert.ToInt32(dt.Rows[i]["asset_gid"].ToString());
                    objModel.AssetSubCatName = Convert.ToString(dt.Rows[i]["asset_description"].ToString());
                    objModel.GLCode = Convert.ToString(dt.Rows[i]["assetcategory_glno"].ToString());
                    objAssetSubCategoryList.Add(objModel);
                }
                return objAssetSubCategoryList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAssetSubCategoryList;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetExpSubCategoryList(int ExpCatId = 0)
        {
            List<EOW_TravelClaim> objAssetSubCategoryList = new List<EOW_TravelClaim>();
            try
            {

                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@assetcategoryin", SqlDbType.Int).Value = ExpCatId;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getexpsubcatlist";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.AssetSubCatId = Convert.ToInt32(dt.Rows[i]["asset_gid"].ToString());
                    objModel.AssetSubCatName = Convert.ToString(dt.Rows[i]["asset_description"].ToString());
                    objModel.GLCode = Convert.ToString(dt.Rows[i]["assetcategory_glno"].ToString());
                    objAssetSubCategoryList.Add(objModel);
                }
                return objAssetSubCategoryList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objAssetSubCategoryList;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string GetEcfSubTypeGid(int EcfGid = 0)
        {
            string DocSubTypeId = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = EcfGid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetDocSubTypeGid";
                DocSubTypeId = Convert.ToString(cmd.ExecuteScalar());
                return DocSubTypeId;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string GetEcfGid(int QueueGid = 0)
        {
            string ECFGid = "";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecfgid", SqlDbType.Int).Value = QueueGid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetECFGidFS";
                ECFGid = Convert.ToString(cmd.ExecuteScalar());
                return ECFGid;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<sinvotax> GetTaxSubTypeList(int TaxId = 0)
        {
            List<sinvotax> objTaxSubTypeList = new List<sinvotax>();
            try
            {

                sinvotax objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@assetcategoryin", SqlDbType.Int).Value = TaxId;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "gettaxsubtypelist";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                //objTaxSubTypeList.Add(new sinvotax { TaxSubTypeID = 0, TaxSubTypeName = "--Select--", });
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new sinvotax();
                    objModel.TaxSubTypeID = Convert.ToInt32(dt.Rows[i]["taxsubtype_gid"].ToString());
                    objModel.TaxSubTypeName = Convert.ToString(dt.Rows[i]["taxsubtype_name"].ToString());
                    objTaxSubTypeList.Add(objModel);
                }
                return objTaxSubTypeList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objTaxSubTypeList;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetprintExpensesupplier(string ecfid)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                LocalConveyanceNewController locals = new LocalConveyanceNewController();
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_Print", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecfid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpenseDetailssupplier";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.invoicepoitem_GID = Convert.ToString(dt.Rows[i]["ecfdebitline_invoicepoitem_gid"].ToString());
                    if (Convert.ToString(dt.Rows[i]["ecfdebitline_category_type"].ToString()) == "A")
                    {
                        objModel.NatureofExpensesName = "";
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["assetcategory_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["asset_description"].ToString());
                    }
                    else
                    {
                        objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    }


                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.AmountINR = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString()));
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_EmployeeeExpense> GetprintExpense(string ecfid)
        {
            List<EOW_EmployeeeExpense> objExpense = new List<EOW_EmployeeeExpense>();
            try
            {
                EOW_EmployeeeExpense objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_Print", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecfid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpenseDetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_EmployeeeExpense();
                    objModel.Exp_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.Exp_ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecfdebitline_period_from"].ToString());
                    objModel.Exp_ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecfdebitline_period_to"].ToString());
                    objModel.Exp_ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.Exp_FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.Exp_CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.Exp_ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.Exp_OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Exp_Amount = Convert.ToString(dt.Rows[i]["ecfdebitline_amount"].ToString());
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_Payment> GetprintPayment(string ecfgid)
        {
            List<EOW_Payment> objExpense = new List<EOW_Payment>();
            try
            {
                EOW_Payment objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_Print", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecfid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetPaymenDetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_Payment();
                        //objModel.Paymentgid = Convert.ToInt32(dt.Rows[i]["ecfcreditline_gid"].ToString());
                        objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["ecfcreditline_pay_mode"].ToString());
                        objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecfcreditline_ref_no"].ToString());
                        objModel.Beneficiary = Convert.ToString(dt.Rows[i]["ecfcreditline_beneficiary"].ToString());
                        objModel.Description = Convert.ToString(dt.Rows[i]["ecfcreditline_desc"].ToString());

                        string empsup = Convert.ToString(dt.Rows[i]["ecf_supplier_employee"].ToString());
                        if (empsup == "E")
                        {
                            objModel.Employeename = "Employee";
                        }
                        else
                        {
                            objModel.Employeename = "Supplier";
                        }

                        objModel.PaymentAmount = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                        objModel.AmountINR = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString()));
                        objExpense.Add(objModel);
                    }
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_SupplierModelgrid> GetSupplieinvoice(string ecfid)
        {
            List<EOW_SupplierModelgrid> objExpense = new List<EOW_SupplierModelgrid>();
            try
            {

                EOW_SupplierModelgrid objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_Print", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecfid", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetInvoiceDetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_SupplierModelgrid();
                    objModel.Description = Convert.ToString(dt.Rows[i]["supplierheader_name"].ToString());
                    objModel.Provision = Convert.ToString(dt.Rows[i]["supplierheader_suppliercode"].ToString());
                    objModel.Invoicegid = Convert.ToInt32(dt.Rows[i]["invoice_gid"].ToString());
                    objModel.InvoiceDate = Convert.ToString(dt.Rows[i]["invoice_date"].ToString());
                    objModel.InvoiceNo = Convert.ToString(dt.Rows[i]["invoice_no"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["invoice_amount"].ToString());
                    objModel.AmountINR = objCmnFunctions.GetINRAmount(Convert.ToString(dt.Rows[i]["invoice_amount"].ToString()));
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string Deletectdraftecfs(string ecfgid, string login)
        {
            string delant = "0";
            try
            {
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ctdraftdelete", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ctdraftppxselect";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    string ppxamt = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                    string ppxamtgid = Convert.ToString(dt.Rows[i]["ecfarf_gid"].ToString());

                    GetConnection();
                    cmd = new SqlCommand("pr_eow_com_ctdraftdelete", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ppx_amt", SqlDbType.VarChar).Value = ppxamt;
                    cmd.Parameters.Add("@ppx_gid", SqlDbType.VarChar).Value = ppxamtgid;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ctdraftppxupdate";
                    int k = cmd.ExecuteNonQuery();
                }

                GetConnection();
                cmd = new SqlCommand("pr_eow_com_ctdraftdelete", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = login;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "ctdraftdeleteecf";
                int j = cmd.ExecuteNonQuery();
                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }

        public string togetsumofinvoiceamt(string supplierid, string strartdate, string enddate)
        {
            string ecfsumamt = "0";
            try
            {
                DataTable dtup = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_com_invoicedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = supplierid;
                cmd.Parameters.Add("@invoice_type", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(strartdate).ToString();
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(enddate).ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GETSUMINVOICEAMT";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtup);
                if (dtup.Rows.Count > 0)
                {
                    ecfsumamt = Convert.ToString(dtup.Rows[0]["invoice_amount"].ToString().Trim());
                }
                if (ecfsumamt == "")
                {
                    ecfsumamt = "0";
                }
                return ecfsumamt;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string printstatus(string ecfgid)
        {
            string delant = "0";
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_iem_trn_print", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ECFGID", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@ACTION", SqlDbType.VarChar).Value = "printststusupdate";
                int k = cmd.ExecuteNonQuery();

                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public IEnumerable<EOW_PO> Getgrnheaderdetails(string podetailsid)
        {
            List<EOW_PO> objgrnheader = new List<EOW_PO>();
            try
            {
                EOW_PO objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@podetailgid", SqlDbType.VarChar).Value = podetailsid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getgrnheader";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PO();
                    objModel.grninwrdheadergid = Convert.ToString(dt.Rows[i]["grninwrdheader_gid"].ToString());
                    objModel.BranchType = Convert.ToString(dt.Rows[i]["BranchType"].ToString());
                    objModel.GRNNumber = Convert.ToString(dt.Rows[i]["GRNNumber"].ToString());
                    objModel.ReceivedQty = Convert.ToString(dt.Rows[i]["ReceivedQty"].ToString());
                    objModel.POdetlGid = Convert.ToString(dt.Rows[i]["podetails_gid"].ToString());
                    objModel.POsermonyh = string.IsNullOrEmpty(dt.Rows[i]["ServMonth"].ToString()) ? "" : dt.Rows[i]["ServMonth"].ToString();
                    objgrnheader.Add(objModel);
                }
                return objgrnheader;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objgrnheader;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_PO> grninwrddetview(int id, int detailsgids, string invoicegid)
        {
            List<EOW_PO> objgrninwrddet = new List<EOW_PO>();
            try
            {
                EOW_PO objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@grnheadergid", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@invoicegid", SqlDbType.Int).Value = invoicegid;
                cmd.Parameters.Add("@podetailgid", SqlDbType.Int).Value = detailsgids;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getgrninwarddetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PO();
                    objModel.grninwrddetgid = Convert.ToString(dt.Rows[i]["grninwrddet_gid"].ToString());
                    objModel.grninwrddetassetsrlno = Convert.ToString(dt.Rows[i]["grninwrddet_assetsrlno"].ToString());
                    objModel.grninwrddetmftname = Convert.ToString(dt.Rows[i]["grninwrddet_mft_name"].ToString());
                    objModel.grninwrddetrecedqty = Convert.ToString(dt.Rows[i]["grninwrddet_reced_qty"].ToString());
                    objModel.grninwrddetrecedqtychk = Convert.ToString(dt.Rows[i]["Checked"].ToString());
                    /*Muthu Added on 30-05-2022*/
                    objModel.poTotal = Convert.ToString(dt.Rows[i]["podetails_total"].ToString()); 
                    objModel.mappedAmt = Convert.ToString(dt.Rows[i]["MappedAmt"].ToString());
                    objModel.balanceAmt = Convert.ToString(dt.Rows[i]["Balance"].ToString());
                    objModel.type = Convert.ToString(dt.Rows[i]["type"].ToString());
                    objgrninwrddet.Add(objModel);
                }
                return objgrninwrddet;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objgrninwrddet;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string togetwogrndetails(string supplierid)
        {
            string ecfsumamt = "0";
            try
            {
                DataTable dtup = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@grnheadergid", SqlDbType.VarChar).Value = supplierid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "togetwogrndetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtup);
                if (dtup.Rows.Count > 0)
                {
                    ecfsumamt = Convert.ToString(dtup.Rows[0]["grninwrddet_reced_qty"].ToString().Trim());
                }
                if (ecfsumamt == "")
                {
                    ecfsumamt = "0";
                }
                return ecfsumamt;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {

            }
        }
        public string Insertitemdetailsnew(EOW_PO supplierpo, string id, string[] SelectedValues)
        {
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string Emp_Msg = "";
            string status = "";
            string TaxType = "";
            string taxinsertmsg = "";
            string invoicetax_gid = "0";
            string hsngid = "0";
            Hashtable pogrndtals = new Hashtable();
            try
            {
                int ij = 0;
                decimal pocurqty = 0;
                string qtyy = "";
                if (supplierpo.type != "O")
                {
                    foreach (string idvalues in SelectedValues)
                    {
                        if (idvalues != "0" && idvalues != "" && idvalues != "on")
                        {
                            pogrndtals.Add(ij, idvalues);
                            qtyy = togetwogrndetails(idvalues);
                            pocurqty += Convert.ToDecimal(string.IsNullOrEmpty(qtyy) ? "0" : qtyy);
                            ij++;
                        }
                    }
                }
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_getGstTax", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@PODetailGId", SqlDbType.Int).Value = supplierpo.POdetlGid.ToString();
                cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = Convert.ToInt32(id);
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = dt.Rows[0]["Msg"].ToString();
                    TaxType = dt.Rows[0]["TaxType"].ToString();
                }
                if (Emp_Msg.ToUpper() == "SUCCESS")
                {
                    decimal tolmapamt = 0;
                    if (supplierpo.type == "O") // Muthu Added on 30-05-2022
                    {
                        supplierpo.POMapAmount = supplierpo.currentAmt;
                        supplierpo.POcurrentqty = "0";
                    }
                    else
                    {
                        supplierpo.POcurrentqty = pocurqty.ToString();
                        tolmapamt = Convert.ToDecimal(supplierpo.POcurrentqty.ToString()) * Convert.ToDecimal(supplierpo.POrate.ToString());
                        supplierpo.POMapAmount = tolmapamt.ToString();
                    }

                    string EcfGidS = HttpContext.Current.Session["EcfGid"].ToString();
                    string invoiceGidS = id.ToString();
                    GetConnection();
                    cmd = new SqlCommand("pr_eow_trn_mailckeck", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@modulecode", SqlDbType.VarChar).Value = id.ToString();
                    cmd.Parameters.Add("@mailtypename", SqlDbType.VarChar).Value = supplierpo.POGid.ToString();
                    cmd.Parameters.Add("@triggeron", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                    cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "invoicepo";
                    status = (string)cmd.ExecuteScalar();
                    if (status == "notexists")
                    {
                        status = "success";
                        if (status == "success")
                        {
                            string[,] codes = new string[,]
	                            {
                                    {"invoicepoitem_invoice_gid",id.ToString()},
                                    {"invoicepoitem_po_gid", supplierpo.POGid.ToString()},  
                                    {"invoicepoitem_poitem_gid",supplierpo.POdetlGid.ToString()},
                                    {"invoicepoitem_qty", supplierpo.POcurrentqty.ToString()},  
                                    {"invoicepoitem_rate",supplierpo.POrate.ToString()},
                                    {"invoicepoitem_amount", supplierpo.POMapAmount.ToString()},  
                                };
                            string tname = "iem_trn_tinvoicepoitem";

                            string insertcommend = objCommonIUD.InsertCommon(codes, tname);
                            Emp_Msg = "success";

                            if(supplierpo.type != "O"){
                                GetConnection();
                                cmd = new SqlCommand("pr_eow_sup_getpodetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@Invoiceid", SqlDbType.Int).Value = id;
                                cmd.Parameters.Add("@POid", SqlDbType.Int).Value = supplierpo.POGid.ToString();
                                cmd.Parameters.Add("@POAmount", SqlDbType.Decimal).Value = supplierpo.POrate.ToString();
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetcurrpoinvGid";
                                string curinv_pogid = Convert.ToString(cmd.ExecuteScalar());

                                for (int tr = 0; tr < pogrndtals.Count; tr++)
                                {
                                    string emmpid = pogrndtals[tr].ToString();

                                    GetConnection();
                                    cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Parameters.Add("@grnheadergid", SqlDbType.Int).Value = emmpid;
                                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getgrninwarddetailsbyid";
                                    string recevqty = Convert.ToString(cmd.ExecuteScalar());
                                    if (recevqty == "")
                                    {
                                        recevqty = "0";
                                    }

                                    string[,] codesgrn = new string[,]
	                                    {
                                            {"invoicepogrn_podetails_gid",supplierpo.POdetlGid.ToString()},
                                            {"invoicepogrn_grninwrddet_gid", emmpid.ToString()},  
                                            {"invoicepogrn_qty",recevqty}, 
                                            {"invoicepogrn_invoicepoitem_gid",curinv_pogid.ToString()},
                                            {"invoicepogrn_invoice_gid", id.ToString()},  
                                            {"invoicepogrn_invoicepo_gid", supplierpo.POGid.ToString()}, 
                                        };
                                    string tnamegrn = "iem_trn_tinvoicepogrn";

                                    string insertcommendgrn = objCommonIUD.InsertCommon(codesgrn, tnamegrn);

                                }
                            }
                        }
                        
                        if (TaxType.ToUpper() != "WITHOUTGST" && TaxType.ToUpper() != "POWITHOUTGST") //WithoutGst 
                        {
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                            cmd.Parameters.Add("@pomapped_amount", SqlDbType.VarChar).Value = supplierpo.POMapAmount.ToString();
                            cmd.Parameters.Add("@prodservice_gid", SqlDbType.VarChar).Value = supplierpo.POserprogid.ToString();
                            cmd.Parameters.Add("@podetail_gid", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                            cmd.Parameters.Add("@podetail_gidnew", SqlDbType.VarChar).Value = supplierpo.POGid.ToString();
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = EcfGidS;
                            if (supplierpo.type == "O")
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = "0";
                            }
                            else
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = string.IsNullOrEmpty(pogrndtals[0].ToString()) ? "0" : pogrndtals[0].ToString();
                            }
                            
                            cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGidS;
                            cmd.Parameters.Add("@hsngid", SqlDbType.Int).Value = hsngid;
                            cmd.Parameters.Add("@invoicetax_gid", SqlDbType.Int).Value = invoicetax_gid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "addnewpodebitline";
                            int i = cmd.ExecuteNonQuery();
                        }
                        else if (TaxType.ToUpper() == "POWITHOUTGST" || TaxType.ToUpper() == "WITHOUTGST")
                        {
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                            cmd.Parameters.Add("@pomapped_amount", SqlDbType.VarChar).Value = supplierpo.POMapAmount.ToString();
                            cmd.Parameters.Add("@prodservice_gid", SqlDbType.VarChar).Value = supplierpo.POserprogid.ToString();
                            cmd.Parameters.Add("@podetail_gid", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                            cmd.Parameters.Add("@podetail_gidnew", SqlDbType.VarChar).Value = supplierpo.POGid.ToString();
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = EcfGidS;
                            //cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = string.IsNullOrEmpty(pogrndtals[0].ToString()) ? "0" : pogrndtals[0].ToString();
                            if (supplierpo.type == "O")
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = "0";
                            }
                            else
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = string.IsNullOrEmpty(pogrndtals[0].ToString()) ? "0" : pogrndtals[0].ToString();
                            }
                            cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGidS;
                            //cmd.Parameters.Add("@hsngid", SqlDbType.Int).Value = 0;
                            //cmd.Parameters.Add("@invoicetax_gid", SqlDbType.Int).Value = 0;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "addnewpodebitlinewithoutgst";
                            int i = cmd.ExecuteNonQuery();
                        }

                    }
                    else
                    {
                        string POcurrentqty = "0";
                        string POMapAmount = "0";
                        DataTable dtupnew = new DataTable();
                        GetConnection();
                        cmd = new SqlCommand("pr_eow_trn_mailckeck", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@modulecode", SqlDbType.VarChar).Value = id.ToString();
                        cmd.Parameters.Add("@mailtypename", SqlDbType.VarChar).Value = supplierpo.POGid.ToString();
                        cmd.Parameters.Add("@triggeron", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                        cmd.Parameters.Add("@Result", SqlDbType.VarChar).Value = "invoicepodisp";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dtupnew);
                        if (dtupnew.Rows.Count > 0)
                        {
                            POcurrentqty = Convert.ToString(dtupnew.Rows[0]["invoicepoitem_qty"].ToString().Trim());
                            POMapAmount = Convert.ToString(dtupnew.Rows[0]["invoicepoitem_amount"].ToString().Trim());
                        }

                        decimal POMapAmounttotalamt = 0;
                        decimal POcurrentqtytotalqty = 0;
                        if(supplierpo.type == "O"){
                            //POMapAmounttotalamt = Convert.ToDecimal(supplierpo.currentAmt) + Convert.ToDecimal(POMapAmount);
                            POMapAmounttotalamt = Convert.ToDecimal(supplierpo.currentAmt);
                            POcurrentqtytotalqty = Convert.ToDecimal("0.00") + Convert.ToDecimal(POcurrentqty);
                        }
                        else
                        {
                            POMapAmounttotalamt = Convert.ToDecimal(supplierpo.POMapAmount.ToString()) + Convert.ToDecimal(POMapAmount);
                            POcurrentqtytotalqty = Convert.ToDecimal(supplierpo.POcurrentqty.ToString()) + Convert.ToDecimal(POcurrentqty);
                        }
                        

                        string[,] codes = new string[,]
	               {
                        {"invoicepoitem_qty", POcurrentqtytotalqty.ToString()},  
                        {"invoicepoitem_rate",supplierpo.POrate.ToString()},
                        {"invoicepoitem_amount", POMapAmounttotalamt.ToString()},  
                  };
                        string[,] whrs = new string[,]
	               {
                        {"invoicepoitem_invoice_gid",id.ToString()},
                        {"invoicepoitem_po_gid", supplierpo.POGid.ToString()},  
                        {"invoicepoitem_poitem_gid",supplierpo.POdetlGid.ToString()},  
                  };
                        string tname = "iem_trn_tinvoicepoitem";

                        string insertcommend = objCommonIUD.UpdateCommon(codes, whrs, tname);
                        Emp_Msg = "success";

                        if (supplierpo.type != "O") // Muthu Added on 30-05-2022
                        {
                            for (int tr = 0; tr < pogrndtals.Count; tr++)
                            {
                                string emmpid = pogrndtals[tr].ToString();

                                GetConnection();
                                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.Add("@grnheadergid", SqlDbType.Int).Value = emmpid;
                                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getgrninwarddetailsbyid";
                                string recevqty = Convert.ToString(cmd.ExecuteScalar());
                                if (recevqty == "")
                                {
                                    recevqty = "0";
                                }

                                string[,] codesgrn = new string[,]
	                            {
                                    {"invoicepogrn_podetails_gid",supplierpo.POdetlGid.ToString()},
                                    {"invoicepogrn_grninwrddet_gid", emmpid.ToString()},  
                                    {"invoicepogrn_qty",recevqty}, 
                                    {"invoicepogrn_invoicepoitem_gid",supplierpo.POGid.ToString()},
                                    {"invoicepogrn_invoice_gid", id.ToString()},  
                                    {"invoicepogrn_invoicepo_gid", supplierpo.POGid.ToString()}, 
                                };
                                string tnamegrn = "iem_trn_tinvoicepogrn";

                                string insertcommendgrn = objCommonIUD.InsertCommon(codesgrn, tnamegrn);
                            }
                        }

                        /*GetConnection();
                        cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = HttpContext.Current.Session["EcfGid"].ToString().Trim();
                        cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = id.ToString();
                        cmd.Parameters.Add("@podetail_gid", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                        cmd.Parameters.Add("@pomapped_amount", SqlDbType.Int).Value = POMapAmounttotalamt;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "getinvoicepoitemgid";
                        int updated = cmd.ExecuteNonQuery();*/
                        if (TaxType.ToUpper() != "WITHOUTGST" && TaxType.ToUpper() != "POWITHOUTGST") //WithoutGst 
                        {
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                            cmd.Parameters.Add("@pomapped_amount", SqlDbType.VarChar).Value = supplierpo.POMapAmount.ToString();
                            cmd.Parameters.Add("@prodservice_gid", SqlDbType.VarChar).Value = supplierpo.POserprogid.ToString();
                            cmd.Parameters.Add("@podetail_gid", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                            cmd.Parameters.Add("@podetail_gidnew", SqlDbType.VarChar).Value = supplierpo.POGid.ToString();
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = EcfGidS;
                            if (supplierpo.type == "O")
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = "0";
                            }
                            else
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = string.IsNullOrEmpty(pogrndtals[0].ToString()) ? "0" : pogrndtals[0].ToString();
                            }

                            cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGidS;
                            cmd.Parameters.Add("@hsngid", SqlDbType.Int).Value = hsngid;
                            cmd.Parameters.Add("@invoicetax_gid", SqlDbType.Int).Value = invoicetax_gid;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "addnewpodebitline";
                            int i = cmd.ExecuteNonQuery();
                        }
                        else if (TaxType.ToUpper() == "POWITHOUTGST" || TaxType.ToUpper() == "WITHOUTGST")
                        {
                            GetConnection();
                            cmd = new SqlCommand("pr_eow_com_ecfdebitlineadd", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@employee_gid", SqlDbType.VarChar).Value = objCmnFunctions.GetLoginUserGid().ToString();
                            cmd.Parameters.Add("@pomapped_amount", SqlDbType.VarChar).Value = supplierpo.POMapAmount.ToString();
                            cmd.Parameters.Add("@prodservice_gid", SqlDbType.VarChar).Value = supplierpo.POserprogid.ToString();
                            cmd.Parameters.Add("@podetail_gid", SqlDbType.VarChar).Value = supplierpo.POdetlGid.ToString();
                            cmd.Parameters.Add("@podetail_gidnew", SqlDbType.VarChar).Value = supplierpo.POGid.ToString();
                            cmd.Parameters.Add("@ecf_gid", SqlDbType.VarChar).Value = EcfGidS;
                            //cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = string.IsNullOrEmpty(pogrndtals[0].ToString()) ? "0" : pogrndtals[0].ToString();
                            if (supplierpo.type == "O")
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = "0";
                            }
                            else
                            {
                                cmd.Parameters.Add("@new_grninwarddetail_gid", SqlDbType.VarChar).Value = string.IsNullOrEmpty(pogrndtals[0].ToString()) ? "0" : pogrndtals[0].ToString();
                            }
                            cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceGidS;
                            //cmd.Parameters.Add("@hsngid", SqlDbType.Int).Value = 0;
                            //cmd.Parameters.Add("@invoicetax_gid", SqlDbType.Int).Value = 0;
                            cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "addnewpodebitlinewithoutgst";
                            int i = cmd.ExecuteNonQuery();
                        }


                    }

                    Emp_Msg = "success";

                    if (Emp_Msg.ToLower() == "success")
                    {
                        try
                        {
                            //Split Amount update - GST_Phase3_2 - Ramya
                            GetConnection();
                            DataTable dtSplit = new DataTable();
                            cmd = new SqlCommand("Pr_eow_Set_Splitamount", con);
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add("@PInvId", SqlDbType.VarChar).Value = id;
                            da = new SqlDataAdapter(cmd);
                            da.Fill(dtSplit);
                        }
                        catch (Exception ex)
                        {

                        }
                    }

                }
                return Emp_Msg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> ChangeBussinessSegment(string oucode)
        {
            List<EOW_TravelClaim> objgrninwrddet = new List<EOW_TravelClaim>();
            try
            {
                string[] arr = oucode.Split('-');
                string branchcode = arr[0];
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@BranchCode", SqlDbType.VarChar).Value = branchcode;

                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getbussinesssegment";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                foreach (DataRow row in dt.Rows)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.OUCode = row["branch_businesssegement"].ToString();
                    objgrninwrddet.Add(objModel);
                }
                return objgrninwrddet;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objgrninwrddet;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string GetSupplierTmpGid(string gid)
        {
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_com_supplierdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@supplier_gid", SqlDbType.VarChar).Value = gid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierTMPGID";
                gid = Convert.ToString(cmd.ExecuteScalar());
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
            }
            finally
            {
                con.Close();
            }
            return gid;
        }
        public string CheckWithCBF(int ecf_gid = 0)
        {
            try
            {
                GetConnection();
                cmd = new SqlCommand("pr_eow_trn_InvoiceWithCBF", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ECFGID", SqlDbType.Int).Value = ecf_gid;
                string result = Convert.ToString(cmd.ExecuteScalar());
                return result;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "404";
            }
            finally
            {
                con.Close();
            }
        }

        //added by Dhasarathan  22-11-2016
        public string GetEmployeePayModeEraAcc(int EmployeeeGid)
        {

            var EraBankAcc = "";
            var bankgid = "";
            var emp_paymode = "";
            var result = "Yes";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeGid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "EmpAccdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {

                    emp_paymode = Convert.ToString(dt.Rows[0]["emp_paymode"]);
                    if (emp_paymode != "CHQ")
                    {
                        EraBankAcc = Convert.ToString(dt.Rows[0]["employee_era_acc_no"]);
                        if (!string.IsNullOrWhiteSpace(EraBankAcc) && EraBankAcc != "0")
                        {
                            bankgid = Convert.ToString(dt.Rows[0]["employee_era_bank_gid"]);
                            if (!string.IsNullOrWhiteSpace(bankgid) && bankgid != "0")
                            {

                                result = "Yes";
                            }
                            else
                            {
                                result = "No";
                            }
                        }
                        else
                        {
                            result = "No";
                        }

                    }


                }
                return result;
            }
            catch (Exception ex)
            {

                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ex.Message.ToString();
            }


        }
        public string GetSupplierBankDetailsBypayMode(string ecfgid)
        {
            var EraBankAcc = "";
            var bankgid = "";
            var ifsccode = "";
            var emp_paymode = "";
            var result = "Yes";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfgid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetSupplierBankdetailsByEft";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {

                    emp_paymode = Convert.ToString(dt.Rows[0]["paymode"]);
                    if (emp_paymode == "EFT")
                    {


                        EraBankAcc = Convert.ToString(dt.Rows[0]["payment_accountno"]);
                        if (!string.IsNullOrWhiteSpace(EraBankAcc) && EraBankAcc != "0")
                        {
                            bankgid = Convert.ToString(dt.Rows[0]["payment_bank_gid"]);
                            if (!string.IsNullOrWhiteSpace(bankgid) && bankgid != "0")
                            {
                                if (!string.IsNullOrWhiteSpace(ifsccode) && ifsccode != "0")
                                {
                                    ifsccode = Convert.ToString(dt.Rows[0]["payment_ifsccode"]);
                                    if (!string.IsNullOrWhiteSpace(ifsccode) || ifsccode != "0")
                                    {
                                        result = "Yes";
                                    }
                                    else
                                    {
                                        result = "No";
                                    }
                                }
                                else { result = "Yes"; };
                            }
                            else
                            {
                                result = "No";
                            }
                        }
                        else
                        {
                            result = "No";
                        }

                    }


                }
                return result;
            }
            catch (Exception ex)
            {

                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return ex.Message.ToString();
            }
            return "";
        }
        //added by Dhasarathan 


        public string UpdateInsuranceinvoicefinal(EOW_Supplierinvoice EmployeeeExpenseModel, string ecfgid, string invoiceGid, string user, string eempid, string clam, string queid)
        {
            try
            {
                string ecfdate = "";
                string ecfdescription = "";
                string errormsg = "";
                // ramya added on 25 Nov 21
                string ecfremark = "";
                if (EmployeeeExpenseModel.ecfdescription != "" && EmployeeeExpenseModel.ecfdescription != null)
                {
                    ecfdescription = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfdescription.ToString());
                }
                if (EmployeeeExpenseModel.ecfremark != "" && EmployeeeExpenseModel.ecfremark != null)
                {
                    ecfremark = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpenseModel.ecfremark.ToString());
                }
                GetConnection();
                cmd = new SqlCommand("UpdateInsuranceinvoicefinal", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid);
                //   cmd.Parameters.Add("@invoiceGid", SqlDbType.Int).Value = Convert.ToInt32(invoiceGid);
                cmd.Parameters.Add("@eempid", SqlDbType.Int).Value = Convert.ToInt32(eempid);
                cmd.Parameters.Add("@queid", SqlDbType.VarChar).Value = Convert.ToString(queid);
                if (!string.IsNullOrEmpty(EmployeeeExpenseModel.ECF_Date))
                {
                    ecfdate = objCmnFunctions.convertoDateTimeString(EmployeeeExpenseModel.ECF_Date).ToString();
                }
                cmd.Parameters.Add("@ecfdate", SqlDbType.VarChar).Value = ecfdate;
                // ramya added on 25 Nov 21
                cmd.Parameters.Add("@ecf_remark", SqlDbType.VarChar).Value = ecfremark;
                cmd.Parameters.Add("@ecf_statusaction", SqlDbType.Int).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfApproved"]);
                cmd.Parameters.Add("@ecf_status", SqlDbType.VarChar).Value = Convert.ToInt32(ConfigurationManager.AppSettings["EcfInprocess"]);
                cmd.Parameters.Add("@ecfdescription", SqlDbType.VarChar).Value = ecfdescription;

                cmd.Parameters.Add("@ecf_currency_amount", SqlDbType.VarChar).Value = EmployeeeExpenseModel.Currencyamount.ToString();
                cmd.Parameters.Add("@ecf_amount", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.ECF_Amount);
                cmd.Parameters.Add("@ecf_delmat_amount", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.ECF_Amount);
                cmd.Parameters.Add("@Currency_gid", SqlDbType.VarChar).Value = Convert.ToString(EmployeeeExpenseModel.CurrencyId);


                cmd.Parameters.Add("@queue_gid", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@errormsg", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecfoutput", SqlDbType.VarChar, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_gid", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_type", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_next_queue_to_additional_flag", SqlDbType.Char, 1).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecfdelmat_result", SqlDbType.Int, 150).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_err_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@ecf_sql_output", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@docsubtype_gid", SqlDbType.VarChar, 50).Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();

                var errormsgs = Convert.ToString(cmd.Parameters["@errormsg"].Value);
                errormsg = Convert.ToString(errormsgs);
                if (errormsg == "")
                {
                    errormsgs = Convert.ToString(cmd.Parameters["@ecfoutput"].Value);
                    errormsg = "ECF Number is : " + errormsgs.ToString();

                    var queue_gid = Convert.ToString(cmd.Parameters["@queue_gid"].Value);
                    string mail = queue_gid.ToString();
                    var doctype = Convert.ToString(cmd.Parameters["@docsubtype_gid"].Value);
                    doctype = objCmnFunctions.GetSubDocType(doctype);
                    mailsender.sendusermail("EOW", doctype, mail, "S", "0");
                    string doctypeid = doctype.ToString();
                    mailsender.sendusermail("EOW", doctype, mail, "S", "0");
                }
                return errormsg;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string UpdateInsranceSupplierDebit(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string rowid)
        {
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string Emp_Msg = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            try
            {

                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.SubCategoryName != "0")
                {
                    DataTable dtdebit = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_fi_tsupplierdebitline", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    //cmd.Parameters.AddWithValue("@debitline_ecf_gid",ecfgid);
                    cmd.Parameters.Add("@Pdebitlinegid", SqlDbType.Int).Value = rowid;
                    cmd.Parameters.Add("@Pdebitline_ecf_gid", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@Pdebitline_invoice_gid", SqlDbType.Int).Value = invoicegid;
                    cmd.Parameters.Add("@Pdebitline_expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Pdebitline_expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Pdebitline_expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Pdebitline_gl_no", SqlDbType.VarChar).Value = Emp_Msg;
                    cmd.Parameters.Add("@Pdebitline_period_from", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(EmployeeeExpense.ClaimMonth));
                    cmd.Parameters.Add("@Pdebitline_fc_code", SqlDbType.VarChar).Value = EmployeeeExpense.FC;
                    cmd.Parameters.Add("@Pdebitline_cc_code", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@Pdebitline_product_code", SqlDbType.VarChar).Value = EmployeeeExpense.ProductCode;
                    cmd.Parameters.Add("@Pdebitline_ou_code", SqlDbType.VarChar).Value = EmployeeeExpense.OUCode;
                    cmd.Parameters.Add("@Pdebitline_desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@Pdebitline_amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@Pdebitline_Hsn_gid", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.TravelHsnid).ToString();
                    cmd.Parameters.Add("@Pempid", SqlDbType.Int).Value = Convert.ToInt32(empgid);
                    cmd.Parameters.Add("@Paction", SqlDbType.VarChar).Value = "update";
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag.ToString();
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdebit);
                    if (dtdebit.Rows.Count > 0)
                    {
                        Emp_Msg = dtdebit.Rows[0]["Msg"].ToString();
                        if (Emp_Msg.ToLower() == "success")
                        {
                            Emp_Msgretn = "Success";
                        }
                        else
                        {
                            Emp_Msgretn = Emp_Msg;
                        }

                    }

                }
                else
                {
                    Emp_Msgretn = "sub category not found";
                }

                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertInsurancesupplierCreate(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid)
        {
            LocalConveyanceNewController locals = new LocalConveyanceNewController();
            string Emp_Msg = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "", status = "";
            try
            {
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getglno";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                }
                else
                {
                    Emp_Msgretn = "Invalid GL Code";
                    return Emp_Msgretn;
                }
                // status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (EmployeeeExpense.SubCategoryName != "0")
                {
                    DataTable dtgsttax = new DataTable();
                    DataTable dtdebit = new DataTable();
                    GetConnection();
                    cmd = new SqlCommand("pr_fi_tsupplierdebitline", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    //cmd.Parameters.AddWithValue("@debitline_ecf_gid",ecfgid);
                    cmd.Parameters.Add("@Pdebitline_ecf_gid", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@Pdebitline_invoice_gid", SqlDbType.Int).Value = invoicegid;
                    cmd.Parameters.Add("@Pdebitline_expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Pdebitline_expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Pdebitline_expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Pdebitline_gl_no", SqlDbType.VarChar).Value = Emp_Msg;
                    cmd.Parameters.Add("@Pdebitline_period_from", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(locals.getconverttomonthtodate(EmployeeeExpense.ClaimMonth));
                    cmd.Parameters.Add("@Pdebitline_fc_code", SqlDbType.VarChar).Value = EmployeeeExpense.FC;
                    cmd.Parameters.Add("@Pdebitline_cc_code", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@Pdebitline_product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Pdebitline_ou_code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Pdebitline_desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@Pdebitline_amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@Pdebitline_Hsn_gid", SqlDbType.Int).Value = String.IsNullOrEmpty(EmployeeeExpense.TravelHsnid.ToString()) ? 0 : Convert.ToInt32(EmployeeeExpense.TravelHsnid);
                    cmd.Parameters.Add("@Pempid", SqlDbType.Int).Value = Convert.ToInt32(empgid);
                    cmd.Parameters.Add("@Paction", SqlDbType.VarChar).Value = "insert";
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dtdebit);
                    if (dtdebit.Rows.Count > 0)
                    {
                        Emp_Msg = dtdebit.Rows[0]["Msg"].ToString();
                        if (Emp_Msg.ToLower() == "success")
                        {
                            Emp_Msgretn = "Success";
                        }
                        else
                        {
                            Emp_Msgretn = Emp_Msg;
                        }

                    }


                }
                else
                {
                    Emp_Msgretn = "Sub category id not passed";
                }


                return Emp_Msgretn;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public string GetMaxQueueGid(string _ECFId)
        {
            try
            {
                string Data1 = "0";
                DataTable dt = new DataTable();
                DataSet ds = db.GetMaxQueueGidEClaim(_ECFId, objCmnFunctions.GetLoginUserGid().ToString());
                if (ds != null && ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0) { Data1 = dt.Rows[0]["queue_gid"].ToString(); }
                }
                return Data1;
            }
            catch
            {
                return "0";
            }
        }
        public string GetDocTypeGIDEClaim(string queue_gid)
        {
            try
            {
                string Data1 = "0";
                DataTable dt = new DataTable();
                DataSet ds = db.GetDocTypeGIDEClaim(queue_gid);
                if (ds != null && ds.Tables.Count > 0)
                {
                    dt = ds.Tables[0];
                    if (dt.Rows.Count > 0) { Data1 = dt.Rows[0]["docsubtype_gid"].ToString(); }
                }
                return Data1;
            }
            catch
            {
                return "0";
            }
        }
        #region Save Attachment FileName
        public bool SaveAttachmentDoc(string RefFlag, string RefType, string RefGid, string AttachmentName, string AttachmentDesc)
        {
            DataSet ds = db.SetAttachmentNew(RefFlag, RefType, RefGid, AttachmentName, AttachmentDesc, plib.LoginUserId);
            if (ds != null && ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    return (ds.Tables[0].Rows[0]["Clear"].ToString().ToLower() == "true" || ds.Tables[0].Rows[0]["Clear"].ToString().ToLower() == "1") ? true : false;
                }
            }
            return false;
        }
        public IEnumerable<EOW_HSN> HsnCodeList(int expanSubcatid)
        {
            List<EOW_HSN> GetHsnCodeList = new List<EOW_HSN>();
            try
            {
                EOW_HSN objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = expanSubcatid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpenseHsn";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_HSN();
                    objModel.HsnId = Convert.ToInt32(dt.Rows[i]["hsnid"].ToString());
                    objModel.HsnCode = Convert.ToString(dt.Rows[i]["hsncode"].ToString());
                    objModel.HsnDesc = Convert.ToString(dt.Rows[i]["Hsndesc"].ToString());
                    GetHsnCodeList.Add(objModel);
                }
                return GetHsnCodeList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return GetHsnCodeList;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<EOW_TravelClaim> GetHsnList(int Hsnid = 0)
        {
            List<EOW_TravelClaim> objHsnList = new List<EOW_TravelClaim>();
            try
            {
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@assetcategoryin", SqlDbType.Int).Value = Hsnid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetHsndetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                //objTaxSubTypeList.Add(new sinvotax { TaxSubTypeID = 0, TaxSubTypeName = "--Select--", });
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["Hsnid"].ToString());
                    objModel.TravelHsnCode = Convert.ToString(dt.Rows[i]["Hsncode"].ToString());
                    objHsnList.Add(objModel);
                }
                return objHsnList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objHsnList;
            }
        }
        public IEnumerable<EOW_TravelClaim> GetAssetExpHsndetails(int AssetExpID = 0, string AssetExpFlag = "E")
        {
            List<EOW_TravelClaim> objHsnList = new List<EOW_TravelClaim>();
            try
            {
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.Int).Value = AssetExpID;
                if (AssetExpFlag == "E")
                {
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpenseHsn";
                }
                else
                {
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetAssetHsn";
                }

                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                //objTaxSubTypeList.Add(new sinvotax { TaxSubTypeID = 0, TaxSubTypeName = "--Select--", });
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["Hsnid"].ToString());
                    objModel.TravelHsnCode = Convert.ToString(dt.Rows[i]["Hsncode"].ToString());
                    objHsnList.Add(objModel);
                }
                return objHsnList;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objHsnList;
            }
        }
        public IEnumerable<EOW_TravelClaim> Getgstdetls(string ecfid, string invoiceid, string traveltype)
        {
            List<EOW_TravelClaim> Objdetails = new List<EOW_TravelClaim>();
            try
            {
                DataTable dt = new DataTable();
                EOW_TravelClaim objModel;
                GetConnection();
                cmd = new SqlCommand("PR_EOW_GetGstInvoiceDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@InvId", SqlDbType.VarChar).Value = invoiceid;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_TravelClaim();
                        objModel.InvoiceTaxGid = Convert.ToInt32(dt.Rows[i]["invoicetaxgid"].ToString());
                        objModel.Hsncode = (dt.Rows[i]["HsnCode"].ToString());
                        objModel.HsnId = Convert.ToInt32(dt.Rows[i]["Hsngid"].ToString());
                        objModel.TaxAmt = Convert.ToDecimal(dt.Rows[i]["TaxAmt"].ToString());
                        objModel.GstRate = Convert.ToDecimal(dt.Rows[i]["Rate"].ToString());
                        objModel.TaxableAmt = Convert.ToDecimal(dt.Rows[i]["TaxableAmt"].ToString());
                        objModel.HsnDesc = dt.Rows[i]["HsnDescription"].ToString();
                        objModel.Subtax = dt.Rows[i]["TaxSubType"].ToString();
                        objModel.GstApplicable = dt.Rows[i]["GsnApplicable"].ToString();
                        Objdetails.Add(objModel);
                    }
                }
                return Objdetails;

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return Objdetails;
            }
        }

        public IEnumerable<EOW_RCMEntries> GetRCMdetls(string invoiceid)
        {
            List<EOW_RCMEntries> Objdetails = new List<EOW_RCMEntries>();
            try
            {
                DataTable dt = new DataTable();
                EOW_RCMEntries objModel;
                GetConnection();
                cmd = new SqlCommand("PR_EOW_GetRCMInvoiceDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@InvId", SqlDbType.VarChar).Value = invoiceid;
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new EOW_RCMEntries();
                        objModel.Expsubcat_Name = dt.Rows[i]["Expsubcat_Name"].ToString();
                        objModel.HsnCode = (dt.Rows[i]["HsnCode"].ToString());
                        objModel.DebitRCM_Type = dt.Rows[i]["DebitRCM_Type"].ToString();
                        objModel.Taxable_Amount = dt.Rows[i]["Taxable_Amount"].ToString();
                        objModel.debitrcm_rate = Convert.ToDecimal(dt.Rows[i]["debitrcm_rate"]);
                        objModel.debitrcm_amount = Convert.ToDecimal(dt.Rows[i]["debitrcm_amount"]);
                        objModel.debitrcm_inputcreditgl = dt.Rows[i]["debitrcm_inputcreditgl"].ToString();
                        objModel.debitrcm_reversechargegl = dt.Rows[i]["debitrcm_reversechargegl"].ToString();
                        objModel.debitInputcreditRate = String.IsNullOrEmpty(dt.Rows[i]["debitrcm_inputcredit_rate"].ToString()) ? 0 : Convert.ToDecimal(dt.Rows[i]["debitrcm_inputcredit_rate"].ToString());
                        objModel.debitInputcreditAmt = String.IsNullOrEmpty(dt.Rows[i]["debitrcm_inputcredit_Amount"].ToString()) ? 0 : Convert.ToDecimal(dt.Rows[i]["debitrcm_inputcredit_Amount"].ToString());
                        objModel.Taxgst_InputCredit_Display_Rate = String.IsNullOrEmpty(dt.Rows[i]["Taxgst_InputCredit_Display_Rate"].ToString()) ? 0 : Convert.ToDecimal(dt.Rows[i]["Taxgst_InputCredit_Display_Rate"].ToString());
                        objModel.Taxgst_RCM_Display_Rate = String.IsNullOrEmpty(dt.Rows[i]["Taxgst_RCM_Display_Rate"].ToString()) ? 0 : Convert.ToDecimal(dt.Rows[i]["Taxgst_RCM_Display_Rate"].ToString());
                        Objdetails.Add(objModel);
                    }
                }
                return Objdetails;

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return Objdetails;
            }
        }

        #endregion



        public string GetExpenseHsndesc(string hsngid)
        {
            try
            {
                string res = "";
                int id;
                if (!string.IsNullOrEmpty(hsngid))
                {
                    id = Convert.ToInt32(hsngid);
                }
                else
                {
                    id = 0;
                }
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.Int).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "hsndesc";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    res = Convert.ToString(dt.Rows[0]["HsnDesc"].ToString());
                }
                return res;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "404";
            }
            finally
            {
                con.Close();
            }
        }

        public IEnumerable<RCMEnteries> GetRCMEnteries(string ECF_GID, string Invoice_GID, string Action)
        {
            List<RCMEnteries> Objdetails = new List<RCMEnteries>();
            try
            {
                DataTable dt = new DataTable();
                RCMEnteries objModel;
                GetConnection();
                cmd = new SqlCommand("pr_EOWandAP_Get_RCMEnteries", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ECF_Gid", SqlDbType.Int).Value = string.IsNullOrEmpty(ECF_GID) ? 0 : Convert.ToInt32(ECF_GID);
                cmd.Parameters.Add("@Invoice_Gid", SqlDbType.Int).Value = string.IsNullOrEmpty(Invoice_GID) ? 0 : Convert.ToInt32(Invoice_GID);
                cmd.Parameters.Add("@Action", SqlDbType.VarChar).Value = "FetchRCMEnteries";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new RCMEnteries();
                        objModel.Expsubcat_Name = dt.Rows[i]["Expsubcat_Name"].ToString();
                        objModel.HSNCode = dt.Rows[i]["hsn_code"].ToString();
                        objModel.RCMType = dt.Rows[i]["RCMType"].ToString();
                        objModel.RCM_Rate = Convert.ToDecimal(dt.Rows[i]["debitrcm_rate"]);
                        objModel.RCM_Amount = Convert.ToDecimal(dt.Rows[i]["debitrcm_amount"].ToString());
                        objModel.RCM_InputCredit_GL = dt.Rows[i]["debitrcm_inputcreditgl"].ToString();
                        objModel.RCM_ReverseCharge_GL = dt.Rows[i]["debitrcm_reversechargegl"].ToString();
                        Objdetails.Add(objModel);
                    }
                }
                return Objdetails;

            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return Objdetails;
            }
        }

        //IEM_GST_Phase3_1
        public IEnumerable<Recovery> GetSupplierRecovery(string suppliergid, string type)
        {
            List<Recovery> objRecovery = new List<Recovery>();
            try
            {
                Recovery objModel;
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = suppliergid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = type; 

                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        objModel = new Recovery();
                        objModel.r_ecfid = Convert.ToString(dt.Rows[i]["ecfid"].ToString());
                        objModel.r_invid = Convert.ToString(dt.Rows[i]["invid"].ToString());
                        objModel.r_ecfno = Convert.ToString(dt.Rows[i]["ecfno"].ToString());
                        objModel.r_ecfamount = Convert.ToString(dt.Rows[i]["ecfamount"].ToString());
                        objModel.r_invoiceno = Convert.ToString(dt.Rows[i]["invoiceno"].ToString());
                        objModel.r_Invdate = Convert.ToString(dt.Rows[i]["Invdate"].ToString());
                        objModel.r_invoicedesc = Convert.ToString(dt.Rows[i]["invoicedesc"].ToString());
                        objModel.r_invoiceamt = Convert.ToString(dt.Rows[i]["invoiceamt"].ToString());
                        objModel.r_Recoveryamt = Convert.ToString(dt.Rows[i]["Recoveryamt"].ToString());
                        objModel.r_RecoveryExecption = Convert.ToString(dt.Rows[i]["RecoveryExecption"].ToString());
                        objModel.r_Recoveryno = Convert.ToString(dt.Rows[i]["Recoveryno"].ToString());
                        objModel.r_Recoverygid = Convert.ToString(dt.Rows[i]["Recoverygid"].ToString());
                        objRecovery.Add(objModel);
                    }
                }
                return objRecovery;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objRecovery;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_Payment> SelectDSAPaymentid(int id)
        {
            List<EOW_Payment> objExpense = new List<EOW_Payment>();
            try
            {

                EOW_Payment objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                cmd.CommandType = CommandType.StoredProcedure; 
                cmd.Parameters.Add("@para3", SqlDbType.VarChar).Value = id;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "DSAPaymentByid";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_Payment();
                    objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["ecfcreditline_pay_mode"].ToString());
                    objModel.RefNoName = Convert.ToString(dt.Rows[i]["ecfcreditline_ref_no"].ToString());
                    objModel.Beneficiary = Convert.ToString(dt.Rows[i]["ecfcreditline_beneficiary"].ToString());
                    objModel.PaymentAmount = Convert.ToString(dt.Rows[i]["ecfcreditline_amount"].ToString());
                    objModel.Description = Convert.ToString(dt.Rows[i]["ecfcreditline_desc"].ToString());
                    objModel.Ifsccode = Convert.ToString(dt.Rows[i]["ecfcreditline_ifsc_code"].ToString());
                    objModel.DSASupplier_Gid = dt.Rows[i]["invoice_supplier_gid"].ToString();
                    objModel.DSAInvoice_Gid = dt.Rows[i]["invoice_gid"].ToString();
                    objModel.DSAInvoice_Amount = dt.Rows[i]["invoice_amount"].ToString();
                    objModel.Exception = "0";
                    if (objModel.PaymentModeName == "REC")
                    {
                        DataTable dte = new DataTable();
                        cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = objModel.RefNoName;
                        cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetRecoveryException";
                        da = new SqlDataAdapter(cmd);
                        da.Fill(dte);

                        if (dte.Rows.Count > 0)
                        {
                            objModel.Exception = Convert.ToString(dte.Rows[0]["recovery_exception"].ToString());
                        }
                        else
                        {
                            objModel.Exception = "0";
                        }
                    }
                    objExpense.Add(objModel);
                }

                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        public IEnumerable<EOW_PaymentMode> PaymentModeDSAsupplierdata(string suplierid)
        {
            List<EOW_PaymentMode> objNatureofPayment = new List<EOW_PaymentMode>();
            try
            {
                EOW_PaymentMode objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@Supplierid", SqlDbType.VarChar).Value = suplierid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "PaymodeDSAsupplier";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_PaymentMode();
                    objModel.PaymentModeId = Convert.ToInt32(dt.Rows[i]["paymode_gid"].ToString());
                    objModel.PaymentModeName = Convert.ToString(dt.Rows[i]["paymode_code"].ToString());
                    objNatureofPayment.Add(objModel);
                }
                return objNatureofPayment;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objNatureofPayment;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }

        //IEM_GST_Phase3_1 end
        public string UpdateTravelModeCreateGST(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid, string rowid)
        {
            string Emp_Msg = "";
            string output = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            string Emp_Msgrate = "0";
            string Emp_Msgdis = "0";
            string Emp_Msgtmode = "";
            string Emp_Msgtclass = "";
            string Emp_MsgtTraveltypes = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                GetConnection();
                DataTable dtfc = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@BranchCode", SqlDbType.VarChar).Value = oussp[0].ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getbussinesssegment";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtfc);
                string FcCode;
                if (dtfc.Rows.Count > 0)
                {
                    FcCode = dtfc.Rows[0]["branch_businesssegement"].ToString();
                }
                else
                {
                    FcCode = EmployeeeExpense.FC;
                }
                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.Rate != null)
                {
                    Emp_Msgrate = EmployeeeExpense.Rate;
                }
                else
                {
                    Emp_Msgrate = "0";
                }
                if (EmployeeeExpense.Distance != null)
                {
                    Emp_Msgdis = EmployeeeExpense.Distance;
                }
                else
                {
                    Emp_Msgdis = "0";
                }
                if (EmployeeeExpense.TravelModeName != "0" && EmployeeeExpense.TravelModeName != null)
                {
                    Emp_Msgtmode = EmployeeeExpense.TravelModeName;
                }
                else
                {
                    Emp_Msgtmode = "";
                }
                if (EmployeeeExpense.TravelClassName != "0" && EmployeeeExpense.TravelClassName != null)
                {
                    Emp_Msgtclass = EmployeeeExpense.TravelClassName;
                }
                else
                {
                    Emp_Msgtclass = "";
                }
                if (EmployeeeExpense.Traveltypes == "T" || EmployeeeExpense.Traveltypes == "O")
                {
                    Emp_MsgtTraveltypes = "T";
                    status = GetStatusexcelduplicate(
                                                              EmployeeeExpense.NatureofExpensesName,
                                                              EmployeeeExpense.ExpenseCategoryName,
                                                              EmployeeeExpense.SubCategoryName,
                                                              empgid,
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString(),
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString(),
                                                              EmployeeeExpense.Amount,
                                                              rowid.ToString(), "", "", "", "localconduplicatete"
                                                              );
                    if (status == "Exists")
                    {
                        output = "Duplicatedate";
                    }
                    else
                    {
                        output = "valid";
                    }
                }
                else
                {
                    Emp_MsgtTraveltypes = "O";
                    output = "valid";
                }
                if (output == "valid")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILSGST", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@Ecftravel_gid", SqlDbType.Int).Value = Convert.ToInt32(rowid);
                    cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = Convert.ToInt32(invoicegid);
                    cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                    cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                    cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = Emp_Msgtmode;
                    cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = Emp_Msgtclass;
                    cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                    cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                    cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                    cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString();
                    cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString();
                    cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = Emp_Msgdis;
                    cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Emp_Msgrate;
                    cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = FcCode;
                    cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.TravelHsnid;
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msgretn = (dt.Rows[0]["Message"].ToString());
                    }
                    else
                    {
                        Emp_Msgretn = "Failed";
                    }
                    return Emp_Msgretn;
                }
                else
                {
                    Emp_Msgretn = "duplicate";
                    return Emp_Msgretn;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return Emp_Msgretn;
        }
        public EOW_EmployeeeExpense GetEcfHeader(string EcfID)
        {
            EOW_EmployeeeExpense objModel = new EOW_EmployeeeExpense();
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpensesGST", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@id1", SqlDbType.VarChar).Value = EcfID;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetEcfHeader";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    objModel.ecf_GID = Convert.ToInt32(dt.Rows[0]["ecf_gid"].ToString());
                    objModel.ecf_raiser = Convert.ToInt32(dt.Rows[0]["ecf_raiser"].ToString());
                    objModel.noofperson = Convert.ToString(dt.Rows[0]["ecf_travelpersoncount"].ToString());
                    objModel.ECF_Amount = Convert.ToString(objCmnFunctions.GetINRAmount(dt.Rows[0]["ecf_amount"].ToString()));
                    objModel.ECF_Date = Convert.ToString(dt.Rows[0]["ecf_date"].ToString());
                    objModel.ecfdescription = Convert.ToString(dt.Rows[0]["ecf_description"].ToString()); //14-12-2020 
                    objModel.ecfremark = Convert.ToString(dt.Rows[0]["ecf_remark"].ToString()); //30-12-2020     
                    string Claimmonth = Convert.ToString(dt.Rows[0]["ecf_claim_month"].ToString());
                    if (Claimmonth == "01-01-1900 12:00:00 AM" || Claimmonth == "01-01-1900 00:00:00") // ramya modified on 20 feb 23
                    {
                        objModel.ClaimMonth = "";
                    }
                    else
                    {
                        objModel.ClaimMonth = getconverttomonthtodateto(dt.Rows[0]["ecf_claim_month"].ToString());// 15-02-2020
                    }
                }
                return objModel;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objModel;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string getconverttomonthtodateto(string months)
        {
            string monthyear = "";
            if (months != null || months != "")
            {
                DateTime convrtdate = new DateTime();
                convrtdate = objCmnFunctions.convertoDateTime(months);
                string year = "";
                string month = "";
                year = convrtdate.Year.ToString();
                month = convrtdate.Month.ToString();
                if (month.ToString() != "0")
                {
                    if (month.ToString() == "1")
                    {
                        monthyear = "January-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "2")
                    {
                        monthyear = "February-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "3")
                    {
                        monthyear = "March-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "4")
                    {
                        monthyear = "April-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "5")
                    {
                        monthyear = "May-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "6")
                    {
                        monthyear = "June-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "7")
                    {
                        monthyear = "July-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "8")
                    {
                        monthyear = "August-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "9")
                    {
                        monthyear = "September-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "10")
                    {
                        monthyear = "October-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "11")
                    {
                        monthyear = "November-" + year;
                        return monthyear;
                    }
                    else if (month.ToString() == "12")
                    {
                        monthyear = "December-" + year;
                        return monthyear;
                    }
                    else
                    {
                        monthyear = "January-" + year;
                        return monthyear;
                    }
                }
            }
            return monthyear;
        }
        public DataTable GetCygnetSearchInvDetails(CygnetSearchModel cygnetmodel)
        {
            GetConnection();
            cmd = new SqlCommand("SP_EOW_Get_CygnetBySearchTravelClaim", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@Action", SqlDbType.VarChar).Value = "ByID";
            cmd.Parameters.Add("@CygnetID", SqlDbType.Int).Value = cygnetmodel.Cygnet_Gid;
            DataTable dt = new DataTable();
            da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            if (dt.Rows.Count > 0)
                return dt;
            else
                return null;
        }
        public IEnumerable<EOW_TravelClaim> GetTravelModedataGST(string ecfid, string invoiceid, string traveltype)
        {
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                EOW_TravelClaim objModel;
                DataTable dt = new DataTable();
                GetConnection();
                cmd = new SqlCommand("pr_eow_mst_NatureofExpensesGST", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@para2", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetTravelDetail";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecftravel_gid"].ToString());
                    objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                    objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                    objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    objModel.PlaceFrom = Convert.ToString(dt.Rows[i]["ecftravel_city_from"].ToString());
                    objModel.ClaimPeriodFrom = Convert.ToString(dt.Rows[i]["ecfdebitline_period_from"].ToString());
                    objModel.ClaimPeriodTo = Convert.ToString(dt.Rows[i]["ecfdebitline_period_to"].ToString());
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecftravel_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecftravel_fc"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecftravel_cc"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecftravel_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecftravel_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.PlaceTo = Convert.ToString(dt.Rows[i]["ecftravel_city_to"].ToString());
                    objModel.Distance = Convert.ToString(dt.Rows[i]["ecftravel_distance"].ToString());
                    objModel.Rate = Convert.ToString(dt.Rows[i]["ecftravel_rate"].ToString());
                    objModel.TravelModeName = Convert.ToString(dt.Rows[i]["transport_name"].ToString());
                    objModel.TravelClassName = Convert.ToString(dt.Rows[i]["transportclass_name"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["HsnId"].ToString());
                    objModel.TravelHsnCode = dt.Rows[i]["HsnCode"].ToString();
                    objModel.TravelHsnDesc = dt.Rows[i]["HsnDesc"].ToString();
                    objExpense.Add(objModel);
                }
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public string InsertTravelModeCreateGst(EOW_TravelClaim EmployeeeExpense, string ecfgid, string invoicegid, string empgid)
        {
            string output = "";
            string Emp_Msg = "0";
            string Emp_Msgbrnch = "0";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            string Emp_Msgrate = "0";
            string Emp_Msgdis = "0";
            string Emp_Msgtmode = "";
            string Emp_Msgtclass = "";
            string Emp_MsgtTraveltypes = "";
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                GetConnection();
                DataTable dtfc = new DataTable();
                cmd = new SqlCommand("pr_eow_trn_getgrndetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@BranchCode", SqlDbType.VarChar).Value = oussp[0].ToString();
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "Getbussinesssegment";
                da = new SqlDataAdapter(cmd);
                da.Fill(dtfc);
                string FcCode;
                if (dtfc.Rows.Count > 0)
                {
                    FcCode = dtfc.Rows[0]["branch_businesssegement"].ToString();
                }
                else
                {
                    FcCode = EmployeeeExpense.FC;
                }
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.Rate != null)
                {
                    Emp_Msgrate = EmployeeeExpense.Rate;
                }
                else
                {
                    Emp_Msgrate = "0";
                }
                if (EmployeeeExpense.Distance != null)
                {
                    Emp_Msgdis = EmployeeeExpense.Distance;
                }
                else
                {
                    Emp_Msgdis = "0";
                }
                if (EmployeeeExpense.TravelModeName != "0" && EmployeeeExpense.TravelModeName != null)
                {
                    Emp_Msgtmode = EmployeeeExpense.TravelModeName;
                }
                else
                {
                    Emp_Msgtmode = "";
                }
                if (EmployeeeExpense.TravelClassName != "0" && EmployeeeExpense.TravelClassName != null)
                {
                    Emp_Msgtclass = EmployeeeExpense.TravelClassName;
                }
                else
                {
                    Emp_Msgtclass = "";
                }
                if (EmployeeeExpense.Traveltypes == "T" || EmployeeeExpense.Traveltypes == "O")
                {
                    Emp_MsgtTraveltypes = "T";
                    status = GetStatusexcelduplicate(
                                                EmployeeeExpense.NatureofExpensesName,
                                                EmployeeeExpense.ExpenseCategoryName,
                                                EmployeeeExpense.SubCategoryName,
                                                empgid,
                                                EmployeeeExpense.ClaimPeriodFrom,
                                                EmployeeeExpense.ClaimPeriodTo,
                                                EmployeeeExpense.Amount,
                                                "", "", "", "", "localconduplicatet"
                                                );
                    if (status == "Exists")
                    {
                        output = "Duplicatedate";
                    }
                    else
                    {
                        output = "valid";
                    }
                }
                else
                {
                    Emp_MsgtTraveltypes = "O";
                    output = "valid";
                }
                if (output == "valid")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILSGST", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = Convert.ToInt32(EmployeeeExpense.InvGid);
                    cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                    cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                    cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = Emp_Msgtmode;
                    cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = Emp_Msgtclass;
                    cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                    cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                    cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                    cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString();
                    cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString();
                    cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = Emp_Msgdis;
                    cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Emp_Msgrate;
                    cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = FcCode;
                    cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.TravelHsnid;
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msgretn = (dt.Rows[0]["Message"].ToString());
                    }
                    else
                    {
                        Emp_Msgretn = "Failed";
                    }
                    return Emp_Msgretn;
                }
                else
                {
                    Emp_Msgretn = "duplicate";
                    return Emp_Msgretn;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public IEnumerable<CygnetSearchModel> SelectInvoiceSearch(CygnetSearchModel data)
        {
            List<CygnetSearchModel> Inv = new List<CygnetSearchModel>();
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                CygnetSearchModel objModel;
                cmd = new SqlCommand("SP_EOW_Get_CygnetBySearch", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@PanNo", SqlDbType.VarChar).Value = data.Cygnet_SupplierPanNo;
                cmd.Parameters.Add("@SupplierName", SqlDbType.VarChar).Value = data.Cygnet_SupplierName;
                cmd.Parameters.Add("@GSTN", SqlDbType.VarChar).Value = data.Cygnet_Supplier_GSTNNo;
                cmd.Parameters.Add("@InvoiceNo", SqlDbType.VarChar).Value = data.Cygnet_InvoiceNo;
                if (data.Cygnet_InvoiceFromDate != "" && data.Cygnet_InvoiceFromDate != null)
                {
                    cmd.Parameters.Add("@InvoiceFromDate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(data.Cygnet_InvoiceFromDate).ToString();
                }
                else
                {
                    cmd.Parameters.Add("@InvoiceFromDate", SqlDbType.VarChar).Value = data.Cygnet_InvoiceFromDate;
                }
                if (data.Cygnet_InvoiceToDate != "" && data.Cygnet_InvoiceToDate != null)
                {
                    cmd.Parameters.Add("@InvoiceToDate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(data.Cygnet_InvoiceToDate).ToString();
                }
                else
                {
                    cmd.Parameters.Add("@InvoiceToDate", SqlDbType.VarChar).Value = data.Cygnet_InvoiceToDate;
                }
                cmd.Parameters.Add("@Action", SqlDbType.VarChar).Value = "GetData";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                foreach (DataRow row in dt.Rows)
                {
                    objModel = new CygnetSearchModel();
                    objModel.Cygnet_SupplierName = row["Cygnet_Supplier"].ToString();
                    objModel.Cygnet_InvoiceNo = row["Cygnet_Invoice_No"].ToString();
                    objModel.Cygnet_InvoiceDate = row["Cygnet_Invoice_Date"].ToString();
                    objModel.Cygnet_ProviderLocation = row["Cygnet_Provider_Location_Name"].ToString();
                    objModel.Cygnet_ReceiverLocation = row["Cygnet_Receiver_Location_Name"].ToString();
                    objModel.Cygnet_TaxableAmt = row["Cygnet_Taxable_Amount"].ToString();
                    objModel.Cygnet_CGSTAmt = row["Cygnet_CGST_Amount"].ToString();
                    objModel.Cygnet_SGSTAmt = row["Cygnet_SGST_Amount"].ToString();
                    objModel.Cygnet_IGSTAmt = row["Cygnet_IGST_Amount"].ToString();
                    objModel.Cygnet_InvoiceAmt = row["Cygnet_Invoice_Amount"].ToString();
                    objModel.Cygnet_Gid = Convert.ToInt64(row["Cygnet_gid"]);
                    objModel.Cygnet_HSNCode = row["Cygnet_HSN_Code"].ToString();
                    objModel.Cygnet_Supplier_GSTNNo = row["Cygnet_Supplier_GSTN_No"].ToString();
                    Inv.Add(objModel);
                }
                return Inv;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return Inv;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
        public DataTable GetCygnetSearchInvDetailsCount(CygnetSearchModel cygmodels)
        {
            GetConnection();
            DataTable dt = new DataTable();
            cmd = new SqlCommand("SP_EOW_Get_CygnetBySearch", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@PanNo", SqlDbType.VarChar).Value = cygmodels.Cygnet_SupplierPanNo;
            cmd.Parameters.Add("@SupplierName", SqlDbType.VarChar).Value = cygmodels.Cygnet_SupplierName;
            cmd.Parameters.Add("@GSTN", SqlDbType.VarChar).Value = cygmodels.Cygnet_Supplier_GSTNNo;
            cmd.Parameters.Add("@InvoiceNo", SqlDbType.VarChar).Value = cygmodels.Cygnet_InvoiceNo;
            if (cygmodels.Cygnet_InvoiceFromDate != "" && cygmodels.Cygnet_InvoiceFromDate != null)
            {
                cmd.Parameters.Add("@InvoiceFromDate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(cygmodels.Cygnet_InvoiceFromDate).ToString();
            }
            else
            {
                cmd.Parameters.Add("@InvoiceFromDate", SqlDbType.VarChar).Value = cygmodels.Cygnet_InvoiceFromDate;
            }
            if (cygmodels.Cygnet_InvoiceToDate != "" && cygmodels.Cygnet_InvoiceToDate != null)
            {
                cmd.Parameters.Add("@InvoiceToDate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(cygmodels.Cygnet_InvoiceToDate).ToString();
            }
            else
            {
                cmd.Parameters.Add("@InvoiceToDate", SqlDbType.VarChar).Value = cygmodels.Cygnet_InvoiceToDate;
            }
            cmd.Parameters.Add("@Action", SqlDbType.VarChar).Value = "SearchInvoice";
            da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            return dt;
        }
        public DataTable GetCygnetSearchInvDetailsCountSup(CygnetSearchModel cygmodels)
        {
            GetConnection();
            DataTable dt = new DataTable();
            cmd = new SqlCommand("SP_EOW_Get_CygnetBySearch", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@PanNo", SqlDbType.VarChar).Value = cygmodels.Cygnet_SupplierPanNo;
            cmd.Parameters.Add("@SupplierName", SqlDbType.VarChar).Value = cygmodels.Cygnet_SupplierName;
            cmd.Parameters.Add("@GSTN", SqlDbType.VarChar).Value = cygmodels.Cygnet_Supplier_GSTNNo;
            cmd.Parameters.Add("@InvoiceNo", SqlDbType.VarChar).Value = cygmodels.Cygnet_InvoiceNo;
            if (cygmodels.Cygnet_InvoiceFromDate != "" && cygmodels.Cygnet_InvoiceFromDate != null)
            {
                cmd.Parameters.Add("@InvoiceFromDate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(cygmodels.Cygnet_InvoiceFromDate).ToString();
            }
            else
            {
                cmd.Parameters.Add("@InvoiceFromDate", SqlDbType.VarChar).Value = cygmodels.Cygnet_InvoiceFromDate;
            }
            if (cygmodels.Cygnet_InvoiceToDate != "" && cygmodels.Cygnet_InvoiceToDate != null)
            {
                cmd.Parameters.Add("@InvoiceToDate", SqlDbType.VarChar).Value = objCmnFunctions.convertoDateTimeString(cygmodels.Cygnet_InvoiceToDate).ToString();
            }
            else
            {
                cmd.Parameters.Add("@InvoiceToDate", SqlDbType.VarChar).Value = cygmodels.Cygnet_InvoiceToDate;
            }
            cmd.Parameters.Add("@Action", SqlDbType.VarChar).Value = "SearchInvoice";
            da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            return dt;
        }
        public string DeletePettyCashExpense(int EmployeeeExpenseGID, string ecfgid)
        {
            string delant = "0";
            try
            {
                GetConnection();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_Delete_TravelExpense", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecftravel_isremoved", SqlDbType.VarChar).Value = "Y";
                cmd.Parameters.Add("@ecftravel_gid", SqlDbType.Int).Value = EmployeeeExpenseGID;
                cmd.Parameters.Add("@ecftravel_ecf_gid", SqlDbType.Int).Value = Convert.ToInt32(ecfgid); // ECF Travel Gid 
                cmd.Parameters.Add("@ecftravel_invoice_gid", SqlDbType.Int).Value = 0;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "DeleteTravelExpense";
                cmd.ExecuteNonQuery();
                return delant;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
            }
        }
        public string UpdateNonEmployeeeExpensenew(EOW_TravelClaim EmployeeeExpense, string ecfgid, string expactiverowid, string empgid)
        {
            string Emp_MsgtPlaceFrom = "";
            string Emp_MsgtPlaceTo = "";
            string Emp_Msg = "";
            string output = "";
            string status = "";
            string Emp_Msgretn = "";
            string Emp_Msgdesc = "";
            string Emp_Msgrate = "0";
            string Emp_Msgdis = "0";
            string Emp_Msgtmode = "";
            string Emp_Msgtclass = "";
            string Emp_MsgtTraveltypes = "";
            string NatureofExpenses = Convert.ToString(ConfigurationManager.AppSettings["Ecflocalnature"].ToString());
            try
            {
                status = GetStatusexcel(EmployeeeExpense.FC.ToString(), "", "", "FunctionCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Function Code";
                    return Emp_Msgretn;
                }
                status = GetStatusexcel(EmployeeeExpense.CC.ToString(), "", "", "CostCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Cost Code";
                    return Emp_Msgretn;
                }
                string Productsplit = EmployeeeExpense.ProductCode.ToString();
                string[] Productsp = Productsplit.Split('-');
                status = GetStatusexcel(Productsp[0].ToString(), "", "", "ProductCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid Product Code";
                    return Emp_Msgretn;
                }
                string ousplit = EmployeeeExpense.OUCode.ToString();
                string[] oussp = ousplit.Split('-');
                status = GetStatusexcel(oussp[0].ToString(), "", "", "OUCode");
                if (status == "notexists")
                {
                    Emp_Msgretn = "Invalid OU Code";
                    return Emp_Msgretn;
                }
                if (EmployeeeExpense.travelDescription != null)
                {
                    Emp_Msgdesc = objCmnFunctions.Getreplacesinglequotes(EmployeeeExpense.travelDescription);
                }
                else
                {
                    Emp_Msgdesc = "";
                }
                if (EmployeeeExpense.Rate != null)
                {
                    Emp_Msgrate = EmployeeeExpense.Rate;
                }
                else
                {
                    Emp_Msgrate = "0";
                }
                if (EmployeeeExpense.Distance != null)
                {
                    Emp_Msgdis = EmployeeeExpense.Distance;
                }
                else
                {
                    Emp_Msgdis = "0";
                }
                if (EmployeeeExpense.TravelModeName != "0" && EmployeeeExpense.TravelModeName != null)
                {
                    Emp_Msgtmode = EmployeeeExpense.TravelModeName;
                }
                else
                {
                    Emp_Msgtmode = "";
                }
                if (EmployeeeExpense.TravelClassName != "0" && EmployeeeExpense.TravelClassName != null)
                {
                    Emp_Msgtclass = EmployeeeExpense.TravelClassName;
                }
                else
                {
                    Emp_Msgtclass = "";
                }
                if (EmployeeeExpense.PlaceFrom != "--Select--" && EmployeeeExpense.PlaceFrom != null)
                {
                    Emp_MsgtPlaceFrom = EmployeeeExpense.PlaceFrom;
                }
                else
                {
                    Emp_MsgtPlaceFrom = "";
                }
                if (EmployeeeExpense.PlaceTo != "--Select--" && EmployeeeExpense.PlaceTo != null)
                {
                    Emp_MsgtPlaceTo = EmployeeeExpense.PlaceTo;
                }
                else
                {
                    Emp_MsgtPlaceTo = "";
                }
                if (EmployeeeExpense.NatureofExpensesName == NatureofExpenses)
                {
                    Emp_MsgtTraveltypes = "T";
                    status = GetStatusexcelduplicate(
                                                              EmployeeeExpense.NatureofExpensesName,
                                                              EmployeeeExpense.ExpenseCategoryName,
                                                              EmployeeeExpense.SubCategoryName,
                                                              empgid,
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString(),
                                                              objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString(),
                                                              EmployeeeExpense.Amount,
                                                              expactiverowid.ToString(), "", "", "", "localconduplicatete"
                                                              );
                    if (status == "Exists")
                    {
                        output = "Duplicatedate";
                    }
                    else
                    {
                        string statusnew = GetStatusexcelduplicate(
                                                 empgid,
                                                 Emp_Msgtmode,
                                                 EmployeeeExpense.SubCategoryName,
                                                 empgid,
                                                EmployeeeExpense.ClaimPeriodFrom,
                                                 EmployeeeExpense.ClaimPeriodFrom,
                                                 EmployeeeExpense.PlaceFrom,
                                                 EmployeeeExpense.PlaceTo,
                                                  EmployeeeExpense.Amount,
                                                  "", "", "localemplclam"
                                                 );
                        if (statusnew == "Exists")
                        {
                            output = "Duplicatedate1";
                        }
                        else
                        {
                            output = "valid";
                        }
                    }
                }
                else
                {
                    Emp_MsgtTraveltypes = "O";
                    output = "valid";
                }
                if (output == "valid")
                {
                    GetConnection();
                    DataTable dt = new DataTable();
                    cmd = new SqlCommand("pr_eow_mst_NatureofExpenses", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@para1", SqlDbType.VarChar).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "GetExpCatGL";
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msg = Convert.ToString(dt.Rows[0]["expcat_gl_no"].ToString());
                    }
                    else
                    {
                        Emp_Msgretn = "Invalid GL Code";
                        return Emp_Msgretn;
                    }
                    GetConnection();
                    dt = new DataTable();
                    cmd = new SqlCommand("PR_EOW_SET_TRAVELDETAILSGST", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add("@ECF_Id", SqlDbType.Int).Value = ecfgid;
                    cmd.Parameters.Add("@InvId", SqlDbType.Int).Value = 0;//Convert.ToInt32(EmployeeeExpense.InvGid);
                    cmd.Parameters.Add("@Ecftravel_gid", SqlDbType.Int).Value = expactiverowid;
                    cmd.Parameters.Add("@Expnature_gid", SqlDbType.Int).Value = EmployeeeExpense.NatureofExpensesName;
                    cmd.Parameters.Add("@Expcat_gid", SqlDbType.Int).Value = EmployeeeExpense.ExpenseCategoryName;
                    cmd.Parameters.Add("@Expsubcat_gid", SqlDbType.Int).Value = EmployeeeExpense.SubCategoryName;
                    cmd.Parameters.Add("@Employee_gid", SqlDbType.Int).Value = empgid;
                    cmd.Parameters.Add("@branch_gid", SqlDbType.Int).Value = 0;
                    cmd.Parameters.Add("@Exp_Type", SqlDbType.VarChar).Value = Emp_MsgtTraveltypes;
                    cmd.Parameters.Add("@Transport_gid", SqlDbType.VarChar).Value = Emp_Msgtmode;
                    cmd.Parameters.Add("@Transportclass_gid", SqlDbType.VarChar).Value = Emp_Msgtclass;
                    cmd.Parameters.Add("@City_From", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceFrom;
                    cmd.Parameters.Add("@City_To", SqlDbType.VarChar).Value = EmployeeeExpense.PlaceTo;
                    cmd.Parameters.Add("@GL_no", SqlDbType.VarChar).Value = 0;
                    cmd.Parameters.Add("@Desc", SqlDbType.VarChar).Value = Emp_Msgdesc;
                    cmd.Parameters.Add("@From_Date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodFrom).ToString();
                    cmd.Parameters.Add("@To_date", SqlDbType.SmallDateTime).Value = objCmnFunctions.convertoDateTimeString(EmployeeeExpense.ClaimPeriodTo).ToString();
                    cmd.Parameters.Add("@Expense_CC", SqlDbType.VarChar).Value = EmployeeeExpense.CC;
                    cmd.Parameters.Add("@Product_code", SqlDbType.VarChar).Value = Productsp[0].ToString();
                    cmd.Parameters.Add("@Exp_OU_Code", SqlDbType.VarChar).Value = oussp[0].ToString();
                    cmd.Parameters.Add("@Exp_Distance", SqlDbType.Decimal).Value = Emp_Msgdis;
                    cmd.Parameters.Add("@Rate", SqlDbType.Decimal).Value = Emp_Msgrate;
                    cmd.Parameters.Add("@Amount", SqlDbType.Decimal).Value = EmployeeeExpense.Amount;
                    cmd.Parameters.Add("@FcCode", SqlDbType.VarChar).Value = EmployeeeExpense.FC;
                    cmd.Parameters.Add("@HsinId", SqlDbType.Int).Value = EmployeeeExpense.HsnId;
                    cmd.Parameters.Add("@RCMFlag", SqlDbType.Char).Value = EmployeeeExpense.RCMFlag;
                    da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                    if (dt.Rows.Count > 0)
                    {
                        Emp_Msgretn = (dt.Rows[0]["Message"].ToString());
                    }
                    else
                    {
                        Emp_Msgretn = "Failed";
                    }
                    return Emp_Msgretn;
                }
                else if (output == "Duplicatedate1")
                {
                    Emp_Msgretn = "You have already claimed conveyance for the ECF Claim Date ";
                    return Emp_Msgretn;
                }
                else
                {
                    Emp_Msgretn = "Duplicate Data Alreay in DataBase";
                    return Emp_Msgretn;
                }
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return "";
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
            return Emp_Msgretn;
        }
        public IEnumerable<EOW_TravelClaim> GetSuppliserDedtl(string ecfid, string invoiceid, string traveltype, int page = 1)
        {
            int pageSize = 100;
            int totalPage = 0;
            int totalRecord = 0;
            List<EOW_TravelClaim> objExpense = new List<EOW_TravelClaim>();
            try
            {
                LocalConveyanceNewController locals = new LocalConveyanceNewController();
                EOW_TravelClaim objModel;
                GetConnection();
                DataTable dt1 = new DataTable();
                DataTable dt = new DataTable();
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "supplierdebitdetails";
                da = new SqlDataAdapter(cmd);
                da.Fill(dt);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    objModel = new EOW_TravelClaim();
                    objModel.TravelMode_GID = Convert.ToInt32(dt.Rows[i]["ecfdebitline_gid"].ToString());
                    objModel.invoicepoitem_GID = Convert.ToString(dt.Rows[i]["ecfdebitline_invoicepoitem_gid"].ToString());
                    if (Convert.ToString(dt.Rows[i]["ecfdebitline_category_type"].ToString()) == "A")
                    {
                        objModel.NatureofExpensesName = "";
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["assetcategory_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["asset_description"].ToString());
                    }
                    else
                    {
                        objModel.NatureofExpensesName = Convert.ToString(dt.Rows[i]["expnature_name"].ToString());
                        objModel.ExpenseCategoryName = Convert.ToString(dt.Rows[i]["expcat_name"].ToString());
                        objModel.SubCategoryName = Convert.ToString(dt.Rows[i]["expsubcat_name"].ToString());
                    }
                    objModel.ClaimMonth = Convert.ToString(dt.Rows[i]["ecfdebitline_gl_no"].ToString());
                    objModel.FC = Convert.ToString(dt.Rows[i]["ecfdebitline_fc_code"].ToString());
                    objModel.CC = Convert.ToString(dt.Rows[i]["ecfdebitline_cc_code"].ToString());
                    objModel.ProductCode = Convert.ToString(dt.Rows[i]["ecfdebitline_product_code"].ToString());
                    objModel.OUCode = Convert.ToString(dt.Rows[i]["ecfdebitline_ou_code"].ToString());
                    objModel.Amount = Convert.ToString(dt.Rows[i]["ecftravel_amount"].ToString());
                    objModel.Branch = Convert.ToString(dt.Rows[i]["ecfdebitline_ref_gid"].ToString());
                    objModel.TravelHsnid = Convert.ToInt32(dt.Rows[i]["HsnId"].ToString());
                    objModel.TravelHsnCode = dt.Rows[i]["HsnCode"].ToString();
                    objModel.TravelHsnDesc = dt.Rows[i]["HsnDesc"].ToString();
                    objExpense.Add(objModel);
                }
                cmd = new SqlCommand("pr_eow_sup_getpaymodedetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@ecf_id", SqlDbType.VarChar).Value = ecfid;
                cmd.Parameters.Add("@invoice_gid", SqlDbType.VarChar).Value = invoiceid;
                cmd.Parameters.Add("@action", SqlDbType.VarChar).Value = "DebitAmount";
                da1 = new SqlDataAdapter(cmd);
                da1.Fill(dt1);
                if (dt1.Rows.Count > 0)
                {
                    HttpContext.Current.Session["invoiceDebitamnt"] = Convert.ToDecimal(dt1.Rows[0]["Total"].ToString());
                }
                totalRecord = objExpense.Count();
                if (totalRecord <= 10)
                {
                    pageSize = 5;
                }
                else if (totalRecord <= 100)
                {
                    pageSize = 10;
                }
                else if (totalRecord < 1000)
                {
                    pageSize = 100;
                }
                else
                {
                    pageSize = 1000;
                }
                totalPage = (totalRecord / pageSize) + ((totalRecord % pageSize) > 0 ? 1 : 0);
                objExpense = objExpense.OrderBy(O => O.TravelMode_GID).Skip(((page - 1) * pageSize)).Take(pageSize).ToList();
                HttpContext.Current.Session["TotalPage"] = pageSize;
                HttpContext.Current.Session["TotalRows"] = totalRecord;
                return objExpense;
            }
            catch (Exception ex)
            {
                objErrorLog.WriteErrorLog(ex.Message.ToString(), ex.ToString());
                return objExpense;
            }
            finally
            {
                con.Close();
                da.Dispose();
            }
        }
    }
}
